{"ast":null,"code":"// Process [link](<to> \"stuff\")\n\n'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar parseLinkLabel = require('../helpers/parse_link_label');\nvar parseLinkDestination = require('../helpers/parse_link_destination');\nvar parseLinkTitle = require('../helpers/parse_link_title');\nvar normalizeReference = require('../common/utils').normalizeReference;\nvar isSpace = require('../common/utils').isSpace;\nmodule.exports = function link(state, silent) {\n  var attrs,\n    code,\n    label,\n    labelEnd,\n    labelStart,\n    pos,\n    res,\n    ref,\n    title,\n    token,\n    href = '',\n    oldPos = state.pos,\n    max = state.posMax,\n    start = state.pos;\n  if (state.src.charCodeAt(state.pos) !== 0x5B /* [ */) {\n    return false;\n  }\n  labelStart = state.pos + 1;\n  labelEnd = parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) {\n    return false;\n  }\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n    if (pos >= max) {\n      return false;\n    }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) {\n          break;\n        }\n      }\n    } else {\n      title = '';\n    }\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {\n      start = pos + 1;\n      pos = parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n    token = state.push('link_open', 'a', 1);\n    token.attrs = attrs = [['href', href]];\n    if (title) {\n      attrs.push(['title', title]);\n    }\n    state.md.inline.tokenize(state);\n    token = state.push('link_close', 'a', -1);\n  }\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};","map":{"version":3,"names":["require","parseLinkLabel","parseLinkDestination","parseLinkTitle","normalizeReference","isSpace","module","exports","link","state","silent","attrs","code","label","labelEnd","labelStart","pos","res","ref","title","token","href","oldPos","max","posMax","start","src","charCodeAt","ok","md","normalizeLink","str","validateLink","env","references","slice","push","inline","tokenize"],"sources":["/Users/chenhetian/04Front_end/FruitVue0629/fruitshop/node_modules/markdown-it/lib/rules_inline/link.js"],"sourcesContent":["// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar parseLinkLabel       = require('../helpers/parse_link_label');\nvar parseLinkDestination = require('../helpers/parse_link_destination');\nvar parseLinkTitle       = require('../helpers/parse_link_title');\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      title,\n      token,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n * This is the ParseError class, which is the main error thrown by KaTeX\n * functions when something has gone wrong. This is used to distinguish internal\n * errors from errors in the expression that the user provided.\n */\nfunction ParseError(message, lexer, position) {\n  var error = \"KaTeX parse error: \" + message;\n  if (lexer !== undefined && position !== undefined) {\n    // If we have the input and a position, make the error a bit fancier\n\n    // Prepend some information\n    error += \" at position \" + position + \": \";\n\n    // Get the input\n    var input = lexer._input;\n    // Insert a combining underscore at the correct position\n    input = input.slice(0, position) + \"\\u0332\" + input.slice(position);\n\n    // Extract some context from the input and add it to the error\n    var begin = Math.max(0, position - 15);\n    var end = position + 15;\n    error += input.slice(begin, end);\n  }\n\n  // Some hackery to make ParseError a prototype of Error\n  // See http://stackoverflow.com/a/8460753\n  var self = new Error(error);\n  self.name = \"ParseError\";\n  self.__proto__ = ParseError.prototype;\n  self.position = position;\n  return self;\n}\n\n// More hackery\nParseError.prototype.__proto__ = Error.prototype;\nmodule.exports = ParseError;","map":{"version":3,"names":["ParseError","message","lexer","position","error","undefined","input","_input","slice","begin","Math","max","end","self","Error","name","__proto__","prototype","module","exports"],"sources":["/Users/chenhetian/04Front_end/FruitVue0629/hotan-blog/node_modules/katex/src/ParseError.js"],"sourcesContent":["/**\n * This is the ParseError class, which is the main error thrown by KaTeX\n * functions when something has gone wrong. This is used to distinguish internal\n * errors from errors in the expression that the user provided.\n */\nfunction ParseError(message, lexer, position) {\n    var error = \"KaTeX parse error: \" + message;\n\n    if (lexer !== undefined && position !== undefined) {\n        // If we have the input and a position, make the error a bit fancier\n\n        // Prepend some information\n        error += \" at position \" + position + \": \";\n\n        // Get the input\n        var input = lexer._input;\n        // Insert a combining underscore at the correct position\n        input = input.slice(0, position) + \"\\u0332\" +\n            input.slice(position);\n\n        // Extract some context from the input and add it to the error\n        var begin = Math.max(0, position - 15);\n        var end = position + 15;\n        error += input.slice(begin, end);\n    }\n\n    // Some hackery to make ParseError a prototype of Error\n    // See http://stackoverflow.com/a/8460753\n    var self = new Error(error);\n    self.name = \"ParseError\";\n    self.__proto__ = ParseError.prototype;\n\n    self.position = position;\n    return self;\n}\n\n// More hackery\nParseError.prototype.__proto__ = Error.prototype;\n\nmodule.exports = ParseError;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAUA,CAACC,OAAO,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC1C,IAAIC,KAAK,GAAG,qBAAqB,GAAGH,OAAO;EAE3C,IAAIC,KAAK,KAAKG,SAAS,IAAIF,QAAQ,KAAKE,SAAS,EAAE;IAC/C;;IAEA;IACAD,KAAK,IAAI,eAAe,GAAGD,QAAQ,GAAG,IAAI;;IAE1C;IACA,IAAIG,KAAK,GAAGJ,KAAK,CAACK,MAAM;IACxB;IACAD,KAAK,GAAGA,KAAK,CAACE,KAAK,CAAC,CAAC,EAAEL,QAAQ,CAAC,GAAG,QAAQ,GACvCG,KAAK,CAACE,KAAK,CAACL,QAAQ,CAAC;;IAEzB;IACA,IAAIM,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,QAAQ,GAAG,EAAE,CAAC;IACtC,IAAIS,GAAG,GAAGT,QAAQ,GAAG,EAAE;IACvBC,KAAK,IAAIE,KAAK,CAACE,KAAK,CAACC,KAAK,EAAEG,GAAG,CAAC;EACpC;;EAEA;EACA;EACA,IAAIC,IAAI,GAAG,IAAIC,KAAK,CAACV,KAAK,CAAC;EAC3BS,IAAI,CAACE,IAAI,GAAG,YAAY;EACxBF,IAAI,CAACG,SAAS,GAAGhB,UAAU,CAACiB,SAAS;EAErCJ,IAAI,CAACV,QAAQ,GAAGA,QAAQ;EACxB,OAAOU,IAAI;AACf;;AAEA;AACAb,UAAU,CAACiB,SAAS,CAACD,SAAS,GAAGF,KAAK,CAACG,SAAS;AAEhDC,MAAM,CAACC,OAAO,GAAGnB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport api from \"@/api/api\";\nimport moment from 'moment';\nimport VueMarkdown from 'vue-markdown'; // 引入 vue-markdown\n\nexport default {\n  components: {\n    // VueMarkdown,\n    VueMarkdown // 注册 vue-markdown 组件\n  },\n\n  data() {\n    return {\n      tableData: [],\n      showEditor: false,\n      markdownContent: `\n        # 标题\n\n        这是一段 **加粗** 文本，还有 *斜体*。\n\n        ## 列表\n\n        - 列表项1\n        - 列表项2\n        - 列表项3\n\n        ## 代码块\n\n        \\`\\`\\`javascript\n        function helloWorld() {\n          console.log('Hello, World!');\n        }\n        \\`\\`\\`\n      `,\n      form: {},\n      dialogFormVisible: false,\n      viewDialogVis: false,\n      blog: {\n        id: '',\n        title: '',\n        content: '',\n        author_id: '',\n        create_time: '',\n        auth_name: ''\n      },\n      selectedBlog: '',\n      blogs: []\n    };\n  },\n  methods: {\n    handleAdd() {\n      this.dialogFormVisible = true;\n      this.form = {};\n    },\n    handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row));\n      this.dialogFormVisible = true;\n    },\n    // 绑定@imgAdd event\n    imgAdd(pos, $file) {\n      let $vm = this.$refs.md;\n      // 第一步.将图片上传到服务器.\n      const formData = new FormData();\n      formData.append('file', $file);\n      axios({\n        url: `http://${serverHost}/file/upload`,\n        method: 'post',\n        data: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(res => {\n        // 第二步.将返回的url替换到文本原位置![...](./0) -> ![...](url)\n        /**\n         * $vm 指为mavonEditor实例，可以通过如下两种方式获取\n         * 1. 通过引入对象获取: `import {mavonEditor} from ...` 等方式引入后，\n         * `$vm`为`mavonEditor`\n         * 2. 通过$refs获取: html声明ref : `<mavon-editor ref=md ></mavon-editor>，\n         * `$vm`为 `this.$refs.md`\n         */\n        $vm.$img2Url(pos, res.data);\n      });\n    },\n    formatDateTime(dateTime) {\n      return moment(dateTime).format('YYYY-MM-DD HH:mm');\n    },\n    selectBlog(blog) {\n      this.selectedBlog = blog;\n      this.scrollToBlog(blog.id);\n    },\n    scrollToBlog(blogId) {\n      const element = document.getElementById('blog-' + blogId);\n      if (element) {\n        element.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start'\n        });\n      }\n    },\n    saveBlog() {\n      api.getUserInfo().then(response => {\n        const temp = JSON.parse(response.data.msg);\n        this.blog.author_id = temp.id;\n        api.writeArticle(this.blog).then(response => {\n          const createTime = response.data.data.create_time;\n\n          // 更新 blogs 数组，将新发表的博客添加到数组开头\n          this.blogs.unshift({\n            id: response.data.data.id,\n            title: this.blog.title,\n            content: this.blog.content,\n            // 可能需要将 this.blog.content 转换为 Markdown 格式\n            author_id: this.blog.author_id,\n            create_time: createTime,\n            auth_name: temp.name // 假设 temp 中有博客作者的姓名\n          });\n\n          this.cancelBlog();\n          this.refreshBlogs(); // 调用刷新博客列表的方法\n        });\n      });\n    },\n\n    refreshBlogs() {\n      api.getArticle().then(response => {\n        this.blogs = response.data;\n        console.log(response.data);\n      });\n    },\n    cancelBlog() {\n      this.showEditor = false;\n      this.blog.title = '';\n      this.blog.content = '';\n    }\n  },\n  mounted() {\n    api.getArticle().then(response => {\n      this.blogs = response.data;\n      console.log('response.data', response.data);\n      this.blogs.forEach(item => {\n        console.log(\"item.id\", item);\n      });\n\n      // 获取 URL 中的锚点，并滚动到对应的博客内容\n      const hash = window.location.hash;\n      if (hash) {\n        const blogId = hash.slice(1); // 去除 '#' 符号\n        this.scrollToBlog(blogId);\n      }\n    });\n  }\n};","map":{"version":3,"names":["api","moment","VueMarkdown","components","data","tableData","showEditor","markdownContent","form","dialogFormVisible","viewDialogVis","blog","id","title","content","author_id","create_time","auth_name","selectedBlog","blogs","methods","handleAdd","handleEdit","row","JSON","parse","stringify","imgAdd","pos","$file","$vm","$refs","md","formData","FormData","append","axios","url","serverHost","method","headers","then","res","$img2Url","formatDateTime","dateTime","format","selectBlog","scrollToBlog","blogId","element","document","getElementById","scrollIntoView","behavior","block","saveBlog","getUserInfo","response","temp","msg","writeArticle","createTime","unshift","name","cancelBlog","refreshBlogs","getArticle","console","log","mounted","forEach","item","hash","window","location","slice"],"sources":["src/pages/Blog.vue"],"sourcesContent":["<template>\n  <div class=\"blog-container\">\n<!--    <aside class=\"sidebar\">-->\n<!--      <ul class=\"blog-titles\">-->\n<!--        <li v-for=\"blog in blogs\" :key=\"blog.id\">-->\n<!--          <a :href=\"'#blog-' + blog.id\" @click=\"selectBlog()\">{{ blog.title }}</a>-->\n<!--        </li>-->\n<!--      </ul>-->\n<!--    </aside>-->\n    <!-- 博客内容撰写 -->\n\n    <el-button type=\"primary\" @click=\"handleAdd\" >写博客<i class=\"el-icon-circle-plus-outline\"></i></el-button>\n\n    <el-table :data=\"blogs\" >\n      <template slot-scope=\"scope\">\n        <el-button type=\"success\" @click=\"handleEdit(scope.row)\" >编辑 <i class=\"el-\n            icon-edit\"></i>\n        </el-button>\n      </template>\n    </el-table>\n\n    <el-dialog title=\"文章信息\" :visible.sync=\"dialogFormVisible\" width=\"60%\" >\n      <el-form label-width=\"80px\" size=\"small\">\n        <el-form-item label=\"文章标题\">\n          <el-input v-model=\"blog.title\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"文章内容\">\n          <mavon-editor ref=\"md\" v-model=\"blog.content\" :ishljs=\"true\" @imgAdd=\"imgAdd\"/>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"saveBlog\">确 定</el-button>\n      </div>\n    </el-dialog>\n\n\n    <!-- 博客内容 -->\n    <div class=\"blog-text\">\n\n    <el-card v-for=\"blog in blogs\" :key=\"blog.id\" class=\"blog-card\" :id=\"'blog-' + blog.id\">\n      <el-row>\n        <div class=\"blog-title\" style=\"font-size: 30px;font-weight: bold;\">{{ blog.title }}</div>\n      </el-row>\n      <el-row>\n        <vue-markdown :source=\"blog.content\" ></vue-markdown>\n      </el-row>\n      <el-row>\n        <div class=\"create_time\">{{ formatDateTime(blog.create_time) }}</div>\n        <div class=\"auth_name\" style=\"color: #475669\"><span style=\"color: gray\">from:</span>{{ blog.auth_name }}</div>\n      </el-row>\n    </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from \"@/api/api\";\nimport moment from 'moment';\nimport VueMarkdown from 'vue-markdown'; // 引入 vue-markdown\n\nexport default {\n  components:{\n    // VueMarkdown,\n    VueMarkdown, // 注册 vue-markdown 组件\n\n\n  },\n\n\n  data() {\n    return {\n      tableData: [],\n\n      showEditor: false,\n      markdownContent: `\n        # 标题\n\n        这是一段 **加粗** 文本，还有 *斜体*。\n\n        ## 列表\n\n        - 列表项1\n        - 列表项2\n        - 列表项3\n\n        ## 代码块\n\n        \\`\\`\\`javascript\n        function helloWorld() {\n          console.log('Hello, World!');\n        }\n        \\`\\`\\`\n      `,\n\n      form:{},\n      dialogFormVisible:false,\n      viewDialogVis:false,\n\n      blog: {\n        id: '',\n        title: '',\n        content: '',\n        author_id: '',\n        create_time: '',\n        auth_name: ''\n      },\n      selectedBlog:'',\n      blogs: []\n    };\n  },\n  methods: {\n\n    handleAdd() {\n      this.dialogFormVisible = true\n      this.form = {}\n    },\n    handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row))\n      this.dialogFormVisible = true\n    },\n// 绑定@imgAdd event\n    imgAdd(pos, $file) {\n      let $vm = this.$refs.md\n      // 第一步.将图片上传到服务器.\n      const formData = new FormData();\n      formData.append('file', $file);\n      axios({\n        url: `http://${serverHost}/file/upload`,\n        method: 'post',\n        data: formData,\n        headers: {'Content-Type': 'multipart/form-data'},\n      }).then((res) => {\n        // 第二步.将返回的url替换到文本原位置![...](./0) -> ![...](url)\n        /**\n         * $vm 指为mavonEditor实例，可以通过如下两种方式获取\n         * 1. 通过引入对象获取: `import {mavonEditor} from ...` 等方式引入后，\n         * `$vm`为`mavonEditor`\n         * 2. 通过$refs获取: html声明ref : `<mavon-editor ref=md ></mavon-editor>，\n         * `$vm`为 `this.$refs.md`\n         */\n        $vm.$img2Url(pos, res.data);\n      })\n    },\n\n\n\n    formatDateTime(dateTime) {\n      return moment(dateTime).format('YYYY-MM-DD HH:mm');\n    },\n\n\n    selectBlog(blog) {\n      this.selectedBlog = blog;\n      this.scrollToBlog(blog.id);\n    },\n\n    scrollToBlog(blogId) {\n      const element = document.getElementById('blog-' + blogId);\n      if (element) {\n        element.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start',\n        });\n      }\n    },\n    saveBlog() {\n      api.getUserInfo().then((response) => {\n        const temp = JSON.parse(response.data.msg)\n        this.blog.author_id = temp.id\n\n        api.writeArticle(this.blog)\n          .then(response => {\n            const createTime = response.data.data.create_time;\n\n            // 更新 blogs 数组，将新发表的博客添加到数组开头\n            this.blogs.unshift({\n              id: response.data.data.id,\n              title: this.blog.title,\n              content: this.blog.content, // 可能需要将 this.blog.content 转换为 Markdown 格式\n              author_id: this.blog.author_id,\n              create_time: createTime,\n              auth_name: temp.name, // 假设 temp 中有博客作者的姓名\n            });\n\n            this.cancelBlog();\n            this.refreshBlogs(); // 调用刷新博客列表的方法\n          })\n      })\n    },\n    refreshBlogs() {\n      api.getArticle().then((response) => {\n        this.blogs = response.data;\n        console.log(response.data)\n      });\n    },\n    cancelBlog() {\n      this.showEditor = false;\n      this.blog.title = '';\n      this.blog.content = '';\n    }\n  },\n\n  mounted() {\n    api.getArticle().then((response) => {\n      this.blogs = response.data;\n      console.log('response.data',response.data)\n      this.blogs.forEach(item=>{\n        console.log(\"item.id\",item)\n\n      })\n\n      // 获取 URL 中的锚点，并滚动到对应的博客内容\n      const hash = window.location.hash;\n      if (hash) {\n        const blogId = hash.slice(1); // 去除 '#' 符号\n        this.scrollToBlog(blogId);\n      }\n    });\n  }\n};\n\n</script>\n\n<style >\n\n.blog-container {\n  gap: 20px;\n  width: calc(100% - 50px);\n\n  margin: 0 auto;\n}\n@media (max-width: 768px) {\n\n  .headImgBox img{\n    width: 100%;\n    height: 100px;\n  }\n  .blog-container {\n    gap: 20px;\n    width: 100%;\n\n    margin: 0 auto;\n  }\n\n\n}\n\n.editor-actions {\n  margin-top: 10px;\n}\n\n.blog-write {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n  perspective: 200px;\n  transition: 1s all ease-in;\n\n}\n.blog-write .el-card:hover{\n  width: calc(100%)\n\n}\n.blog-write button {\n  background: linear-gradient(200deg,#44986e,#326cc0);\n  width: 80px;\n  height: 50px;\n  transition: 0.3s;\n  border:none;\n  border-radius:3px;\n  cursor:pointer;\n\n}\n.blog-write button:hover{\n  transform:rotateY(25deg);\n  width: 100px;\n  height: 70px;\n  box-shadow: -15px 0 25px rgba(120,175,229,0.56);\n}\n.title {\n  font-size: 80px;\n  font-weight: 600;\n}\n\n.custom-input {\n  /* 添加自定义样式 */\n  /* 示例：修改输入框的边框颜色和字体颜色 */\n  border-radius: 20%;\n\n  color: blue;\n}\n\n\n.custom-editor {\n  font-size: 30px;\n  color: blue;\n\n}\n\n.editor-actions {\n  display: flex;\n  justify-content: center;\n}\n.blog-text{\n  border-radius: 2%;\n  transition: 3s all ease-in;\n}\n.blog-text :hover{\n\n}\n\n\n.blog-card {\n  text-align: left;\n  margin-top: 20px;\n  transition: 0.5s all ease-in;\n}\n.blog-card:hover{\n  /*box-shadow: 0 0 10px rgba(0, 0, 0, 0.9);*/\n  box-shadow:\n      0 2px 2px rgba(0, 0, 0, 0.2),\n      0 4px 4px rgba(0, 0, 0, 0.2),\n      0 8px 8px rgba(0, 0, 0, 0.2),\n      0 16px 16px rgba(0, 0, 0, 0.2);\n\n}\n\n/*.blog-text {*/\n/*  background-color: green;*/\n/*  border-radius: 2%;*/\n/*  margin-top: 20px;*/\n/*  text-align: left;*/\n/*  transition: 0.5s all ease-in;*/\n/*  box-shadow:*/\n/*    0 2px 2px rgba(0, 0, 0, 0.1),*/\n/*    0 4px 4px rgba(0, 0, 0, 0.1),*/\n/*    0 8px 8px rgba(0, 0, 0, 0.1),*/\n/*    0 16px 16px rgba(0, 0, 0, 0.1);*/\n/*}*/\n\n/*.blog-text:hover {*/\n/*  box-shadow:*/\n/*    0 2px 4px rgba(0, 0, 0, 0.2),*/\n/*    0 4px 8px rgba(0, 0, 0, 0.2),*/\n/*    0 8px 16px rgba(0, 0, 0, 0.2),*/\n/*    0 16px 32px rgba(0, 0, 0, 0.2);*/\n/*}*/\n\n.auth_name,\n.create_time {\n  text-align: right;\n}\n\n/* 博客侧边栏 */\n.sidebar {\n  width: 200px;\n  background-color: #f0f0f0;\n  padding: 20px;\n  border-radius: 5px;\n  position: fixed;\n  left: 20px;\n  top: 70px;\n\n}\n\n\n.blog-titles {\n  list-style-type: none;\n  padding: 0;\n}\n\n.blog-titles li {\n  margin-bottom: 10px;\n  cursor: pointer;\n}\n\n.blog-titles li:hover {\n  text-decoration: underline;\n}\n\n\n/*markdown解析样式*/\n.markdown-container {\n  max-width: 800px;\n  margin: 0 auto;\n  font-family: Arial, sans-serif;\n  line-height: 3.0;\n\n}\n\nh1 {\n  font-size: 28px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\nh2 {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n}\n\np {\n  margin-bottom: 16px;\n}\n\nstrong {\n  font-weight: bold;\n}\n\nem {\n  font-style: italic;\n}\n\nul, ol {\n  margin-left: 30px;\n}\n\npre {\n  background-color: #f0f0f0;\n  padding: 10px;\n  border-radius: 4px;\n  margin-bottom: 16px;\n}\n\ncode {\n  font-family: Consolas, monospace;\n}\n\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.unshift.js\");\n/* eslint no-console:0 */\n/**\n * This file does the main work of building a domTree structure from a parse\n * tree. The entry point is the `buildHTML` function, which takes a parse tree.\n * Then, the buildExpression, buildGroup, and various groupTypes functions are\n * called, to produce a final HTML tree.\n */\n\nvar ParseError = require(\"./ParseError\");\nvar Style = require(\"./Style\");\nvar buildCommon = require(\"./buildCommon\");\nvar delimiter = require(\"./delimiter\");\nvar domTree = require(\"./domTree\");\nvar fontMetrics = require(\"./fontMetrics\");\nvar utils = require(\"./utils\");\nvar makeSpan = buildCommon.makeSpan;\n\n/**\n * Take a list of nodes, build them in order, and return a list of the built\n * nodes. This function handles the `prev` node correctly, and passes the\n * previous element from the list as the prev of the next element.\n */\nvar buildExpression = function (expression, options, prev) {\n  var groups = [];\n  for (var i = 0; i < expression.length; i++) {\n    var group = expression[i];\n    groups.push(buildGroup(group, options, prev));\n    prev = group;\n  }\n  return groups;\n};\n\n// List of types used by getTypeOfGroup,\n// see https://github.com/Khan/KaTeX/wiki/Examining-TeX#group-types\nvar groupToType = {\n  mathord: \"mord\",\n  textord: \"mord\",\n  bin: \"mbin\",\n  rel: \"mrel\",\n  text: \"mord\",\n  open: \"mopen\",\n  close: \"mclose\",\n  inner: \"minner\",\n  genfrac: \"mord\",\n  array: \"mord\",\n  spacing: \"mord\",\n  punct: \"mpunct\",\n  ordgroup: \"mord\",\n  op: \"mop\",\n  katex: \"mord\",\n  overline: \"mord\",\n  underline: \"mord\",\n  rule: \"mord\",\n  leftright: \"minner\",\n  sqrt: \"mord\",\n  accent: \"mord\"\n};\n\n/**\n * Gets the final math type of an expression, given its group type. This type is\n * used to determine spacing between elements, and affects bin elements by\n * causing them to change depending on what types are around them. This type\n * must be attached to the outermost node of an element as a CSS class so that\n * spacing with its surrounding elements works correctly.\n *\n * Some elements can be mapped one-to-one from group type to math type, and\n * those are listed in the `groupToType` table.\n *\n * Others (usually elements that wrap around other elements) often have\n * recursive definitions, and thus call `getTypeOfGroup` on their inner\n * elements.\n */\nvar getTypeOfGroup = function (group) {\n  if (group == null) {\n    // Like when typesetting $^3$\n    return groupToType.mathord;\n  } else if (group.type === \"supsub\") {\n    return getTypeOfGroup(group.value.base);\n  } else if (group.type === \"llap\" || group.type === \"rlap\") {\n    return getTypeOfGroup(group.value);\n  } else if (group.type === \"color\") {\n    return getTypeOfGroup(group.value.value);\n  } else if (group.type === \"sizing\") {\n    return getTypeOfGroup(group.value.value);\n  } else if (group.type === \"styling\") {\n    return getTypeOfGroup(group.value.value);\n  } else if (group.type === \"delimsizing\") {\n    return groupToType[group.value.delimType];\n  } else {\n    return groupToType[group.type];\n  }\n};\n\n/**\n * Sometimes, groups perform special rules when they have superscripts or\n * subscripts attached to them. This function lets the `supsub` group know that\n * its inner element should handle the superscripts and subscripts instead of\n * handling them itself.\n */\nvar shouldHandleSupSub = function (group, options) {\n  if (!group) {\n    return false;\n  } else if (group.type === \"op\") {\n    // Operators handle supsubs differently when they have limits\n    // (e.g. `\\displaystyle\\sum_2^3`)\n    return group.value.limits && (options.style.size === Style.DISPLAY.size || group.value.alwaysHandleSupSub);\n  } else if (group.type === \"accent\") {\n    return isCharacterBox(group.value.base);\n  } else {\n    return null;\n  }\n};\n\n/**\n * Sometimes we want to pull out the innermost element of a group. In most\n * cases, this will just be the group itself, but when ordgroups and colors have\n * a single element, we want to pull that out.\n */\nvar getBaseElem = function (group) {\n  if (!group) {\n    return false;\n  } else if (group.type === \"ordgroup\") {\n    if (group.value.length === 1) {\n      return getBaseElem(group.value[0]);\n    } else {\n      return group;\n    }\n  } else if (group.type === \"color\") {\n    if (group.value.value.length === 1) {\n      return getBaseElem(group.value.value[0]);\n    } else {\n      return group;\n    }\n  } else {\n    return group;\n  }\n};\n\n/**\n * TeXbook algorithms often reference \"character boxes\", which are simply groups\n * with a single character in them. To decide if something is a character box,\n * we find its innermost group, and see if it is a single character.\n */\nvar isCharacterBox = function (group) {\n  var baseElem = getBaseElem(group);\n\n  // These are all they types of groups which hold single characters\n  return baseElem.type === \"mathord\" || baseElem.type === \"textord\" || baseElem.type === \"bin\" || baseElem.type === \"rel\" || baseElem.type === \"inner\" || baseElem.type === \"open\" || baseElem.type === \"close\" || baseElem.type === \"punct\";\n};\nvar makeNullDelimiter = function (options) {\n  return makeSpan([\"sizing\", \"reset-\" + options.size, \"size5\", options.style.reset(), Style.TEXT.cls(), \"nulldelimiter\"]);\n};\n\n/**\n * This is a map of group types to the function used to handle that type.\n * Simpler types come at the beginning, while complicated types come afterwards.\n */\nvar groupTypes = {};\ngroupTypes.mathord = function (group, options, prev) {\n  return buildCommon.makeOrd(group, options, \"mathord\");\n};\ngroupTypes.textord = function (group, options, prev) {\n  return buildCommon.makeOrd(group, options, \"textord\");\n};\ngroupTypes.bin = function (group, options, prev) {\n  var className = \"mbin\";\n  // Pull out the most recent element. Do some special handling to find\n  // things at the end of a \\color group. Note that we don't use the same\n  // logic for ordgroups (which count as ords).\n  var prevAtom = prev;\n  while (prevAtom && prevAtom.type === \"color\") {\n    var atoms = prevAtom.value.value;\n    prevAtom = atoms[atoms.length - 1];\n  }\n  // See TeXbook pg. 442-446, Rules 5 and 6, and the text before Rule 19.\n  // Here, we determine whether the bin should turn into an ord. We\n  // currently only apply Rule 5.\n  if (!prev || utils.contains([\"mbin\", \"mopen\", \"mrel\", \"mop\", \"mpunct\"], getTypeOfGroup(prevAtom))) {\n    group.type = \"textord\";\n    className = \"mord\";\n  }\n  return buildCommon.mathsym(group.value, group.mode, options.getColor(), [className]);\n};\ngroupTypes.rel = function (group, options, prev) {\n  return buildCommon.mathsym(group.value, group.mode, options.getColor(), [\"mrel\"]);\n};\ngroupTypes.open = function (group, options, prev) {\n  return buildCommon.mathsym(group.value, group.mode, options.getColor(), [\"mopen\"]);\n};\ngroupTypes.close = function (group, options, prev) {\n  return buildCommon.mathsym(group.value, group.mode, options.getColor(), [\"mclose\"]);\n};\ngroupTypes.inner = function (group, options, prev) {\n  return buildCommon.mathsym(group.value, group.mode, options.getColor(), [\"minner\"]);\n};\ngroupTypes.punct = function (group, options, prev) {\n  return buildCommon.mathsym(group.value, group.mode, options.getColor(), [\"mpunct\"]);\n};\ngroupTypes.ordgroup = function (group, options, prev) {\n  return makeSpan([\"mord\", options.style.cls()], buildExpression(group.value, options.reset()));\n};\ngroupTypes.text = function (group, options, prev) {\n  return makeSpan([\"text\", \"mord\", options.style.cls()], buildExpression(group.value.body, options.reset()));\n};\ngroupTypes.color = function (group, options, prev) {\n  var elements = buildExpression(group.value.value, options.withColor(group.value.color), prev);\n\n  // \\color isn't supposed to affect the type of the elements it contains.\n  // To accomplish this, we wrap the results in a fragment, so the inner\n  // elements will be able to directly interact with their neighbors. For\n  // example, `\\color{red}{2 +} 3` has the same spacing as `2 + 3`\n  return new buildCommon.makeFragment(elements);\n};\ngroupTypes.supsub = function (group, options, prev) {\n  // Superscript and subscripts are handled in the TeXbook on page\n  // 445-446, rules 18(a-f).\n\n  // Here is where we defer to the inner group if it should handle\n  // superscripts and subscripts itself.\n  if (shouldHandleSupSub(group.value.base, options)) {\n    return groupTypes[group.value.base.type](group, options, prev);\n  }\n  var base = buildGroup(group.value.base, options.reset());\n  var supmid;\n  var submid;\n  var sup;\n  var sub;\n  if (group.value.sup) {\n    sup = buildGroup(group.value.sup, options.withStyle(options.style.sup()));\n    supmid = makeSpan([options.style.reset(), options.style.sup().cls()], [sup]);\n  }\n  if (group.value.sub) {\n    sub = buildGroup(group.value.sub, options.withStyle(options.style.sub()));\n    submid = makeSpan([options.style.reset(), options.style.sub().cls()], [sub]);\n  }\n\n  // Rule 18a\n  var supShift;\n  var subShift;\n  if (isCharacterBox(group.value.base)) {\n    supShift = 0;\n    subShift = 0;\n  } else {\n    supShift = base.height - fontMetrics.metrics.supDrop;\n    subShift = base.depth + fontMetrics.metrics.subDrop;\n  }\n\n  // Rule 18c\n  var minSupShift;\n  if (options.style === Style.DISPLAY) {\n    minSupShift = fontMetrics.metrics.sup1;\n  } else if (options.style.cramped) {\n    minSupShift = fontMetrics.metrics.sup3;\n  } else {\n    minSupShift = fontMetrics.metrics.sup2;\n  }\n\n  // scriptspace is a font-size-independent size, so scale it\n  // appropriately\n  var multiplier = Style.TEXT.sizeMultiplier * options.style.sizeMultiplier;\n  var scriptspace = 0.5 / fontMetrics.metrics.ptPerEm / multiplier + \"em\";\n  var supsub;\n  if (!group.value.sup) {\n    // Rule 18b\n    subShift = Math.max(subShift, fontMetrics.metrics.sub1, sub.height - 0.8 * fontMetrics.metrics.xHeight);\n    supsub = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: submid\n    }], \"shift\", subShift, options);\n    supsub.children[0].style.marginRight = scriptspace;\n\n    // Subscripts shouldn't be shifted by the base's italic correction.\n    // Account for that by shifting the subscript back the appropriate\n    // amount. Note we only do this when the base is a single symbol.\n    if (base instanceof domTree.symbolNode) {\n      supsub.children[0].style.marginLeft = -base.italic + \"em\";\n    }\n  } else if (!group.value.sub) {\n    // Rule 18c, d\n    supShift = Math.max(supShift, minSupShift, sup.depth + 0.25 * fontMetrics.metrics.xHeight);\n    supsub = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: supmid\n    }], \"shift\", -supShift, options);\n    supsub.children[0].style.marginRight = scriptspace;\n  } else {\n    supShift = Math.max(supShift, minSupShift, sup.depth + 0.25 * fontMetrics.metrics.xHeight);\n    subShift = Math.max(subShift, fontMetrics.metrics.sub2);\n    var ruleWidth = fontMetrics.metrics.defaultRuleThickness;\n\n    // Rule 18e\n    if (supShift - sup.depth - (sub.height - subShift) < 4 * ruleWidth) {\n      subShift = 4 * ruleWidth - (supShift - sup.depth) + sub.height;\n      var psi = 0.8 * fontMetrics.metrics.xHeight - (supShift - sup.depth);\n      if (psi > 0) {\n        supShift += psi;\n        subShift -= psi;\n      }\n    }\n    supsub = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: submid,\n      shift: subShift\n    }, {\n      type: \"elem\",\n      elem: supmid,\n      shift: -supShift\n    }], \"individualShift\", null, options);\n\n    // See comment above about subscripts not being shifted\n    if (base instanceof domTree.symbolNode) {\n      supsub.children[0].style.marginLeft = -base.italic + \"em\";\n    }\n    supsub.children[0].style.marginRight = scriptspace;\n    supsub.children[1].style.marginRight = scriptspace;\n  }\n  return makeSpan([getTypeOfGroup(group.value.base)], [base, supsub]);\n};\ngroupTypes.genfrac = function (group, options, prev) {\n  // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).\n  // Figure out what style this fraction should be in based on the\n  // function used\n  var fstyle = options.style;\n  if (group.value.size === \"display\") {\n    fstyle = Style.DISPLAY;\n  } else if (group.value.size === \"text\") {\n    fstyle = Style.TEXT;\n  }\n  var nstyle = fstyle.fracNum();\n  var dstyle = fstyle.fracDen();\n  var numer = buildGroup(group.value.numer, options.withStyle(nstyle));\n  var numerreset = makeSpan([fstyle.reset(), nstyle.cls()], [numer]);\n  var denom = buildGroup(group.value.denom, options.withStyle(dstyle));\n  var denomreset = makeSpan([fstyle.reset(), dstyle.cls()], [denom]);\n  var ruleWidth;\n  if (group.value.hasBarLine) {\n    ruleWidth = fontMetrics.metrics.defaultRuleThickness / options.style.sizeMultiplier;\n  } else {\n    ruleWidth = 0;\n  }\n\n  // Rule 15b\n  var numShift;\n  var clearance;\n  var denomShift;\n  if (fstyle.size === Style.DISPLAY.size) {\n    numShift = fontMetrics.metrics.num1;\n    if (ruleWidth > 0) {\n      clearance = 3 * ruleWidth;\n    } else {\n      clearance = 7 * fontMetrics.metrics.defaultRuleThickness;\n    }\n    denomShift = fontMetrics.metrics.denom1;\n  } else {\n    if (ruleWidth > 0) {\n      numShift = fontMetrics.metrics.num2;\n      clearance = ruleWidth;\n    } else {\n      numShift = fontMetrics.metrics.num3;\n      clearance = 3 * fontMetrics.metrics.defaultRuleThickness;\n    }\n    denomShift = fontMetrics.metrics.denom2;\n  }\n  var frac;\n  if (ruleWidth === 0) {\n    // Rule 15c\n    var candiateClearance = numShift - numer.depth - (denom.height - denomShift);\n    if (candiateClearance < clearance) {\n      numShift += 0.5 * (clearance - candiateClearance);\n      denomShift += 0.5 * (clearance - candiateClearance);\n    }\n    frac = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: denomreset,\n      shift: denomShift\n    }, {\n      type: \"elem\",\n      elem: numerreset,\n      shift: -numShift\n    }], \"individualShift\", null, options);\n  } else {\n    // Rule 15d\n    var axisHeight = fontMetrics.metrics.axisHeight;\n    if (numShift - numer.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {\n      numShift += clearance - (numShift - numer.depth - (axisHeight + 0.5 * ruleWidth));\n    }\n    if (axisHeight - 0.5 * ruleWidth - (denom.height - denomShift) < clearance) {\n      denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denom.height - denomShift));\n    }\n    var mid = makeSpan([options.style.reset(), Style.TEXT.cls(), \"frac-line\"]);\n    // Manually set the height of the line because its height is\n    // created in CSS\n    mid.height = ruleWidth;\n    var midShift = -(axisHeight - 0.5 * ruleWidth);\n    frac = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: denomreset,\n      shift: denomShift\n    }, {\n      type: \"elem\",\n      elem: mid,\n      shift: midShift\n    }, {\n      type: \"elem\",\n      elem: numerreset,\n      shift: -numShift\n    }], \"individualShift\", null, options);\n  }\n\n  // Since we manually change the style sometimes (with \\dfrac or \\tfrac),\n  // account for the possible size change here.\n  frac.height *= fstyle.sizeMultiplier / options.style.sizeMultiplier;\n  frac.depth *= fstyle.sizeMultiplier / options.style.sizeMultiplier;\n\n  // Rule 15e\n  var delimSize;\n  if (fstyle.size === Style.DISPLAY.size) {\n    delimSize = fontMetrics.metrics.delim1;\n  } else {\n    delimSize = fontMetrics.metrics.getDelim2(fstyle);\n  }\n  var leftDelim;\n  var rightDelim;\n  if (group.value.leftDelim == null) {\n    leftDelim = makeNullDelimiter(options);\n  } else {\n    leftDelim = delimiter.customSizedDelim(group.value.leftDelim, delimSize, true, options.withStyle(fstyle), group.mode);\n  }\n  if (group.value.rightDelim == null) {\n    rightDelim = makeNullDelimiter(options);\n  } else {\n    rightDelim = delimiter.customSizedDelim(group.value.rightDelim, delimSize, true, options.withStyle(fstyle), group.mode);\n  }\n  return makeSpan([\"mord\", options.style.reset(), fstyle.cls()], [leftDelim, makeSpan([\"mfrac\"], [frac]), rightDelim], options.getColor());\n};\ngroupTypes.array = function (group, options, prev) {\n  var r;\n  var c;\n  var nr = group.value.body.length;\n  var nc = 0;\n  var body = new Array(nr);\n\n  // Horizontal spacing\n  var pt = 1 / fontMetrics.metrics.ptPerEm;\n  var arraycolsep = 5 * pt; // \\arraycolsep in article.cls\n\n  // Vertical spacing\n  var baselineskip = 12 * pt; // see size10.clo\n  // Default \\arraystretch from lttab.dtx\n  // TODO(gagern): may get redefined once we have user-defined macros\n  var arraystretch = utils.deflt(group.value.arraystretch, 1);\n  var arrayskip = arraystretch * baselineskip;\n  var arstrutHeight = 0.7 * arrayskip; // \\strutbox in ltfsstrc.dtx and\n  var arstrutDepth = 0.3 * arrayskip; // \\@arstrutbox in lttab.dtx\n\n  var totalHeight = 0;\n  for (r = 0; r < group.value.body.length; ++r) {\n    var inrow = group.value.body[r];\n    var height = arstrutHeight; // \\@array adds an \\@arstrut\n    var depth = arstrutDepth; // to each tow (via the template)\n\n    if (nc < inrow.length) {\n      nc = inrow.length;\n    }\n    var outrow = new Array(inrow.length);\n    for (c = 0; c < inrow.length; ++c) {\n      var elt = buildGroup(inrow[c], options);\n      if (depth < elt.depth) {\n        depth = elt.depth;\n      }\n      if (height < elt.height) {\n        height = elt.height;\n      }\n      outrow[c] = elt;\n    }\n    var gap = 0;\n    if (group.value.rowGaps[r]) {\n      gap = group.value.rowGaps[r].value;\n      switch (gap.unit) {\n        case \"em\":\n          gap = gap.number;\n          break;\n        case \"ex\":\n          gap = gap.number * fontMetrics.metrics.emPerEx;\n          break;\n        default:\n          console.error(\"Can't handle unit \" + gap.unit);\n          gap = 0;\n      }\n      if (gap > 0) {\n        // \\@argarraycr\n        gap += arstrutDepth;\n        if (depth < gap) {\n          depth = gap; // \\@xargarraycr\n        }\n\n        gap = 0;\n      }\n    }\n    outrow.height = height;\n    outrow.depth = depth;\n    totalHeight += height;\n    outrow.pos = totalHeight;\n    totalHeight += depth + gap; // \\@yargarraycr\n    body[r] = outrow;\n  }\n  var offset = totalHeight / 2 + fontMetrics.metrics.axisHeight;\n  var colDescriptions = group.value.cols || [];\n  var cols = [];\n  var colSep;\n  var colDescrNum;\n  for (c = 0, colDescrNum = 0;\n  // Continue while either there are more columns or more column\n  // descriptions, so trailing separators don't get lost.\n  c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {\n    var colDescr = colDescriptions[colDescrNum] || {};\n    var firstSeparator = true;\n    while (colDescr.type === \"separator\") {\n      // If there is more than one separator in a row, add a space\n      // between them.\n      if (!firstSeparator) {\n        colSep = makeSpan([\"arraycolsep\"], []);\n        colSep.style.width = fontMetrics.metrics.doubleRuleSep + \"em\";\n        cols.push(colSep);\n      }\n      if (colDescr.separator === \"|\") {\n        var separator = makeSpan([\"vertical-separator\"], []);\n        separator.style.height = totalHeight + \"em\";\n        separator.style.verticalAlign = -(totalHeight - offset) + \"em\";\n        cols.push(separator);\n      } else {\n        throw new ParseError(\"Invalid separator type: \" + colDescr.separator);\n      }\n      colDescrNum++;\n      colDescr = colDescriptions[colDescrNum] || {};\n      firstSeparator = false;\n    }\n    if (c >= nc) {\n      continue;\n    }\n    var sepwidth;\n    if (c > 0 || group.value.hskipBeforeAndAfter) {\n      sepwidth = utils.deflt(colDescr.pregap, arraycolsep);\n      if (sepwidth !== 0) {\n        colSep = makeSpan([\"arraycolsep\"], []);\n        colSep.style.width = sepwidth + \"em\";\n        cols.push(colSep);\n      }\n    }\n    var col = [];\n    for (r = 0; r < nr; ++r) {\n      var row = body[r];\n      var elem = row[c];\n      if (!elem) {\n        continue;\n      }\n      var shift = row.pos - offset;\n      elem.depth = row.depth;\n      elem.height = row.height;\n      col.push({\n        type: \"elem\",\n        elem: elem,\n        shift: shift\n      });\n    }\n    col = buildCommon.makeVList(col, \"individualShift\", null, options);\n    col = makeSpan([\"col-align-\" + (colDescr.align || \"c\")], [col]);\n    cols.push(col);\n    if (c < nc - 1 || group.value.hskipBeforeAndAfter) {\n      sepwidth = utils.deflt(colDescr.postgap, arraycolsep);\n      if (sepwidth !== 0) {\n        colSep = makeSpan([\"arraycolsep\"], []);\n        colSep.style.width = sepwidth + \"em\";\n        cols.push(colSep);\n      }\n    }\n  }\n  body = makeSpan([\"mtable\"], cols);\n  return makeSpan([\"mord\"], [body], options.getColor());\n};\ngroupTypes.spacing = function (group, options, prev) {\n  if (group.value === \"\\\\ \" || group.value === \"\\\\space\" || group.value === \" \" || group.value === \"~\") {\n    // Spaces are generated by adding an actual space. Each of these\n    // things has an entry in the symbols table, so these will be turned\n    // into appropriate outputs.\n    return makeSpan([\"mord\", \"mspace\"], [buildCommon.mathsym(group.value, group.mode)]);\n  } else {\n    // Other kinds of spaces are of arbitrary width. We use CSS to\n    // generate these.\n    return makeSpan([\"mord\", \"mspace\", buildCommon.spacingFunctions[group.value].className]);\n  }\n};\ngroupTypes.llap = function (group, options, prev) {\n  var inner = makeSpan([\"inner\"], [buildGroup(group.value.body, options.reset())]);\n  var fix = makeSpan([\"fix\"], []);\n  return makeSpan([\"llap\", options.style.cls()], [inner, fix]);\n};\ngroupTypes.rlap = function (group, options, prev) {\n  var inner = makeSpan([\"inner\"], [buildGroup(group.value.body, options.reset())]);\n  var fix = makeSpan([\"fix\"], []);\n  return makeSpan([\"rlap\", options.style.cls()], [inner, fix]);\n};\ngroupTypes.op = function (group, options, prev) {\n  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).\n  var supGroup;\n  var subGroup;\n  var hasLimits = false;\n  if (group.type === \"supsub\") {\n    // If we have limits, supsub will pass us its group to handle. Pull\n    // out the superscript and subscript and set the group to the op in\n    // its base.\n    supGroup = group.value.sup;\n    subGroup = group.value.sub;\n    group = group.value.base;\n    hasLimits = true;\n  }\n\n  // Most operators have a large successor symbol, but these don't.\n  var noSuccessor = [\"\\\\smallint\"];\n  var large = false;\n  if (options.style.size === Style.DISPLAY.size && group.value.symbol && !utils.contains(noSuccessor, group.value.body)) {\n    // Most symbol operators get larger in displaystyle (rule 13)\n    large = true;\n  }\n  var base;\n  var baseShift = 0;\n  var slant = 0;\n  if (group.value.symbol) {\n    // If this is a symbol, create the symbol.\n    var style = large ? \"Size2-Regular\" : \"Size1-Regular\";\n    base = buildCommon.makeSymbol(group.value.body, style, \"math\", options.getColor(), [\"op-symbol\", large ? \"large-op\" : \"small-op\", \"mop\"]);\n\n    // Shift the symbol so its center lies on the axis (rule 13). It\n    // appears that our fonts have the centers of the symbols already\n    // almost on the axis, so these numbers are very small. Note we\n    // don't actually apply this here, but instead it is used either in\n    // the vlist creation or separately when there are no limits.\n    baseShift = (base.height - base.depth) / 2 - fontMetrics.metrics.axisHeight * options.style.sizeMultiplier;\n\n    // The slant of the symbol is just its italic correction.\n    slant = base.italic;\n  } else {\n    // Otherwise, this is a text operator. Build the text from the\n    // operator's name.\n    // TODO(emily): Add a space in the middle of some of these\n    // operators, like \\limsup\n    var output = [];\n    for (var i = 1; i < group.value.body.length; i++) {\n      output.push(buildCommon.mathsym(group.value.body[i], group.mode));\n    }\n    base = makeSpan([\"mop\"], output, options.getColor());\n  }\n  if (hasLimits) {\n    // IE 8 clips \\int if it is in a display: inline-block. We wrap it\n    // in a new span so it is an inline, and works.\n    base = makeSpan([], [base]);\n    var supmid;\n    var supKern;\n    var submid;\n    var subKern;\n    // We manually have to handle the superscripts and subscripts. This,\n    // aside from the kern calculations, is copied from supsub.\n    if (supGroup) {\n      var sup = buildGroup(supGroup, options.withStyle(options.style.sup()));\n      supmid = makeSpan([options.style.reset(), options.style.sup().cls()], [sup]);\n      supKern = Math.max(fontMetrics.metrics.bigOpSpacing1, fontMetrics.metrics.bigOpSpacing3 - sup.depth);\n    }\n    if (subGroup) {\n      var sub = buildGroup(subGroup, options.withStyle(options.style.sub()));\n      submid = makeSpan([options.style.reset(), options.style.sub().cls()], [sub]);\n      subKern = Math.max(fontMetrics.metrics.bigOpSpacing2, fontMetrics.metrics.bigOpSpacing4 - sub.height);\n    }\n\n    // Build the final group as a vlist of the possible subscript, base,\n    // and possible superscript.\n    var finalGroup;\n    var top;\n    var bottom;\n    if (!supGroup) {\n      top = base.height - baseShift;\n      finalGroup = buildCommon.makeVList([{\n        type: \"kern\",\n        size: fontMetrics.metrics.bigOpSpacing5\n      }, {\n        type: \"elem\",\n        elem: submid\n      }, {\n        type: \"kern\",\n        size: subKern\n      }, {\n        type: \"elem\",\n        elem: base\n      }], \"top\", top, options);\n\n      // Here, we shift the limits by the slant of the symbol. Note\n      // that we are supposed to shift the limits by 1/2 of the slant,\n      // but since we are centering the limits adding a full slant of\n      // margin will shift by 1/2 that.\n      finalGroup.children[0].style.marginLeft = -slant + \"em\";\n    } else if (!subGroup) {\n      bottom = base.depth + baseShift;\n      finalGroup = buildCommon.makeVList([{\n        type: \"elem\",\n        elem: base\n      }, {\n        type: \"kern\",\n        size: supKern\n      }, {\n        type: \"elem\",\n        elem: supmid\n      }, {\n        type: \"kern\",\n        size: fontMetrics.metrics.bigOpSpacing5\n      }], \"bottom\", bottom, options);\n\n      // See comment above about slants\n      finalGroup.children[1].style.marginLeft = slant + \"em\";\n    } else if (!supGroup && !subGroup) {\n      // This case probably shouldn't occur (this would mean the\n      // supsub was sending us a group with no superscript or\n      // subscript) but be safe.\n      return base;\n    } else {\n      bottom = fontMetrics.metrics.bigOpSpacing5 + submid.height + submid.depth + subKern + base.depth + baseShift;\n      finalGroup = buildCommon.makeVList([{\n        type: \"kern\",\n        size: fontMetrics.metrics.bigOpSpacing5\n      }, {\n        type: \"elem\",\n        elem: submid\n      }, {\n        type: \"kern\",\n        size: subKern\n      }, {\n        type: \"elem\",\n        elem: base\n      }, {\n        type: \"kern\",\n        size: supKern\n      }, {\n        type: \"elem\",\n        elem: supmid\n      }, {\n        type: \"kern\",\n        size: fontMetrics.metrics.bigOpSpacing5\n      }], \"bottom\", bottom, options);\n\n      // See comment above about slants\n      finalGroup.children[0].style.marginLeft = -slant + \"em\";\n      finalGroup.children[2].style.marginLeft = slant + \"em\";\n    }\n    return makeSpan([\"mop\", \"op-limits\"], [finalGroup]);\n  } else {\n    if (group.value.symbol) {\n      base.style.top = baseShift + \"em\";\n    }\n    return base;\n  }\n};\ngroupTypes.katex = function (group, options, prev) {\n  // The KaTeX logo. The offsets for the K and a were chosen to look\n  // good, but the offsets for the T, E, and X were taken from the\n  // definition of \\TeX in TeX (see TeXbook pg. 356)\n  var k = makeSpan([\"k\"], [buildCommon.mathsym(\"K\", group.mode)]);\n  var a = makeSpan([\"a\"], [buildCommon.mathsym(\"A\", group.mode)]);\n  a.height = (a.height + 0.2) * 0.75;\n  a.depth = (a.height - 0.2) * 0.75;\n  var t = makeSpan([\"t\"], [buildCommon.mathsym(\"T\", group.mode)]);\n  var e = makeSpan([\"e\"], [buildCommon.mathsym(\"E\", group.mode)]);\n  e.height = e.height - 0.2155;\n  e.depth = e.depth + 0.2155;\n  var x = makeSpan([\"x\"], [buildCommon.mathsym(\"X\", group.mode)]);\n  return makeSpan([\"katex-logo\", \"mord\"], [k, a, t, e, x], options.getColor());\n};\ngroupTypes.overline = function (group, options, prev) {\n  // Overlines are handled in the TeXbook pg 443, Rule 9.\n\n  // Build the inner group in the cramped style.\n  var innerGroup = buildGroup(group.value.body, options.withStyle(options.style.cramp()));\n  var ruleWidth = fontMetrics.metrics.defaultRuleThickness / options.style.sizeMultiplier;\n\n  // Create the line above the body\n  var line = makeSpan([options.style.reset(), Style.TEXT.cls(), \"overline-line\"]);\n  line.height = ruleWidth;\n  line.maxFontSize = 1.0;\n\n  // Generate the vlist, with the appropriate kerns\n  var vlist = buildCommon.makeVList([{\n    type: \"elem\",\n    elem: innerGroup\n  }, {\n    type: \"kern\",\n    size: 3 * ruleWidth\n  }, {\n    type: \"elem\",\n    elem: line\n  }, {\n    type: \"kern\",\n    size: ruleWidth\n  }], \"firstBaseline\", null, options);\n  return makeSpan([\"overline\", \"mord\"], [vlist], options.getColor());\n};\ngroupTypes.underline = function (group, options, prev) {\n  // Underlines are handled in the TeXbook pg 443, Rule 10.\n\n  // Build the inner group.\n  var innerGroup = buildGroup(group.value.body, options);\n  var ruleWidth = fontMetrics.metrics.defaultRuleThickness / options.style.sizeMultiplier;\n\n  // Create the line above the body\n  var line = makeSpan([options.style.reset(), Style.TEXT.cls(), \"underline-line\"]);\n  line.height = ruleWidth;\n  line.maxFontSize = 1.0;\n\n  // Generate the vlist, with the appropriate kerns\n  var vlist = buildCommon.makeVList([{\n    type: \"kern\",\n    size: ruleWidth\n  }, {\n    type: \"elem\",\n    elem: line\n  }, {\n    type: \"kern\",\n    size: 3 * ruleWidth\n  }, {\n    type: \"elem\",\n    elem: innerGroup\n  }], \"top\", innerGroup.height, options);\n  return makeSpan([\"underline\", \"mord\"], [vlist], options.getColor());\n};\ngroupTypes.sqrt = function (group, options, prev) {\n  // Square roots are handled in the TeXbook pg. 443, Rule 11.\n\n  // First, we do the same steps as in overline to build the inner group\n  // and line\n  var inner = buildGroup(group.value.body, options.withStyle(options.style.cramp()));\n  var ruleWidth = fontMetrics.metrics.defaultRuleThickness / options.style.sizeMultiplier;\n  var line = makeSpan([options.style.reset(), Style.TEXT.cls(), \"sqrt-line\"], [], options.getColor());\n  line.height = ruleWidth;\n  line.maxFontSize = 1.0;\n  var phi = ruleWidth;\n  if (options.style.id < Style.TEXT.id) {\n    phi = fontMetrics.metrics.xHeight;\n  }\n\n  // Calculate the clearance between the body and line\n  var lineClearance = ruleWidth + phi / 4;\n  var innerHeight = (inner.height + inner.depth) * options.style.sizeMultiplier;\n  var minDelimiterHeight = innerHeight + lineClearance + ruleWidth;\n\n  // Create a \\surd delimiter of the required minimum size\n  var delim = makeSpan([\"sqrt-sign\"], [delimiter.customSizedDelim(\"\\\\surd\", minDelimiterHeight, false, options, group.mode)], options.getColor());\n  var delimDepth = delim.height + delim.depth - ruleWidth;\n\n  // Adjust the clearance based on the delimiter size\n  if (delimDepth > inner.height + inner.depth + lineClearance) {\n    lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;\n  }\n\n  // Shift the delimiter so that its top lines up with the top of the line\n  var delimShift = -(inner.height + lineClearance + ruleWidth) + delim.height;\n  delim.style.top = delimShift + \"em\";\n  delim.height -= delimShift;\n  delim.depth += delimShift;\n\n  // We add a special case here, because even when `inner` is empty, we\n  // still get a line. So, we use a simple heuristic to decide if we\n  // should omit the body entirely. (note this doesn't work for something\n  // like `\\sqrt{\\rlap{x}}`, but if someone is doing that they deserve for\n  // it not to work.\n  var body;\n  if (inner.height === 0 && inner.depth === 0) {\n    body = makeSpan();\n  } else {\n    body = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: inner\n    }, {\n      type: \"kern\",\n      size: lineClearance\n    }, {\n      type: \"elem\",\n      elem: line\n    }, {\n      type: \"kern\",\n      size: ruleWidth\n    }], \"firstBaseline\", null, options);\n  }\n  if (!group.value.index) {\n    return makeSpan([\"sqrt\", \"mord\"], [delim, body]);\n  } else {\n    // Handle the optional root index\n\n    // The index is always in scriptscript style\n    var root = buildGroup(group.value.index, options.withStyle(Style.SCRIPTSCRIPT));\n    var rootWrap = makeSpan([options.style.reset(), Style.SCRIPTSCRIPT.cls()], [root]);\n\n    // Figure out the height and depth of the inner part\n    var innerRootHeight = Math.max(delim.height, body.height);\n    var innerRootDepth = Math.max(delim.depth, body.depth);\n\n    // The amount the index is shifted by. This is taken from the TeX\n    // source, in the definition of `\\r@@t`.\n    var toShift = 0.6 * (innerRootHeight - innerRootDepth);\n\n    // Build a VList with the superscript shifted up correctly\n    var rootVList = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: rootWrap\n    }], \"shift\", -toShift, options);\n    // Add a class surrounding it so we can add on the appropriate\n    // kerning\n    var rootVListWrap = makeSpan([\"root\"], [rootVList]);\n    return makeSpan([\"sqrt\", \"mord\"], [rootVListWrap, delim, body]);\n  }\n};\ngroupTypes.sizing = function (group, options, prev) {\n  // Handle sizing operators like \\Huge. Real TeX doesn't actually allow\n  // these functions inside of math expressions, so we do some special\n  // handling.\n  var inner = buildExpression(group.value.value, options.withSize(group.value.size), prev);\n  var span = makeSpan([\"mord\"], [makeSpan([\"sizing\", \"reset-\" + options.size, group.value.size, options.style.cls()], inner)]);\n\n  // Calculate the correct maxFontSize manually\n  var fontSize = buildCommon.sizingMultiplier[group.value.size];\n  span.maxFontSize = fontSize * options.style.sizeMultiplier;\n  return span;\n};\ngroupTypes.styling = function (group, options, prev) {\n  // Style changes are handled in the TeXbook on pg. 442, Rule 3.\n\n  // Figure out what style we're changing to.\n  var style = {\n    \"display\": Style.DISPLAY,\n    \"text\": Style.TEXT,\n    \"script\": Style.SCRIPT,\n    \"scriptscript\": Style.SCRIPTSCRIPT\n  };\n  var newStyle = style[group.value.style];\n\n  // Build the inner expression in the new style.\n  var inner = buildExpression(group.value.value, options.withStyle(newStyle), prev);\n  return makeSpan([options.style.reset(), newStyle.cls()], inner);\n};\ngroupTypes.font = function (group, options, prev) {\n  var font = group.value.font;\n  return buildGroup(group.value.body, options.withFont(font), prev);\n};\ngroupTypes.delimsizing = function (group, options, prev) {\n  var delim = group.value.value;\n  if (delim === \".\") {\n    // Empty delimiters still count as elements, even though they don't\n    // show anything.\n    return makeSpan([groupToType[group.value.delimType]]);\n  }\n\n  // Use delimiter.sizedDelim to generate the delimiter.\n  return makeSpan([groupToType[group.value.delimType]], [delimiter.sizedDelim(delim, group.value.size, options, group.mode)]);\n};\ngroupTypes.leftright = function (group, options, prev) {\n  // Build the inner expression\n  var inner = buildExpression(group.value.body, options.reset());\n  var innerHeight = 0;\n  var innerDepth = 0;\n\n  // Calculate its height and depth\n  for (var i = 0; i < inner.length; i++) {\n    innerHeight = Math.max(inner[i].height, innerHeight);\n    innerDepth = Math.max(inner[i].depth, innerDepth);\n  }\n\n  // The size of delimiters is the same, regardless of what style we are\n  // in. Thus, to correctly calculate the size of delimiter we need around\n  // a group, we scale down the inner size based on the size.\n  innerHeight *= options.style.sizeMultiplier;\n  innerDepth *= options.style.sizeMultiplier;\n  var leftDelim;\n  if (group.value.left === \".\") {\n    // Empty delimiters in \\left and \\right make null delimiter spaces.\n    leftDelim = makeNullDelimiter(options);\n  } else {\n    // Otherwise, use leftRightDelim to generate the correct sized\n    // delimiter.\n    leftDelim = delimiter.leftRightDelim(group.value.left, innerHeight, innerDepth, options, group.mode);\n  }\n  // Add it to the beginning of the expression\n  inner.unshift(leftDelim);\n  var rightDelim;\n  // Same for the right delimiter\n  if (group.value.right === \".\") {\n    rightDelim = makeNullDelimiter(options);\n  } else {\n    rightDelim = delimiter.leftRightDelim(group.value.right, innerHeight, innerDepth, options, group.mode);\n  }\n  // Add it to the end of the expression.\n  inner.push(rightDelim);\n  return makeSpan([\"minner\", options.style.cls()], inner, options.getColor());\n};\ngroupTypes.rule = function (group, options, prev) {\n  // Make an empty span for the rule\n  var rule = makeSpan([\"mord\", \"rule\"], [], options.getColor());\n\n  // Calculate the shift, width, and height of the rule, and account for units\n  var shift = 0;\n  if (group.value.shift) {\n    shift = group.value.shift.number;\n    if (group.value.shift.unit === \"ex\") {\n      shift *= fontMetrics.metrics.xHeight;\n    }\n  }\n  var width = group.value.width.number;\n  if (group.value.width.unit === \"ex\") {\n    width *= fontMetrics.metrics.xHeight;\n  }\n  var height = group.value.height.number;\n  if (group.value.height.unit === \"ex\") {\n    height *= fontMetrics.metrics.xHeight;\n  }\n\n  // The sizes of rules are absolute, so make it larger if we are in a\n  // smaller style.\n  shift /= options.style.sizeMultiplier;\n  width /= options.style.sizeMultiplier;\n  height /= options.style.sizeMultiplier;\n\n  // Style the rule to the right size\n  rule.style.borderRightWidth = width + \"em\";\n  rule.style.borderTopWidth = height + \"em\";\n  rule.style.bottom = shift + \"em\";\n\n  // Record the height and width\n  rule.width = width;\n  rule.height = height + shift;\n  rule.depth = -shift;\n  return rule;\n};\ngroupTypes.accent = function (group, options, prev) {\n  // Accents are handled in the TeXbook pg. 443, rule 12.\n  var base = group.value.base;\n  var supsubGroup;\n  if (group.type === \"supsub\") {\n    // If our base is a character box, and we have superscripts and\n    // subscripts, the supsub will defer to us. In particular, we want\n    // to attach the superscripts and subscripts to the inner body (so\n    // that the position of the superscripts and subscripts won't be\n    // affected by the height of the accent). We accomplish this by\n    // sticking the base of the accent into the base of the supsub, and\n    // rendering that, while keeping track of where the accent is.\n\n    // The supsub group is the group that was passed in\n    var supsub = group;\n    // The real accent group is the base of the supsub group\n    group = supsub.value.base;\n    // The character box is the base of the accent group\n    base = group.value.base;\n    // Stick the character box into the base of the supsub group\n    supsub.value.base = base;\n\n    // Rerender the supsub group with its new base, and store that\n    // result.\n    supsubGroup = buildGroup(supsub, options.reset(), prev);\n  }\n\n  // Build the base group\n  var body = buildGroup(base, options.withStyle(options.style.cramp()));\n\n  // Calculate the skew of the accent. This is based on the line \"If the\n  // nucleus is not a single character, let s = 0; otherwise set s to the\n  // kern amount for the nucleus followed by the \\skewchar of its font.\"\n  // Note that our skew metrics are just the kern between each character\n  // and the skewchar.\n  var skew;\n  if (isCharacterBox(base)) {\n    // If the base is a character box, then we want the skew of the\n    // innermost character. To do that, we find the innermost character:\n    var baseChar = getBaseElem(base);\n    // Then, we render its group to get the symbol inside it\n    var baseGroup = buildGroup(baseChar, options.withStyle(options.style.cramp()));\n    // Finally, we pull the skew off of the symbol.\n    skew = baseGroup.skew;\n    // Note that we now throw away baseGroup, because the layers we\n    // removed with getBaseElem might contain things like \\color which\n    // we can't get rid of.\n    // TODO(emily): Find a better way to get the skew\n  } else {\n    skew = 0;\n  }\n\n  // calculate the amount of space between the body and the accent\n  var clearance = Math.min(body.height, fontMetrics.metrics.xHeight);\n\n  // Build the accent\n  var accent = buildCommon.makeSymbol(group.value.accent, \"Main-Regular\", \"math\", options.getColor());\n  // Remove the italic correction of the accent, because it only serves to\n  // shift the accent over to a place we don't want.\n  accent.italic = 0;\n\n  // The \\vec character that the fonts use is a combining character, and\n  // thus shows up much too far to the left. To account for this, we add a\n  // specific class which shifts the accent over to where we want it.\n  // TODO(emily): Fix this in a better way, like by changing the font\n  var vecClass = group.value.accent === \"\\\\vec\" ? \"accent-vec\" : null;\n  var accentBody = makeSpan([\"accent-body\", vecClass], [makeSpan([], [accent])]);\n  accentBody = buildCommon.makeVList([{\n    type: \"elem\",\n    elem: body\n  }, {\n    type: \"kern\",\n    size: -clearance\n  }, {\n    type: \"elem\",\n    elem: accentBody\n  }], \"firstBaseline\", null, options);\n\n  // Shift the accent over by the skew. Note we shift by twice the skew\n  // because we are centering the accent, so by adding 2*skew to the left,\n  // we shift it to the right by 1*skew.\n  accentBody.children[1].style.marginLeft = 2 * skew + \"em\";\n  var accentWrap = makeSpan([\"mord\", \"accent\"], [accentBody]);\n  if (supsubGroup) {\n    // Here, we replace the \"base\" child of the supsub with our newly\n    // generated accent.\n    supsubGroup.children[0] = accentWrap;\n\n    // Since we don't rerun the height calculation after replacing the\n    // accent, we manually recalculate height.\n    supsubGroup.height = Math.max(accentWrap.height, supsubGroup.height);\n\n    // Accents should always be ords, even when their innards are not.\n    supsubGroup.classes[0] = \"mord\";\n    return supsubGroup;\n  } else {\n    return accentWrap;\n  }\n};\ngroupTypes.phantom = function (group, options, prev) {\n  var elements = buildExpression(group.value.value, options.withPhantom(), prev);\n\n  // \\phantom isn't supposed to affect the elements it contains.\n  // See \"color\" for more details.\n  return new buildCommon.makeFragment(elements);\n};\n\n/**\n * buildGroup is the function that takes a group and calls the correct groupType\n * function for it. It also handles the interaction of size and style changes\n * between parents and children.\n */\nvar buildGroup = function (group, options, prev) {\n  if (!group) {\n    return makeSpan();\n  }\n  if (groupTypes[group.type]) {\n    // Call the groupTypes function\n    var groupNode = groupTypes[group.type](group, options, prev);\n    var multiplier;\n\n    // If the style changed between the parent and the current group,\n    // account for the size difference\n    if (options.style !== options.parentStyle) {\n      multiplier = options.style.sizeMultiplier / options.parentStyle.sizeMultiplier;\n      groupNode.height *= multiplier;\n      groupNode.depth *= multiplier;\n    }\n\n    // If the size changed between the parent and the current group, account\n    // for that size difference.\n    if (options.size !== options.parentSize) {\n      multiplier = buildCommon.sizingMultiplier[options.size] / buildCommon.sizingMultiplier[options.parentSize];\n      groupNode.height *= multiplier;\n      groupNode.depth *= multiplier;\n    }\n    return groupNode;\n  } else {\n    throw new ParseError(\"Got group of unknown type: '\" + group.type + \"'\");\n  }\n};\n\n/**\n * Take an entire parse tree, and build it into an appropriate set of HTML\n * nodes.\n */\nvar buildHTML = function (tree, options) {\n  // buildExpression is destructive, so we need to make a clone\n  // of the incoming tree so that it isn't accidentally changed\n  tree = JSON.parse(JSON.stringify(tree));\n\n  // Build the expression contained in the tree\n  var expression = buildExpression(tree, options);\n  var body = makeSpan([\"base\", options.style.cls()], expression);\n\n  // Add struts, which ensure that the top of the HTML element falls at the\n  // height of the expression, and the bottom of the HTML element falls at the\n  // depth of the expression.\n  var topStrut = makeSpan([\"strut\"]);\n  var bottomStrut = makeSpan([\"strut\", \"bottom\"]);\n  topStrut.style.height = body.height + \"em\";\n  bottomStrut.style.height = body.height + body.depth + \"em\";\n  // We'd like to use `vertical-align: top` but in IE 9 this lowers the\n  // baseline of the box to the bottom of this strut (instead staying in the\n  // normal place) so we use an absolute value for vertical-align instead\n  bottomStrut.style.verticalAlign = -body.depth + \"em\";\n\n  // Wrap the struts and body together\n  var htmlNode = makeSpan([\"katex-html\"], [topStrut, bottomStrut, body]);\n  htmlNode.setAttribute(\"aria-hidden\", \"true\");\n  return htmlNode;\n};\nmodule.exports = buildHTML;","map":{"version":3,"names":["ParseError","require","Style","buildCommon","delimiter","domTree","fontMetrics","utils","makeSpan","buildExpression","expression","options","prev","groups","i","length","group","push","buildGroup","groupToType","mathord","textord","bin","rel","text","open","close","inner","genfrac","array","spacing","punct","ordgroup","op","katex","overline","underline","rule","leftright","sqrt","accent","getTypeOfGroup","type","value","base","delimType","shouldHandleSupSub","limits","style","size","DISPLAY","alwaysHandleSupSub","isCharacterBox","getBaseElem","baseElem","makeNullDelimiter","reset","TEXT","cls","groupTypes","makeOrd","className","prevAtom","atoms","contains","mathsym","mode","getColor","body","color","elements","withColor","makeFragment","supsub","supmid","submid","sup","sub","withStyle","supShift","subShift","height","metrics","supDrop","depth","subDrop","minSupShift","sup1","cramped","sup3","sup2","multiplier","sizeMultiplier","scriptspace","ptPerEm","Math","max","sub1","xHeight","makeVList","elem","children","marginRight","symbolNode","marginLeft","italic","sub2","ruleWidth","defaultRuleThickness","psi","shift","fstyle","nstyle","fracNum","dstyle","fracDen","numer","numerreset","denom","denomreset","hasBarLine","numShift","clearance","denomShift","num1","denom1","num2","num3","denom2","frac","candiateClearance","axisHeight","mid","midShift","delimSize","delim1","getDelim2","leftDelim","rightDelim","customSizedDelim","r","c","nr","nc","Array","pt","arraycolsep","baselineskip","arraystretch","deflt","arrayskip","arstrutHeight","arstrutDepth","totalHeight","inrow","outrow","elt","gap","rowGaps","unit","number","emPerEx","console","error","pos","offset","colDescriptions","cols","colSep","colDescrNum","colDescr","firstSeparator","width","doubleRuleSep","separator","verticalAlign","sepwidth","hskipBeforeAndAfter","pregap","col","row","align","postgap","spacingFunctions","llap","fix","rlap","supGroup","subGroup","hasLimits","noSuccessor","large","symbol","baseShift","slant","makeSymbol","output","supKern","subKern","bigOpSpacing1","bigOpSpacing3","bigOpSpacing2","bigOpSpacing4","finalGroup","top","bottom","bigOpSpacing5","k","a","t","e","x","innerGroup","cramp","line","maxFontSize","vlist","phi","id","lineClearance","innerHeight","minDelimiterHeight","delim","delimDepth","delimShift","index","root","SCRIPTSCRIPT","rootWrap","innerRootHeight","innerRootDepth","toShift","rootVList","rootVListWrap","sizing","withSize","span","fontSize","sizingMultiplier","styling","SCRIPT","newStyle","font","withFont","delimsizing","sizedDelim","innerDepth","left","leftRightDelim","unshift","right","borderRightWidth","borderTopWidth","supsubGroup","skew","baseChar","baseGroup","min","vecClass","accentBody","accentWrap","classes","phantom","withPhantom","groupNode","parentStyle","parentSize","buildHTML","tree","JSON","parse","stringify","topStrut","bottomStrut","htmlNode","setAttribute","module","exports"],"sources":["/Users/chenhetian/04Front_end/FruitVue0629/fruitshop/node_modules/katex/src/buildHTML.js"],"sourcesContent":["/* eslint no-console:0 */\n/**\n * This file does the main work of building a domTree structure from a parse\n * tree. The entry point is the `buildHTML` function, which takes a parse tree.\n * Then, the buildExpression, buildGroup, and various groupTypes functions are\n * called, to produce a final HTML tree.\n */\n\nvar ParseError = require(\"./ParseError\");\nvar Style = require(\"./Style\");\n\nvar buildCommon = require(\"./buildCommon\");\nvar delimiter = require(\"./delimiter\");\nvar domTree = require(\"./domTree\");\nvar fontMetrics = require(\"./fontMetrics\");\nvar utils = require(\"./utils\");\n\nvar makeSpan = buildCommon.makeSpan;\n\n/**\n * Take a list of nodes, build them in order, and return a list of the built\n * nodes. This function handles the `prev` node correctly, and passes the\n * previous element from the list as the prev of the next element.\n */\nvar buildExpression = function(expression, options, prev) {\n    var groups = [];\n    for (var i = 0; i < expression.length; i++) {\n        var group = expression[i];\n        groups.push(buildGroup(group, options, prev));\n        prev = group;\n    }\n    return groups;\n};\n\n// List of types used by getTypeOfGroup,\n// see https://github.com/Khan/KaTeX/wiki/Examining-TeX#group-types\nvar groupToType = {\n    mathord: \"mord\",\n    textord: \"mord\",\n    bin: \"mbin\",\n    rel: \"mrel\",\n    text: \"mord\",\n    open: \"mopen\",\n    close: \"mclose\",\n    inner: \"minner\",\n    genfrac: \"mord\",\n    array: \"mord\",\n    spacing: \"mord\",\n    punct: \"mpunct\",\n    ordgroup: \"mord\",\n    op: \"mop\",\n    katex: \"mord\",\n    overline: \"mord\",\n    underline: \"mord\",\n    rule: \"mord\",\n    leftright: \"minner\",\n    sqrt: \"mord\",\n    accent: \"mord\",\n};\n\n/**\n * Gets the final math type of an expression, given its group type. This type is\n * used to determine spacing between elements, and affects bin elements by\n * causing them to change depending on what types are around them. This type\n * must be attached to the outermost node of an element as a CSS class so that\n * spacing with its surrounding elements works correctly.\n *\n * Some elements can be mapped one-to-one from group type to math type, and\n * those are listed in the `groupToType` table.\n *\n * Others (usually elements that wrap around other elements) often have\n * recursive definitions, and thus call `getTypeOfGroup` on their inner\n * elements.\n */\nvar getTypeOfGroup = function(group) {\n    if (group == null) {\n        // Like when typesetting $^3$\n        return groupToType.mathord;\n    } else if (group.type === \"supsub\") {\n        return getTypeOfGroup(group.value.base);\n    } else if (group.type === \"llap\" || group.type === \"rlap\") {\n        return getTypeOfGroup(group.value);\n    } else if (group.type === \"color\") {\n        return getTypeOfGroup(group.value.value);\n    } else if (group.type === \"sizing\") {\n        return getTypeOfGroup(group.value.value);\n    } else if (group.type === \"styling\") {\n        return getTypeOfGroup(group.value.value);\n    } else if (group.type === \"delimsizing\") {\n        return groupToType[group.value.delimType];\n    } else {\n        return groupToType[group.type];\n    }\n};\n\n/**\n * Sometimes, groups perform special rules when they have superscripts or\n * subscripts attached to them. This function lets the `supsub` group know that\n * its inner element should handle the superscripts and subscripts instead of\n * handling them itself.\n */\nvar shouldHandleSupSub = function(group, options) {\n    if (!group) {\n        return false;\n    } else if (group.type === \"op\") {\n        // Operators handle supsubs differently when they have limits\n        // (e.g. `\\displaystyle\\sum_2^3`)\n        return group.value.limits &&\n            (options.style.size === Style.DISPLAY.size ||\n            group.value.alwaysHandleSupSub);\n    } else if (group.type === \"accent\") {\n        return isCharacterBox(group.value.base);\n    } else {\n        return null;\n    }\n};\n\n/**\n * Sometimes we want to pull out the innermost element of a group. In most\n * cases, this will just be the group itself, but when ordgroups and colors have\n * a single element, we want to pull that out.\n */\nvar getBaseElem = function(group) {\n    if (!group) {\n        return false;\n    } else if (group.type === \"ordgroup\") {\n        if (group.value.length === 1) {\n            return getBaseElem(group.value[0]);\n        } else {\n            return group;\n        }\n    } else if (group.type === \"color\") {\n        if (group.value.value.length === 1) {\n            return getBaseElem(group.value.value[0]);\n        } else {\n            return group;\n        }\n    } else {\n        return group;\n    }\n};\n\n/**\n * TeXbook algorithms often reference \"character boxes\", which are simply groups\n * with a single character in them. To decide if something is a character box,\n * we find its innermost group, and see if it is a single character.\n */\nvar isCharacterBox = function(group) {\n    var baseElem = getBaseElem(group);\n\n    // These are all they types of groups which hold single characters\n    return baseElem.type === \"mathord\" ||\n        baseElem.type === \"textord\" ||\n        baseElem.type === \"bin\" ||\n        baseElem.type === \"rel\" ||\n        baseElem.type === \"inner\" ||\n        baseElem.type === \"open\" ||\n        baseElem.type === \"close\" ||\n        baseElem.type === \"punct\";\n};\n\nvar makeNullDelimiter = function(options) {\n    return makeSpan([\n        \"sizing\", \"reset-\" + options.size, \"size5\",\n        options.style.reset(), Style.TEXT.cls(),\n        \"nulldelimiter\",\n    ]);\n};\n\n/**\n * This is a map of group types to the function used to handle that type.\n * Simpler types come at the beginning, while complicated types come afterwards.\n */\nvar groupTypes = {};\n\ngroupTypes.mathord = function(group, options, prev) {\n    return buildCommon.makeOrd(group, options, \"mathord\");\n};\n\ngroupTypes.textord = function(group, options, prev) {\n    return buildCommon.makeOrd(group, options, \"textord\");\n};\n\ngroupTypes.bin = function(group, options, prev) {\n    var className = \"mbin\";\n    // Pull out the most recent element. Do some special handling to find\n    // things at the end of a \\color group. Note that we don't use the same\n    // logic for ordgroups (which count as ords).\n    var prevAtom = prev;\n    while (prevAtom && prevAtom.type === \"color\") {\n        var atoms = prevAtom.value.value;\n        prevAtom = atoms[atoms.length - 1];\n    }\n    // See TeXbook pg. 442-446, Rules 5 and 6, and the text before Rule 19.\n    // Here, we determine whether the bin should turn into an ord. We\n    // currently only apply Rule 5.\n    if (!prev || utils.contains([\"mbin\", \"mopen\", \"mrel\", \"mop\", \"mpunct\"],\n            getTypeOfGroup(prevAtom))) {\n        group.type = \"textord\";\n        className = \"mord\";\n    }\n\n    return buildCommon.mathsym(\n        group.value, group.mode, options.getColor(), [className]);\n};\n\ngroupTypes.rel = function(group, options, prev) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options.getColor(), [\"mrel\"]);\n};\n\ngroupTypes.open = function(group, options, prev) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options.getColor(), [\"mopen\"]);\n};\n\ngroupTypes.close = function(group, options, prev) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options.getColor(), [\"mclose\"]);\n};\n\ngroupTypes.inner = function(group, options, prev) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options.getColor(), [\"minner\"]);\n};\n\ngroupTypes.punct = function(group, options, prev) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options.getColor(), [\"mpunct\"]);\n};\n\ngroupTypes.ordgroup = function(group, options, prev) {\n    return makeSpan(\n        [\"mord\", options.style.cls()],\n        buildExpression(group.value, options.reset())\n    );\n};\n\ngroupTypes.text = function(group, options, prev) {\n    return makeSpan([\"text\", \"mord\", options.style.cls()],\n        buildExpression(group.value.body, options.reset()));\n};\n\ngroupTypes.color = function(group, options, prev) {\n    var elements = buildExpression(\n        group.value.value,\n        options.withColor(group.value.color),\n        prev\n    );\n\n    // \\color isn't supposed to affect the type of the elements it contains.\n    // To accomplish this, we wrap the results in a fragment, so the inner\n    // elements will be able to directly interact with their neighbors. For\n    // example, `\\color{red}{2 +} 3` has the same spacing as `2 + 3`\n    return new buildCommon.makeFragment(elements);\n};\n\ngroupTypes.supsub = function(group, options, prev) {\n    // Superscript and subscripts are handled in the TeXbook on page\n    // 445-446, rules 18(a-f).\n\n    // Here is where we defer to the inner group if it should handle\n    // superscripts and subscripts itself.\n    if (shouldHandleSupSub(group.value.base, options)) {\n        return groupTypes[group.value.base.type](group, options, prev);\n    }\n\n    var base = buildGroup(group.value.base, options.reset());\n    var supmid;\n    var submid;\n    var sup;\n    var sub;\n\n    if (group.value.sup) {\n        sup = buildGroup(group.value.sup,\n                options.withStyle(options.style.sup()));\n        supmid = makeSpan(\n                [options.style.reset(), options.style.sup().cls()], [sup]);\n    }\n\n    if (group.value.sub) {\n        sub = buildGroup(group.value.sub,\n                options.withStyle(options.style.sub()));\n        submid = makeSpan(\n                [options.style.reset(), options.style.sub().cls()], [sub]);\n    }\n\n    // Rule 18a\n    var supShift;\n    var subShift;\n    if (isCharacterBox(group.value.base)) {\n        supShift = 0;\n        subShift = 0;\n    } else {\n        supShift = base.height - fontMetrics.metrics.supDrop;\n        subShift = base.depth + fontMetrics.metrics.subDrop;\n    }\n\n    // Rule 18c\n    var minSupShift;\n    if (options.style === Style.DISPLAY) {\n        minSupShift = fontMetrics.metrics.sup1;\n    } else if (options.style.cramped) {\n        minSupShift = fontMetrics.metrics.sup3;\n    } else {\n        minSupShift = fontMetrics.metrics.sup2;\n    }\n\n    // scriptspace is a font-size-independent size, so scale it\n    // appropriately\n    var multiplier = Style.TEXT.sizeMultiplier *\n            options.style.sizeMultiplier;\n    var scriptspace =\n        (0.5 / fontMetrics.metrics.ptPerEm) / multiplier + \"em\";\n\n    var supsub;\n    if (!group.value.sup) {\n        // Rule 18b\n        subShift = Math.max(\n            subShift, fontMetrics.metrics.sub1,\n            sub.height - 0.8 * fontMetrics.metrics.xHeight);\n\n        supsub = buildCommon.makeVList([\n            {type: \"elem\", elem: submid},\n        ], \"shift\", subShift, options);\n\n        supsub.children[0].style.marginRight = scriptspace;\n\n        // Subscripts shouldn't be shifted by the base's italic correction.\n        // Account for that by shifting the subscript back the appropriate\n        // amount. Note we only do this when the base is a single symbol.\n        if (base instanceof domTree.symbolNode) {\n            supsub.children[0].style.marginLeft = -base.italic + \"em\";\n        }\n    } else if (!group.value.sub) {\n        // Rule 18c, d\n        supShift = Math.max(supShift, minSupShift,\n            sup.depth + 0.25 * fontMetrics.metrics.xHeight);\n\n        supsub = buildCommon.makeVList([\n            {type: \"elem\", elem: supmid},\n        ], \"shift\", -supShift, options);\n\n        supsub.children[0].style.marginRight = scriptspace;\n    } else {\n        supShift = Math.max(\n            supShift, minSupShift,\n            sup.depth + 0.25 * fontMetrics.metrics.xHeight);\n        subShift = Math.max(subShift, fontMetrics.metrics.sub2);\n\n        var ruleWidth = fontMetrics.metrics.defaultRuleThickness;\n\n        // Rule 18e\n        if ((supShift - sup.depth) - (sub.height - subShift) <\n                4 * ruleWidth) {\n            subShift = 4 * ruleWidth - (supShift - sup.depth) + sub.height;\n            var psi = 0.8 * fontMetrics.metrics.xHeight -\n                (supShift - sup.depth);\n            if (psi > 0) {\n                supShift += psi;\n                subShift -= psi;\n            }\n        }\n\n        supsub = buildCommon.makeVList([\n            {type: \"elem\", elem: submid, shift: subShift},\n            {type: \"elem\", elem: supmid, shift: -supShift},\n        ], \"individualShift\", null, options);\n\n        // See comment above about subscripts not being shifted\n        if (base instanceof domTree.symbolNode) {\n            supsub.children[0].style.marginLeft = -base.italic + \"em\";\n        }\n\n        supsub.children[0].style.marginRight = scriptspace;\n        supsub.children[1].style.marginRight = scriptspace;\n    }\n\n    return makeSpan([getTypeOfGroup(group.value.base)],\n        [base, supsub]);\n};\n\ngroupTypes.genfrac = function(group, options, prev) {\n    // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).\n    // Figure out what style this fraction should be in based on the\n    // function used\n    var fstyle = options.style;\n    if (group.value.size === \"display\") {\n        fstyle = Style.DISPLAY;\n    } else if (group.value.size === \"text\") {\n        fstyle = Style.TEXT;\n    }\n\n    var nstyle = fstyle.fracNum();\n    var dstyle = fstyle.fracDen();\n\n    var numer = buildGroup(group.value.numer, options.withStyle(nstyle));\n    var numerreset = makeSpan([fstyle.reset(), nstyle.cls()], [numer]);\n\n    var denom = buildGroup(group.value.denom, options.withStyle(dstyle));\n    var denomreset = makeSpan([fstyle.reset(), dstyle.cls()], [denom]);\n\n    var ruleWidth;\n    if (group.value.hasBarLine) {\n        ruleWidth = fontMetrics.metrics.defaultRuleThickness /\n            options.style.sizeMultiplier;\n    } else {\n        ruleWidth = 0;\n    }\n\n    // Rule 15b\n    var numShift;\n    var clearance;\n    var denomShift;\n    if (fstyle.size === Style.DISPLAY.size) {\n        numShift = fontMetrics.metrics.num1;\n        if (ruleWidth > 0) {\n            clearance = 3 * ruleWidth;\n        } else {\n            clearance = 7 * fontMetrics.metrics.defaultRuleThickness;\n        }\n        denomShift = fontMetrics.metrics.denom1;\n    } else {\n        if (ruleWidth > 0) {\n            numShift = fontMetrics.metrics.num2;\n            clearance = ruleWidth;\n        } else {\n            numShift = fontMetrics.metrics.num3;\n            clearance = 3 * fontMetrics.metrics.defaultRuleThickness;\n        }\n        denomShift = fontMetrics.metrics.denom2;\n    }\n\n    var frac;\n    if (ruleWidth === 0) {\n        // Rule 15c\n        var candiateClearance =\n            (numShift - numer.depth) - (denom.height - denomShift);\n        if (candiateClearance < clearance) {\n            numShift += 0.5 * (clearance - candiateClearance);\n            denomShift += 0.5 * (clearance - candiateClearance);\n        }\n\n        frac = buildCommon.makeVList([\n            {type: \"elem\", elem: denomreset, shift: denomShift},\n            {type: \"elem\", elem: numerreset, shift: -numShift},\n        ], \"individualShift\", null, options);\n    } else {\n        // Rule 15d\n        var axisHeight = fontMetrics.metrics.axisHeight;\n\n        if ((numShift - numer.depth) - (axisHeight + 0.5 * ruleWidth) <\n                clearance) {\n            numShift +=\n                clearance - ((numShift - numer.depth) -\n                             (axisHeight + 0.5 * ruleWidth));\n        }\n\n        if ((axisHeight - 0.5 * ruleWidth) - (denom.height - denomShift) <\n                clearance) {\n            denomShift +=\n                clearance - ((axisHeight - 0.5 * ruleWidth) -\n                             (denom.height - denomShift));\n        }\n\n        var mid = makeSpan(\n            [options.style.reset(), Style.TEXT.cls(), \"frac-line\"]);\n        // Manually set the height of the line because its height is\n        // created in CSS\n        mid.height = ruleWidth;\n\n        var midShift = -(axisHeight - 0.5 * ruleWidth);\n\n        frac = buildCommon.makeVList([\n            {type: \"elem\", elem: denomreset, shift: denomShift},\n            {type: \"elem\", elem: mid,        shift: midShift},\n            {type: \"elem\", elem: numerreset, shift: -numShift},\n        ], \"individualShift\", null, options);\n    }\n\n    // Since we manually change the style sometimes (with \\dfrac or \\tfrac),\n    // account for the possible size change here.\n    frac.height *= fstyle.sizeMultiplier / options.style.sizeMultiplier;\n    frac.depth *= fstyle.sizeMultiplier / options.style.sizeMultiplier;\n\n    // Rule 15e\n    var delimSize;\n    if (fstyle.size === Style.DISPLAY.size) {\n        delimSize = fontMetrics.metrics.delim1;\n    } else {\n        delimSize = fontMetrics.metrics.getDelim2(fstyle);\n    }\n\n    var leftDelim;\n    var rightDelim;\n    if (group.value.leftDelim == null) {\n        leftDelim = makeNullDelimiter(options);\n    } else {\n        leftDelim = delimiter.customSizedDelim(\n            group.value.leftDelim, delimSize, true,\n            options.withStyle(fstyle), group.mode);\n    }\n    if (group.value.rightDelim == null) {\n        rightDelim = makeNullDelimiter(options);\n    } else {\n        rightDelim = delimiter.customSizedDelim(\n            group.value.rightDelim, delimSize, true,\n            options.withStyle(fstyle), group.mode);\n    }\n\n    return makeSpan(\n        [\"mord\", options.style.reset(), fstyle.cls()],\n        [leftDelim, makeSpan([\"mfrac\"], [frac]), rightDelim],\n        options.getColor());\n};\n\ngroupTypes.array = function(group, options, prev) {\n    var r;\n    var c;\n    var nr = group.value.body.length;\n    var nc = 0;\n    var body = new Array(nr);\n\n    // Horizontal spacing\n    var pt = 1 / fontMetrics.metrics.ptPerEm;\n    var arraycolsep = 5 * pt; // \\arraycolsep in article.cls\n\n    // Vertical spacing\n    var baselineskip = 12 * pt; // see size10.clo\n    // Default \\arraystretch from lttab.dtx\n    // TODO(gagern): may get redefined once we have user-defined macros\n    var arraystretch = utils.deflt(group.value.arraystretch, 1);\n    var arrayskip = arraystretch * baselineskip;\n    var arstrutHeight = 0.7 * arrayskip; // \\strutbox in ltfsstrc.dtx and\n    var arstrutDepth = 0.3 * arrayskip;  // \\@arstrutbox in lttab.dtx\n\n    var totalHeight = 0;\n    for (r = 0; r < group.value.body.length; ++r) {\n        var inrow = group.value.body[r];\n        var height = arstrutHeight; // \\@array adds an \\@arstrut\n        var depth = arstrutDepth;   // to each tow (via the template)\n\n        if (nc < inrow.length) {\n            nc = inrow.length;\n        }\n\n        var outrow = new Array(inrow.length);\n        for (c = 0; c < inrow.length; ++c) {\n            var elt = buildGroup(inrow[c], options);\n            if (depth < elt.depth) {\n                depth = elt.depth;\n            }\n            if (height < elt.height) {\n                height = elt.height;\n            }\n            outrow[c] = elt;\n        }\n\n        var gap = 0;\n        if (group.value.rowGaps[r]) {\n            gap = group.value.rowGaps[r].value;\n            switch (gap.unit) {\n                case \"em\":\n                    gap = gap.number;\n                    break;\n                case \"ex\":\n                    gap = gap.number * fontMetrics.metrics.emPerEx;\n                    break;\n                default:\n                    console.error(\"Can't handle unit \" + gap.unit);\n                    gap = 0;\n            }\n            if (gap > 0) { // \\@argarraycr\n                gap += arstrutDepth;\n                if (depth < gap) {\n                    depth = gap; // \\@xargarraycr\n                }\n                gap = 0;\n            }\n        }\n\n        outrow.height = height;\n        outrow.depth = depth;\n        totalHeight += height;\n        outrow.pos = totalHeight;\n        totalHeight += depth + gap; // \\@yargarraycr\n        body[r] = outrow;\n    }\n\n    var offset = totalHeight / 2 + fontMetrics.metrics.axisHeight;\n    var colDescriptions = group.value.cols || [];\n    var cols = [];\n    var colSep;\n    var colDescrNum;\n    for (c = 0, colDescrNum = 0;\n         // Continue while either there are more columns or more column\n         // descriptions, so trailing separators don't get lost.\n         c < nc || colDescrNum < colDescriptions.length;\n         ++c, ++colDescrNum) {\n\n        var colDescr = colDescriptions[colDescrNum] || {};\n\n        var firstSeparator = true;\n        while (colDescr.type === \"separator\") {\n            // If there is more than one separator in a row, add a space\n            // between them.\n            if (!firstSeparator) {\n                colSep = makeSpan([\"arraycolsep\"], []);\n                colSep.style.width =\n                    fontMetrics.metrics.doubleRuleSep + \"em\";\n                cols.push(colSep);\n            }\n\n            if (colDescr.separator === \"|\") {\n                var separator = makeSpan(\n                    [\"vertical-separator\"],\n                    []);\n                separator.style.height = totalHeight + \"em\";\n                separator.style.verticalAlign =\n                    -(totalHeight - offset) + \"em\";\n\n                cols.push(separator);\n            } else {\n                throw new ParseError(\n                    \"Invalid separator type: \" + colDescr.separator);\n            }\n\n            colDescrNum++;\n            colDescr = colDescriptions[colDescrNum] || {};\n            firstSeparator = false;\n        }\n\n        if (c >= nc) {\n            continue;\n        }\n\n        var sepwidth;\n        if (c > 0 || group.value.hskipBeforeAndAfter) {\n            sepwidth = utils.deflt(colDescr.pregap, arraycolsep);\n            if (sepwidth !== 0) {\n                colSep = makeSpan([\"arraycolsep\"], []);\n                colSep.style.width = sepwidth + \"em\";\n                cols.push(colSep);\n            }\n        }\n\n        var col = [];\n        for (r = 0; r < nr; ++r) {\n            var row = body[r];\n            var elem = row[c];\n            if (!elem) {\n                continue;\n            }\n            var shift = row.pos - offset;\n            elem.depth = row.depth;\n            elem.height = row.height;\n            col.push({type: \"elem\", elem: elem, shift: shift});\n        }\n\n        col = buildCommon.makeVList(col, \"individualShift\", null, options);\n        col = makeSpan(\n            [\"col-align-\" + (colDescr.align || \"c\")],\n            [col]);\n        cols.push(col);\n\n        if (c < nc - 1 || group.value.hskipBeforeAndAfter) {\n            sepwidth = utils.deflt(colDescr.postgap, arraycolsep);\n            if (sepwidth !== 0) {\n                colSep = makeSpan([\"arraycolsep\"], []);\n                colSep.style.width = sepwidth + \"em\";\n                cols.push(colSep);\n            }\n        }\n    }\n    body = makeSpan([\"mtable\"], cols);\n    return makeSpan([\"mord\"], [body], options.getColor());\n};\n\ngroupTypes.spacing = function(group, options, prev) {\n    if (group.value === \"\\\\ \" || group.value === \"\\\\space\" ||\n        group.value === \" \" || group.value === \"~\") {\n        // Spaces are generated by adding an actual space. Each of these\n        // things has an entry in the symbols table, so these will be turned\n        // into appropriate outputs.\n        return makeSpan(\n            [\"mord\", \"mspace\"],\n            [buildCommon.mathsym(group.value, group.mode)]\n        );\n    } else {\n        // Other kinds of spaces are of arbitrary width. We use CSS to\n        // generate these.\n        return makeSpan(\n            [\"mord\", \"mspace\",\n             buildCommon.spacingFunctions[group.value].className]);\n    }\n};\n\ngroupTypes.llap = function(group, options, prev) {\n    var inner = makeSpan(\n        [\"inner\"], [buildGroup(group.value.body, options.reset())]);\n    var fix = makeSpan([\"fix\"], []);\n    return makeSpan(\n        [\"llap\", options.style.cls()], [inner, fix]);\n};\n\ngroupTypes.rlap = function(group, options, prev) {\n    var inner = makeSpan(\n        [\"inner\"], [buildGroup(group.value.body, options.reset())]);\n    var fix = makeSpan([\"fix\"], []);\n    return makeSpan(\n        [\"rlap\", options.style.cls()], [inner, fix]);\n};\n\ngroupTypes.op = function(group, options, prev) {\n    // Operators are handled in the TeXbook pg. 443-444, rule 13(a).\n    var supGroup;\n    var subGroup;\n    var hasLimits = false;\n    if (group.type === \"supsub\" ) {\n        // If we have limits, supsub will pass us its group to handle. Pull\n        // out the superscript and subscript and set the group to the op in\n        // its base.\n        supGroup = group.value.sup;\n        subGroup = group.value.sub;\n        group = group.value.base;\n        hasLimits = true;\n    }\n\n    // Most operators have a large successor symbol, but these don't.\n    var noSuccessor = [\n        \"\\\\smallint\",\n    ];\n\n    var large = false;\n    if (options.style.size === Style.DISPLAY.size &&\n        group.value.symbol &&\n        !utils.contains(noSuccessor, group.value.body)) {\n\n        // Most symbol operators get larger in displaystyle (rule 13)\n        large = true;\n    }\n\n    var base;\n    var baseShift = 0;\n    var slant = 0;\n    if (group.value.symbol) {\n        // If this is a symbol, create the symbol.\n        var style = large ? \"Size2-Regular\" : \"Size1-Regular\";\n        base = buildCommon.makeSymbol(\n            group.value.body, style, \"math\", options.getColor(),\n            [\"op-symbol\", large ? \"large-op\" : \"small-op\", \"mop\"]);\n\n        // Shift the symbol so its center lies on the axis (rule 13). It\n        // appears that our fonts have the centers of the symbols already\n        // almost on the axis, so these numbers are very small. Note we\n        // don't actually apply this here, but instead it is used either in\n        // the vlist creation or separately when there are no limits.\n        baseShift = (base.height - base.depth) / 2 -\n            fontMetrics.metrics.axisHeight *\n            options.style.sizeMultiplier;\n\n        // The slant of the symbol is just its italic correction.\n        slant = base.italic;\n    } else {\n        // Otherwise, this is a text operator. Build the text from the\n        // operator's name.\n        // TODO(emily): Add a space in the middle of some of these\n        // operators, like \\limsup\n        var output = [];\n        for (var i = 1; i < group.value.body.length; i++) {\n            output.push(buildCommon.mathsym(group.value.body[i], group.mode));\n        }\n        base = makeSpan([\"mop\"], output, options.getColor());\n    }\n\n    if (hasLimits) {\n        // IE 8 clips \\int if it is in a display: inline-block. We wrap it\n        // in a new span so it is an inline, and works.\n        base = makeSpan([], [base]);\n\n        var supmid;\n        var supKern;\n        var submid;\n        var subKern;\n        // We manually have to handle the superscripts and subscripts. This,\n        // aside from the kern calculations, is copied from supsub.\n        if (supGroup) {\n            var sup = buildGroup(\n                supGroup, options.withStyle(options.style.sup()));\n            supmid = makeSpan(\n                [options.style.reset(), options.style.sup().cls()], [sup]);\n\n            supKern = Math.max(\n                fontMetrics.metrics.bigOpSpacing1,\n                fontMetrics.metrics.bigOpSpacing3 - sup.depth);\n        }\n\n        if (subGroup) {\n            var sub = buildGroup(\n                subGroup, options.withStyle(options.style.sub()));\n            submid = makeSpan(\n                [options.style.reset(), options.style.sub().cls()],\n                [sub]);\n\n            subKern = Math.max(\n                fontMetrics.metrics.bigOpSpacing2,\n                fontMetrics.metrics.bigOpSpacing4 - sub.height);\n        }\n\n        // Build the final group as a vlist of the possible subscript, base,\n        // and possible superscript.\n        var finalGroup;\n        var top;\n        var bottom;\n        if (!supGroup) {\n            top = base.height - baseShift;\n\n            finalGroup = buildCommon.makeVList([\n                {type: \"kern\", size: fontMetrics.metrics.bigOpSpacing5},\n                {type: \"elem\", elem: submid},\n                {type: \"kern\", size: subKern},\n                {type: \"elem\", elem: base},\n            ], \"top\", top, options);\n\n            // Here, we shift the limits by the slant of the symbol. Note\n            // that we are supposed to shift the limits by 1/2 of the slant,\n            // but since we are centering the limits adding a full slant of\n            // margin will shift by 1/2 that.\n            finalGroup.children[0].style.marginLeft = -slant + \"em\";\n        } else if (!subGroup) {\n            bottom = base.depth + baseShift;\n\n            finalGroup = buildCommon.makeVList([\n                {type: \"elem\", elem: base},\n                {type: \"kern\", size: supKern},\n                {type: \"elem\", elem: supmid},\n                {type: \"kern\", size: fontMetrics.metrics.bigOpSpacing5},\n            ], \"bottom\", bottom, options);\n\n            // See comment above about slants\n            finalGroup.children[1].style.marginLeft = slant + \"em\";\n        } else if (!supGroup && !subGroup) {\n            // This case probably shouldn't occur (this would mean the\n            // supsub was sending us a group with no superscript or\n            // subscript) but be safe.\n            return base;\n        } else {\n            bottom = fontMetrics.metrics.bigOpSpacing5 +\n                submid.height + submid.depth +\n                subKern +\n                base.depth + baseShift;\n\n            finalGroup = buildCommon.makeVList([\n                {type: \"kern\", size: fontMetrics.metrics.bigOpSpacing5},\n                {type: \"elem\", elem: submid},\n                {type: \"kern\", size: subKern},\n                {type: \"elem\", elem: base},\n                {type: \"kern\", size: supKern},\n                {type: \"elem\", elem: supmid},\n                {type: \"kern\", size: fontMetrics.metrics.bigOpSpacing5},\n            ], \"bottom\", bottom, options);\n\n            // See comment above about slants\n            finalGroup.children[0].style.marginLeft = -slant + \"em\";\n            finalGroup.children[2].style.marginLeft = slant + \"em\";\n        }\n\n        return makeSpan([\"mop\", \"op-limits\"], [finalGroup]);\n    } else {\n        if (group.value.symbol) {\n            base.style.top = baseShift + \"em\";\n        }\n\n        return base;\n    }\n};\n\ngroupTypes.katex = function(group, options, prev) {\n    // The KaTeX logo. The offsets for the K and a were chosen to look\n    // good, but the offsets for the T, E, and X were taken from the\n    // definition of \\TeX in TeX (see TeXbook pg. 356)\n    var k = makeSpan(\n        [\"k\"], [buildCommon.mathsym(\"K\", group.mode)]);\n    var a = makeSpan(\n        [\"a\"], [buildCommon.mathsym(\"A\", group.mode)]);\n\n    a.height = (a.height + 0.2) * 0.75;\n    a.depth = (a.height - 0.2) * 0.75;\n\n    var t = makeSpan(\n        [\"t\"], [buildCommon.mathsym(\"T\", group.mode)]);\n    var e = makeSpan(\n        [\"e\"], [buildCommon.mathsym(\"E\", group.mode)]);\n\n    e.height = (e.height - 0.2155);\n    e.depth = (e.depth + 0.2155);\n\n    var x = makeSpan(\n        [\"x\"], [buildCommon.mathsym(\"X\", group.mode)]);\n\n    return makeSpan(\n        [\"katex-logo\", \"mord\"], [k, a, t, e, x], options.getColor());\n};\n\ngroupTypes.overline = function(group, options, prev) {\n    // Overlines are handled in the TeXbook pg 443, Rule 9.\n\n    // Build the inner group in the cramped style.\n    var innerGroup = buildGroup(group.value.body,\n            options.withStyle(options.style.cramp()));\n\n    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /\n        options.style.sizeMultiplier;\n\n    // Create the line above the body\n    var line = makeSpan(\n        [options.style.reset(), Style.TEXT.cls(), \"overline-line\"]);\n    line.height = ruleWidth;\n    line.maxFontSize = 1.0;\n\n    // Generate the vlist, with the appropriate kerns\n    var vlist = buildCommon.makeVList([\n        {type: \"elem\", elem: innerGroup},\n        {type: \"kern\", size: 3 * ruleWidth},\n        {type: \"elem\", elem: line},\n        {type: \"kern\", size: ruleWidth},\n    ], \"firstBaseline\", null, options);\n\n    return makeSpan([\"overline\", \"mord\"], [vlist], options.getColor());\n};\n\ngroupTypes.underline = function(group, options, prev) {\n    // Underlines are handled in the TeXbook pg 443, Rule 10.\n\n    // Build the inner group.\n    var innerGroup = buildGroup(group.value.body, options);\n\n    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /\n        options.style.sizeMultiplier;\n\n    // Create the line above the body\n    var line = makeSpan(\n        [options.style.reset(), Style.TEXT.cls(), \"underline-line\"]);\n    line.height = ruleWidth;\n    line.maxFontSize = 1.0;\n\n    // Generate the vlist, with the appropriate kerns\n    var vlist = buildCommon.makeVList([\n        {type: \"kern\", size: ruleWidth},\n        {type: \"elem\", elem: line},\n        {type: \"kern\", size: 3 * ruleWidth},\n        {type: \"elem\", elem: innerGroup},\n    ], \"top\", innerGroup.height, options);\n\n    return makeSpan([\"underline\", \"mord\"], [vlist], options.getColor());\n};\n\ngroupTypes.sqrt = function(group, options, prev) {\n    // Square roots are handled in the TeXbook pg. 443, Rule 11.\n\n    // First, we do the same steps as in overline to build the inner group\n    // and line\n    var inner = buildGroup(group.value.body,\n            options.withStyle(options.style.cramp()));\n\n    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /\n        options.style.sizeMultiplier;\n\n    var line = makeSpan(\n        [options.style.reset(), Style.TEXT.cls(), \"sqrt-line\"], [],\n        options.getColor());\n    line.height = ruleWidth;\n    line.maxFontSize = 1.0;\n\n    var phi = ruleWidth;\n    if (options.style.id < Style.TEXT.id) {\n        phi = fontMetrics.metrics.xHeight;\n    }\n\n    // Calculate the clearance between the body and line\n    var lineClearance = ruleWidth + phi / 4;\n\n    var innerHeight =\n        (inner.height + inner.depth) * options.style.sizeMultiplier;\n    var minDelimiterHeight = innerHeight + lineClearance + ruleWidth;\n\n    // Create a \\surd delimiter of the required minimum size\n    var delim = makeSpan([\"sqrt-sign\"], [\n        delimiter.customSizedDelim(\"\\\\surd\", minDelimiterHeight,\n                                   false, options, group.mode)],\n                         options.getColor());\n\n    var delimDepth = (delim.height + delim.depth) - ruleWidth;\n\n    // Adjust the clearance based on the delimiter size\n    if (delimDepth > inner.height + inner.depth + lineClearance) {\n        lineClearance =\n            (lineClearance + delimDepth - inner.height - inner.depth) / 2;\n    }\n\n    // Shift the delimiter so that its top lines up with the top of the line\n    var delimShift = -(inner.height + lineClearance + ruleWidth) + delim.height;\n    delim.style.top = delimShift + \"em\";\n    delim.height -= delimShift;\n    delim.depth += delimShift;\n\n    // We add a special case here, because even when `inner` is empty, we\n    // still get a line. So, we use a simple heuristic to decide if we\n    // should omit the body entirely. (note this doesn't work for something\n    // like `\\sqrt{\\rlap{x}}`, but if someone is doing that they deserve for\n    // it not to work.\n    var body;\n    if (inner.height === 0 && inner.depth === 0) {\n        body = makeSpan();\n    } else {\n        body = buildCommon.makeVList([\n            {type: \"elem\", elem: inner},\n            {type: \"kern\", size: lineClearance},\n            {type: \"elem\", elem: line},\n            {type: \"kern\", size: ruleWidth},\n        ], \"firstBaseline\", null, options);\n    }\n\n    if (!group.value.index) {\n        return makeSpan([\"sqrt\", \"mord\"], [delim, body]);\n    } else {\n        // Handle the optional root index\n\n        // The index is always in scriptscript style\n        var root = buildGroup(\n            group.value.index,\n            options.withStyle(Style.SCRIPTSCRIPT));\n        var rootWrap = makeSpan(\n            [options.style.reset(), Style.SCRIPTSCRIPT.cls()],\n            [root]);\n\n        // Figure out the height and depth of the inner part\n        var innerRootHeight = Math.max(delim.height, body.height);\n        var innerRootDepth = Math.max(delim.depth, body.depth);\n\n        // The amount the index is shifted by. This is taken from the TeX\n        // source, in the definition of `\\r@@t`.\n        var toShift = 0.6 * (innerRootHeight - innerRootDepth);\n\n        // Build a VList with the superscript shifted up correctly\n        var rootVList = buildCommon.makeVList(\n            [{type: \"elem\", elem: rootWrap}],\n            \"shift\", -toShift, options);\n        // Add a class surrounding it so we can add on the appropriate\n        // kerning\n        var rootVListWrap = makeSpan([\"root\"], [rootVList]);\n\n        return makeSpan([\"sqrt\", \"mord\"], [rootVListWrap, delim, body]);\n    }\n};\n\ngroupTypes.sizing = function(group, options, prev) {\n    // Handle sizing operators like \\Huge. Real TeX doesn't actually allow\n    // these functions inside of math expressions, so we do some special\n    // handling.\n    var inner = buildExpression(group.value.value,\n            options.withSize(group.value.size), prev);\n\n    var span = makeSpan([\"mord\"],\n        [makeSpan([\"sizing\", \"reset-\" + options.size, group.value.size,\n                   options.style.cls()],\n                  inner)]);\n\n    // Calculate the correct maxFontSize manually\n    var fontSize = buildCommon.sizingMultiplier[group.value.size];\n    span.maxFontSize = fontSize * options.style.sizeMultiplier;\n\n    return span;\n};\n\ngroupTypes.styling = function(group, options, prev) {\n    // Style changes are handled in the TeXbook on pg. 442, Rule 3.\n\n    // Figure out what style we're changing to.\n    var style = {\n        \"display\": Style.DISPLAY,\n        \"text\": Style.TEXT,\n        \"script\": Style.SCRIPT,\n        \"scriptscript\": Style.SCRIPTSCRIPT,\n    };\n\n    var newStyle = style[group.value.style];\n\n    // Build the inner expression in the new style.\n    var inner = buildExpression(\n        group.value.value, options.withStyle(newStyle), prev);\n\n    return makeSpan([options.style.reset(), newStyle.cls()], inner);\n};\n\ngroupTypes.font = function(group, options, prev) {\n    var font = group.value.font;\n    return buildGroup(group.value.body, options.withFont(font), prev);\n};\n\ngroupTypes.delimsizing = function(group, options, prev) {\n    var delim = group.value.value;\n\n    if (delim === \".\") {\n        // Empty delimiters still count as elements, even though they don't\n        // show anything.\n        return makeSpan([groupToType[group.value.delimType]]);\n    }\n\n    // Use delimiter.sizedDelim to generate the delimiter.\n    return makeSpan(\n        [groupToType[group.value.delimType]],\n        [delimiter.sizedDelim(\n            delim, group.value.size, options, group.mode)]);\n};\n\ngroupTypes.leftright = function(group, options, prev) {\n    // Build the inner expression\n    var inner = buildExpression(group.value.body, options.reset());\n\n    var innerHeight = 0;\n    var innerDepth = 0;\n\n    // Calculate its height and depth\n    for (var i = 0; i < inner.length; i++) {\n        innerHeight = Math.max(inner[i].height, innerHeight);\n        innerDepth = Math.max(inner[i].depth, innerDepth);\n    }\n\n    // The size of delimiters is the same, regardless of what style we are\n    // in. Thus, to correctly calculate the size of delimiter we need around\n    // a group, we scale down the inner size based on the size.\n    innerHeight *= options.style.sizeMultiplier;\n    innerDepth *= options.style.sizeMultiplier;\n\n    var leftDelim;\n    if (group.value.left === \".\") {\n        // Empty delimiters in \\left and \\right make null delimiter spaces.\n        leftDelim = makeNullDelimiter(options);\n    } else {\n        // Otherwise, use leftRightDelim to generate the correct sized\n        // delimiter.\n        leftDelim = delimiter.leftRightDelim(\n            group.value.left, innerHeight, innerDepth, options,\n            group.mode);\n    }\n    // Add it to the beginning of the expression\n    inner.unshift(leftDelim);\n\n    var rightDelim;\n    // Same for the right delimiter\n    if (group.value.right === \".\") {\n        rightDelim = makeNullDelimiter(options);\n    } else {\n        rightDelim = delimiter.leftRightDelim(\n            group.value.right, innerHeight, innerDepth, options,\n            group.mode);\n    }\n    // Add it to the end of the expression.\n    inner.push(rightDelim);\n\n    return makeSpan(\n        [\"minner\", options.style.cls()], inner, options.getColor());\n};\n\ngroupTypes.rule = function(group, options, prev) {\n    // Make an empty span for the rule\n    var rule = makeSpan([\"mord\", \"rule\"], [], options.getColor());\n\n    // Calculate the shift, width, and height of the rule, and account for units\n    var shift = 0;\n    if (group.value.shift) {\n        shift = group.value.shift.number;\n        if (group.value.shift.unit === \"ex\") {\n            shift *= fontMetrics.metrics.xHeight;\n        }\n    }\n\n    var width = group.value.width.number;\n    if (group.value.width.unit === \"ex\") {\n        width *= fontMetrics.metrics.xHeight;\n    }\n\n    var height = group.value.height.number;\n    if (group.value.height.unit === \"ex\") {\n        height *= fontMetrics.metrics.xHeight;\n    }\n\n    // The sizes of rules are absolute, so make it larger if we are in a\n    // smaller style.\n    shift /= options.style.sizeMultiplier;\n    width /= options.style.sizeMultiplier;\n    height /= options.style.sizeMultiplier;\n\n    // Style the rule to the right size\n    rule.style.borderRightWidth = width + \"em\";\n    rule.style.borderTopWidth = height + \"em\";\n    rule.style.bottom = shift + \"em\";\n\n    // Record the height and width\n    rule.width = width;\n    rule.height = height + shift;\n    rule.depth = -shift;\n\n    return rule;\n};\n\ngroupTypes.accent = function(group, options, prev) {\n    // Accents are handled in the TeXbook pg. 443, rule 12.\n    var base = group.value.base;\n\n    var supsubGroup;\n    if (group.type === \"supsub\") {\n        // If our base is a character box, and we have superscripts and\n        // subscripts, the supsub will defer to us. In particular, we want\n        // to attach the superscripts and subscripts to the inner body (so\n        // that the position of the superscripts and subscripts won't be\n        // affected by the height of the accent). We accomplish this by\n        // sticking the base of the accent into the base of the supsub, and\n        // rendering that, while keeping track of where the accent is.\n\n        // The supsub group is the group that was passed in\n        var supsub = group;\n        // The real accent group is the base of the supsub group\n        group = supsub.value.base;\n        // The character box is the base of the accent group\n        base = group.value.base;\n        // Stick the character box into the base of the supsub group\n        supsub.value.base = base;\n\n        // Rerender the supsub group with its new base, and store that\n        // result.\n        supsubGroup = buildGroup(\n            supsub, options.reset(), prev);\n    }\n\n    // Build the base group\n    var body = buildGroup(\n        base, options.withStyle(options.style.cramp()));\n\n    // Calculate the skew of the accent. This is based on the line \"If the\n    // nucleus is not a single character, let s = 0; otherwise set s to the\n    // kern amount for the nucleus followed by the \\skewchar of its font.\"\n    // Note that our skew metrics are just the kern between each character\n    // and the skewchar.\n    var skew;\n    if (isCharacterBox(base)) {\n        // If the base is a character box, then we want the skew of the\n        // innermost character. To do that, we find the innermost character:\n        var baseChar = getBaseElem(base);\n        // Then, we render its group to get the symbol inside it\n        var baseGroup = buildGroup(\n            baseChar, options.withStyle(options.style.cramp()));\n        // Finally, we pull the skew off of the symbol.\n        skew = baseGroup.skew;\n        // Note that we now throw away baseGroup, because the layers we\n        // removed with getBaseElem might contain things like \\color which\n        // we can't get rid of.\n        // TODO(emily): Find a better way to get the skew\n    } else {\n        skew = 0;\n    }\n\n    // calculate the amount of space between the body and the accent\n    var clearance = Math.min(body.height, fontMetrics.metrics.xHeight);\n\n    // Build the accent\n    var accent = buildCommon.makeSymbol(\n        group.value.accent, \"Main-Regular\", \"math\", options.getColor());\n    // Remove the italic correction of the accent, because it only serves to\n    // shift the accent over to a place we don't want.\n    accent.italic = 0;\n\n    // The \\vec character that the fonts use is a combining character, and\n    // thus shows up much too far to the left. To account for this, we add a\n    // specific class which shifts the accent over to where we want it.\n    // TODO(emily): Fix this in a better way, like by changing the font\n    var vecClass = group.value.accent === \"\\\\vec\" ? \"accent-vec\" : null;\n\n    var accentBody = makeSpan([\"accent-body\", vecClass], [\n        makeSpan([], [accent])]);\n\n    accentBody = buildCommon.makeVList([\n        {type: \"elem\", elem: body},\n        {type: \"kern\", size: -clearance},\n        {type: \"elem\", elem: accentBody},\n    ], \"firstBaseline\", null, options);\n\n    // Shift the accent over by the skew. Note we shift by twice the skew\n    // because we are centering the accent, so by adding 2*skew to the left,\n    // we shift it to the right by 1*skew.\n    accentBody.children[1].style.marginLeft = 2 * skew + \"em\";\n\n    var accentWrap = makeSpan([\"mord\", \"accent\"], [accentBody]);\n\n    if (supsubGroup) {\n        // Here, we replace the \"base\" child of the supsub with our newly\n        // generated accent.\n        supsubGroup.children[0] = accentWrap;\n\n        // Since we don't rerun the height calculation after replacing the\n        // accent, we manually recalculate height.\n        supsubGroup.height = Math.max(accentWrap.height, supsubGroup.height);\n\n        // Accents should always be ords, even when their innards are not.\n        supsubGroup.classes[0] = \"mord\";\n\n        return supsubGroup;\n    } else {\n        return accentWrap;\n    }\n};\n\ngroupTypes.phantom = function(group, options, prev) {\n    var elements = buildExpression(\n        group.value.value,\n        options.withPhantom(),\n        prev\n    );\n\n    // \\phantom isn't supposed to affect the elements it contains.\n    // See \"color\" for more details.\n    return new buildCommon.makeFragment(elements);\n};\n\n/**\n * buildGroup is the function that takes a group and calls the correct groupType\n * function for it. It also handles the interaction of size and style changes\n * between parents and children.\n */\nvar buildGroup = function(group, options, prev) {\n    if (!group) {\n        return makeSpan();\n    }\n\n    if (groupTypes[group.type]) {\n        // Call the groupTypes function\n        var groupNode = groupTypes[group.type](group, options, prev);\n        var multiplier;\n\n        // If the style changed between the parent and the current group,\n        // account for the size difference\n        if (options.style !== options.parentStyle) {\n            multiplier = options.style.sizeMultiplier /\n                    options.parentStyle.sizeMultiplier;\n\n            groupNode.height *= multiplier;\n            groupNode.depth *= multiplier;\n        }\n\n        // If the size changed between the parent and the current group, account\n        // for that size difference.\n        if (options.size !== options.parentSize) {\n            multiplier = buildCommon.sizingMultiplier[options.size] /\n                    buildCommon.sizingMultiplier[options.parentSize];\n\n            groupNode.height *= multiplier;\n            groupNode.depth *= multiplier;\n        }\n\n        return groupNode;\n    } else {\n        throw new ParseError(\n            \"Got group of unknown type: '\" + group.type + \"'\");\n    }\n};\n\n/**\n * Take an entire parse tree, and build it into an appropriate set of HTML\n * nodes.\n */\nvar buildHTML = function(tree, options) {\n    // buildExpression is destructive, so we need to make a clone\n    // of the incoming tree so that it isn't accidentally changed\n    tree = JSON.parse(JSON.stringify(tree));\n\n    // Build the expression contained in the tree\n    var expression = buildExpression(tree, options);\n    var body = makeSpan([\"base\", options.style.cls()], expression);\n\n    // Add struts, which ensure that the top of the HTML element falls at the\n    // height of the expression, and the bottom of the HTML element falls at the\n    // depth of the expression.\n    var topStrut = makeSpan([\"strut\"]);\n    var bottomStrut = makeSpan([\"strut\", \"bottom\"]);\n\n    topStrut.style.height = body.height + \"em\";\n    bottomStrut.style.height = (body.height + body.depth) + \"em\";\n    // We'd like to use `vertical-align: top` but in IE 9 this lowers the\n    // baseline of the box to the bottom of this strut (instead staying in the\n    // normal place) so we use an absolute value for vertical-align instead\n    bottomStrut.style.verticalAlign = -body.depth + \"em\";\n\n    // Wrap the struts and body together\n    var htmlNode = makeSpan([\"katex-html\"], [topStrut, bottomStrut, body]);\n\n    htmlNode.setAttribute(\"aria-hidden\", \"true\");\n\n    return htmlNode;\n};\n\nmodule.exports = buildHTML;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE9B,IAAIE,WAAW,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAa,CAAC;AACtC,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIK,WAAW,GAAGL,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAIM,KAAK,GAAGN,OAAO,CAAC,SAAS,CAAC;AAE9B,IAAIO,QAAQ,GAAGL,WAAW,CAACK,QAAQ;;AAEnC;AACA;AACA;AACA;AACA;AACA,IAAIC,eAAe,GAAG,SAAAA,CAASC,UAAU,EAAEC,OAAO,EAAEC,IAAI,EAAE;EACtD,IAAIC,MAAM,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACxC,IAAIE,KAAK,GAAGN,UAAU,CAACI,CAAC,CAAC;IACzBD,MAAM,CAACI,IAAI,CAACC,UAAU,CAACF,KAAK,EAAEL,OAAO,EAAEC,IAAI,CAAC,CAAC;IAC7CA,IAAI,GAAGI,KAAK;EAChB;EACA,OAAOH,MAAM;AACjB,CAAC;;AAED;AACA;AACA,IAAIM,WAAW,GAAG;EACdC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,MAAM;EACfC,GAAG,EAAE,MAAM;EACXC,GAAG,EAAE,MAAM;EACXC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,MAAM;EACfC,KAAK,EAAE,MAAM;EACbC,OAAO,EAAE,MAAM;EACfC,KAAK,EAAE,QAAQ;EACfC,QAAQ,EAAE,MAAM;EAChBC,EAAE,EAAE,KAAK;EACTC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,MAAM;EAChBC,SAAS,EAAE,MAAM;EACjBC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE,QAAQ;EACnBC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG,SAAAA,CAASzB,KAAK,EAAE;EACjC,IAAIA,KAAK,IAAI,IAAI,EAAE;IACf;IACA,OAAOG,WAAW,CAACC,OAAO;EAC9B,CAAC,MAAM,IAAIJ,KAAK,CAAC0B,IAAI,KAAK,QAAQ,EAAE;IAChC,OAAOD,cAAc,CAACzB,KAAK,CAAC2B,KAAK,CAACC,IAAI,CAAC;EAC3C,CAAC,MAAM,IAAI5B,KAAK,CAAC0B,IAAI,KAAK,MAAM,IAAI1B,KAAK,CAAC0B,IAAI,KAAK,MAAM,EAAE;IACvD,OAAOD,cAAc,CAACzB,KAAK,CAAC2B,KAAK,CAAC;EACtC,CAAC,MAAM,IAAI3B,KAAK,CAAC0B,IAAI,KAAK,OAAO,EAAE;IAC/B,OAAOD,cAAc,CAACzB,KAAK,CAAC2B,KAAK,CAACA,KAAK,CAAC;EAC5C,CAAC,MAAM,IAAI3B,KAAK,CAAC0B,IAAI,KAAK,QAAQ,EAAE;IAChC,OAAOD,cAAc,CAACzB,KAAK,CAAC2B,KAAK,CAACA,KAAK,CAAC;EAC5C,CAAC,MAAM,IAAI3B,KAAK,CAAC0B,IAAI,KAAK,SAAS,EAAE;IACjC,OAAOD,cAAc,CAACzB,KAAK,CAAC2B,KAAK,CAACA,KAAK,CAAC;EAC5C,CAAC,MAAM,IAAI3B,KAAK,CAAC0B,IAAI,KAAK,aAAa,EAAE;IACrC,OAAOvB,WAAW,CAACH,KAAK,CAAC2B,KAAK,CAACE,SAAS,CAAC;EAC7C,CAAC,MAAM;IACH,OAAO1B,WAAW,CAACH,KAAK,CAAC0B,IAAI,CAAC;EAClC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,IAAII,kBAAkB,GAAG,SAAAA,CAAS9B,KAAK,EAAEL,OAAO,EAAE;EAC9C,IAAI,CAACK,KAAK,EAAE;IACR,OAAO,KAAK;EAChB,CAAC,MAAM,IAAIA,KAAK,CAAC0B,IAAI,KAAK,IAAI,EAAE;IAC5B;IACA;IACA,OAAO1B,KAAK,CAAC2B,KAAK,CAACI,MAAM,KACpBpC,OAAO,CAACqC,KAAK,CAACC,IAAI,KAAK/C,KAAK,CAACgD,OAAO,CAACD,IAAI,IAC1CjC,KAAK,CAAC2B,KAAK,CAACQ,kBAAkB,CAAC;EACvC,CAAC,MAAM,IAAInC,KAAK,CAAC0B,IAAI,KAAK,QAAQ,EAAE;IAChC,OAAOU,cAAc,CAACpC,KAAK,CAAC2B,KAAK,CAACC,IAAI,CAAC;EAC3C,CAAC,MAAM;IACH,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,IAAIS,WAAW,GAAG,SAAAA,CAASrC,KAAK,EAAE;EAC9B,IAAI,CAACA,KAAK,EAAE;IACR,OAAO,KAAK;EAChB,CAAC,MAAM,IAAIA,KAAK,CAAC0B,IAAI,KAAK,UAAU,EAAE;IAClC,IAAI1B,KAAK,CAAC2B,KAAK,CAAC5B,MAAM,KAAK,CAAC,EAAE;MAC1B,OAAOsC,WAAW,CAACrC,KAAK,CAAC2B,KAAK,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,MAAM;MACH,OAAO3B,KAAK;IAChB;EACJ,CAAC,MAAM,IAAIA,KAAK,CAAC0B,IAAI,KAAK,OAAO,EAAE;IAC/B,IAAI1B,KAAK,CAAC2B,KAAK,CAACA,KAAK,CAAC5B,MAAM,KAAK,CAAC,EAAE;MAChC,OAAOsC,WAAW,CAACrC,KAAK,CAAC2B,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC,MAAM;MACH,OAAO3B,KAAK;IAChB;EACJ,CAAC,MAAM;IACH,OAAOA,KAAK;EAChB;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,IAAIoC,cAAc,GAAG,SAAAA,CAASpC,KAAK,EAAE;EACjC,IAAIsC,QAAQ,GAAGD,WAAW,CAACrC,KAAK,CAAC;;EAEjC;EACA,OAAOsC,QAAQ,CAACZ,IAAI,KAAK,SAAS,IAC9BY,QAAQ,CAACZ,IAAI,KAAK,SAAS,IAC3BY,QAAQ,CAACZ,IAAI,KAAK,KAAK,IACvBY,QAAQ,CAACZ,IAAI,KAAK,KAAK,IACvBY,QAAQ,CAACZ,IAAI,KAAK,OAAO,IACzBY,QAAQ,CAACZ,IAAI,KAAK,MAAM,IACxBY,QAAQ,CAACZ,IAAI,KAAK,OAAO,IACzBY,QAAQ,CAACZ,IAAI,KAAK,OAAO;AACjC,CAAC;AAED,IAAIa,iBAAiB,GAAG,SAAAA,CAAS5C,OAAO,EAAE;EACtC,OAAOH,QAAQ,CAAC,CACZ,QAAQ,EAAE,QAAQ,GAAGG,OAAO,CAACsC,IAAI,EAAE,OAAO,EAC1CtC,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAEtD,KAAK,CAACuD,IAAI,CAACC,GAAG,EAAE,EACvC,eAAe,CAClB,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,CAAC,CAAC;AAEnBA,UAAU,CAACvC,OAAO,GAAG,UAASJ,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAChD,OAAOT,WAAW,CAACyD,OAAO,CAAC5C,KAAK,EAAEL,OAAO,EAAE,SAAS,CAAC;AACzD,CAAC;AAEDgD,UAAU,CAACtC,OAAO,GAAG,UAASL,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAChD,OAAOT,WAAW,CAACyD,OAAO,CAAC5C,KAAK,EAAEL,OAAO,EAAE,SAAS,CAAC;AACzD,CAAC;AAEDgD,UAAU,CAACrC,GAAG,GAAG,UAASN,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC5C,IAAIiD,SAAS,GAAG,MAAM;EACtB;EACA;EACA;EACA,IAAIC,QAAQ,GAAGlD,IAAI;EACnB,OAAOkD,QAAQ,IAAIA,QAAQ,CAACpB,IAAI,KAAK,OAAO,EAAE;IAC1C,IAAIqB,KAAK,GAAGD,QAAQ,CAACnB,KAAK,CAACA,KAAK;IAChCmB,QAAQ,GAAGC,KAAK,CAACA,KAAK,CAAChD,MAAM,GAAG,CAAC,CAAC;EACtC;EACA;EACA;EACA;EACA,IAAI,CAACH,IAAI,IAAIL,KAAK,CAACyD,QAAQ,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,EAC9DvB,cAAc,CAACqB,QAAQ,CAAC,CAAC,EAAE;IAC/B9C,KAAK,CAAC0B,IAAI,GAAG,SAAS;IACtBmB,SAAS,GAAG,MAAM;EACtB;EAEA,OAAO1D,WAAW,CAAC8D,OAAO,CACtBjD,KAAK,CAAC2B,KAAK,EAAE3B,KAAK,CAACkD,IAAI,EAAEvD,OAAO,CAACwD,QAAQ,EAAE,EAAE,CAACN,SAAS,CAAC,CAAC;AACjE,CAAC;AAEDF,UAAU,CAACpC,GAAG,GAAG,UAASP,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC5C,OAAOT,WAAW,CAAC8D,OAAO,CACtBjD,KAAK,CAAC2B,KAAK,EAAE3B,KAAK,CAACkD,IAAI,EAAEvD,OAAO,CAACwD,QAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;AAC9D,CAAC;AAEDR,UAAU,CAAClC,IAAI,GAAG,UAAST,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC7C,OAAOT,WAAW,CAAC8D,OAAO,CACtBjD,KAAK,CAAC2B,KAAK,EAAE3B,KAAK,CAACkD,IAAI,EAAEvD,OAAO,CAACwD,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;AAC/D,CAAC;AAEDR,UAAU,CAACjC,KAAK,GAAG,UAASV,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC9C,OAAOT,WAAW,CAAC8D,OAAO,CACtBjD,KAAK,CAAC2B,KAAK,EAAE3B,KAAK,CAACkD,IAAI,EAAEvD,OAAO,CAACwD,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;AAChE,CAAC;AAEDR,UAAU,CAAChC,KAAK,GAAG,UAASX,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC9C,OAAOT,WAAW,CAAC8D,OAAO,CACtBjD,KAAK,CAAC2B,KAAK,EAAE3B,KAAK,CAACkD,IAAI,EAAEvD,OAAO,CAACwD,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;AAChE,CAAC;AAEDR,UAAU,CAAC5B,KAAK,GAAG,UAASf,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC9C,OAAOT,WAAW,CAAC8D,OAAO,CACtBjD,KAAK,CAAC2B,KAAK,EAAE3B,KAAK,CAACkD,IAAI,EAAEvD,OAAO,CAACwD,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;AAChE,CAAC;AAEDR,UAAU,CAAC3B,QAAQ,GAAG,UAAShB,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EACjD,OAAOJ,QAAQ,CACX,CAAC,MAAM,EAAEG,OAAO,CAACqC,KAAK,CAACU,GAAG,EAAE,CAAC,EAC7BjD,eAAe,CAACO,KAAK,CAAC2B,KAAK,EAAEhC,OAAO,CAAC6C,KAAK,EAAE,CAAC,CAChD;AACL,CAAC;AAEDG,UAAU,CAACnC,IAAI,GAAG,UAASR,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC7C,OAAOJ,QAAQ,CAAC,CAAC,MAAM,EAAE,MAAM,EAAEG,OAAO,CAACqC,KAAK,CAACU,GAAG,EAAE,CAAC,EACjDjD,eAAe,CAACO,KAAK,CAAC2B,KAAK,CAACyB,IAAI,EAAEzD,OAAO,CAAC6C,KAAK,EAAE,CAAC,CAAC;AAC3D,CAAC;AAEDG,UAAU,CAACU,KAAK,GAAG,UAASrD,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC9C,IAAI0D,QAAQ,GAAG7D,eAAe,CAC1BO,KAAK,CAAC2B,KAAK,CAACA,KAAK,EACjBhC,OAAO,CAAC4D,SAAS,CAACvD,KAAK,CAAC2B,KAAK,CAAC0B,KAAK,CAAC,EACpCzD,IAAI,CACP;;EAED;EACA;EACA;EACA;EACA,OAAO,IAAIT,WAAW,CAACqE,YAAY,CAACF,QAAQ,CAAC;AACjD,CAAC;AAEDX,UAAU,CAACc,MAAM,GAAG,UAASzD,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC/C;EACA;;EAEA;EACA;EACA,IAAIkC,kBAAkB,CAAC9B,KAAK,CAAC2B,KAAK,CAACC,IAAI,EAAEjC,OAAO,CAAC,EAAE;IAC/C,OAAOgD,UAAU,CAAC3C,KAAK,CAAC2B,KAAK,CAACC,IAAI,CAACF,IAAI,CAAC,CAAC1B,KAAK,EAAEL,OAAO,EAAEC,IAAI,CAAC;EAClE;EAEA,IAAIgC,IAAI,GAAG1B,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACC,IAAI,EAAEjC,OAAO,CAAC6C,KAAK,EAAE,CAAC;EACxD,IAAIkB,MAAM;EACV,IAAIC,MAAM;EACV,IAAIC,GAAG;EACP,IAAIC,GAAG;EAEP,IAAI7D,KAAK,CAAC2B,KAAK,CAACiC,GAAG,EAAE;IACjBA,GAAG,GAAG1D,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACiC,GAAG,EACxBjE,OAAO,CAACmE,SAAS,CAACnE,OAAO,CAACqC,KAAK,CAAC4B,GAAG,EAAE,CAAC,CAAC;IAC/CF,MAAM,GAAGlE,QAAQ,CACT,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAE7C,OAAO,CAACqC,KAAK,CAAC4B,GAAG,EAAE,CAAClB,GAAG,EAAE,CAAC,EAAE,CAACkB,GAAG,CAAC,CAAC;EACtE;EAEA,IAAI5D,KAAK,CAAC2B,KAAK,CAACkC,GAAG,EAAE;IACjBA,GAAG,GAAG3D,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACkC,GAAG,EACxBlE,OAAO,CAACmE,SAAS,CAACnE,OAAO,CAACqC,KAAK,CAAC6B,GAAG,EAAE,CAAC,CAAC;IAC/CF,MAAM,GAAGnE,QAAQ,CACT,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAE7C,OAAO,CAACqC,KAAK,CAAC6B,GAAG,EAAE,CAACnB,GAAG,EAAE,CAAC,EAAE,CAACmB,GAAG,CAAC,CAAC;EACtE;;EAEA;EACA,IAAIE,QAAQ;EACZ,IAAIC,QAAQ;EACZ,IAAI5B,cAAc,CAACpC,KAAK,CAAC2B,KAAK,CAACC,IAAI,CAAC,EAAE;IAClCmC,QAAQ,GAAG,CAAC;IACZC,QAAQ,GAAG,CAAC;EAChB,CAAC,MAAM;IACHD,QAAQ,GAAGnC,IAAI,CAACqC,MAAM,GAAG3E,WAAW,CAAC4E,OAAO,CAACC,OAAO;IACpDH,QAAQ,GAAGpC,IAAI,CAACwC,KAAK,GAAG9E,WAAW,CAAC4E,OAAO,CAACG,OAAO;EACvD;;EAEA;EACA,IAAIC,WAAW;EACf,IAAI3E,OAAO,CAACqC,KAAK,KAAK9C,KAAK,CAACgD,OAAO,EAAE;IACjCoC,WAAW,GAAGhF,WAAW,CAAC4E,OAAO,CAACK,IAAI;EAC1C,CAAC,MAAM,IAAI5E,OAAO,CAACqC,KAAK,CAACwC,OAAO,EAAE;IAC9BF,WAAW,GAAGhF,WAAW,CAAC4E,OAAO,CAACO,IAAI;EAC1C,CAAC,MAAM;IACHH,WAAW,GAAGhF,WAAW,CAAC4E,OAAO,CAACQ,IAAI;EAC1C;;EAEA;EACA;EACA,IAAIC,UAAU,GAAGzF,KAAK,CAACuD,IAAI,CAACmC,cAAc,GAClCjF,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EACpC,IAAIC,WAAW,GACV,GAAG,GAAGvF,WAAW,CAAC4E,OAAO,CAACY,OAAO,GAAIH,UAAU,GAAG,IAAI;EAE3D,IAAIlB,MAAM;EACV,IAAI,CAACzD,KAAK,CAAC2B,KAAK,CAACiC,GAAG,EAAE;IAClB;IACAI,QAAQ,GAAGe,IAAI,CAACC,GAAG,CACfhB,QAAQ,EAAE1E,WAAW,CAAC4E,OAAO,CAACe,IAAI,EAClCpB,GAAG,CAACI,MAAM,GAAG,GAAG,GAAG3E,WAAW,CAAC4E,OAAO,CAACgB,OAAO,CAAC;IAEnDzB,MAAM,GAAGtE,WAAW,CAACgG,SAAS,CAAC,CAC3B;MAACzD,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEzB;IAAM,CAAC,CAC/B,EAAE,OAAO,EAAEK,QAAQ,EAAErE,OAAO,CAAC;IAE9B8D,MAAM,CAAC4B,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACsD,WAAW,GAAGT,WAAW;;IAElD;IACA;IACA;IACA,IAAIjD,IAAI,YAAYvC,OAAO,CAACkG,UAAU,EAAE;MACpC9B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACwD,UAAU,GAAG,CAAC5D,IAAI,CAAC6D,MAAM,GAAG,IAAI;IAC7D;EACJ,CAAC,MAAM,IAAI,CAACzF,KAAK,CAAC2B,KAAK,CAACkC,GAAG,EAAE;IACzB;IACAE,QAAQ,GAAGgB,IAAI,CAACC,GAAG,CAACjB,QAAQ,EAAEO,WAAW,EACrCV,GAAG,CAACQ,KAAK,GAAG,IAAI,GAAG9E,WAAW,CAAC4E,OAAO,CAACgB,OAAO,CAAC;IAEnDzB,MAAM,GAAGtE,WAAW,CAACgG,SAAS,CAAC,CAC3B;MAACzD,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAE1B;IAAM,CAAC,CAC/B,EAAE,OAAO,EAAE,CAACK,QAAQ,EAAEpE,OAAO,CAAC;IAE/B8D,MAAM,CAAC4B,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACsD,WAAW,GAAGT,WAAW;EACtD,CAAC,MAAM;IACHd,QAAQ,GAAGgB,IAAI,CAACC,GAAG,CACfjB,QAAQ,EAAEO,WAAW,EACrBV,GAAG,CAACQ,KAAK,GAAG,IAAI,GAAG9E,WAAW,CAAC4E,OAAO,CAACgB,OAAO,CAAC;IACnDlB,QAAQ,GAAGe,IAAI,CAACC,GAAG,CAAChB,QAAQ,EAAE1E,WAAW,CAAC4E,OAAO,CAACwB,IAAI,CAAC;IAEvD,IAAIC,SAAS,GAAGrG,WAAW,CAAC4E,OAAO,CAAC0B,oBAAoB;;IAExD;IACA,IAAK7B,QAAQ,GAAGH,GAAG,CAACQ,KAAK,IAAKP,GAAG,CAACI,MAAM,GAAGD,QAAQ,CAAC,GAC5C,CAAC,GAAG2B,SAAS,EAAE;MACnB3B,QAAQ,GAAG,CAAC,GAAG2B,SAAS,IAAI5B,QAAQ,GAAGH,GAAG,CAACQ,KAAK,CAAC,GAAGP,GAAG,CAACI,MAAM;MAC9D,IAAI4B,GAAG,GAAG,GAAG,GAAGvG,WAAW,CAAC4E,OAAO,CAACgB,OAAO,IACtCnB,QAAQ,GAAGH,GAAG,CAACQ,KAAK,CAAC;MAC1B,IAAIyB,GAAG,GAAG,CAAC,EAAE;QACT9B,QAAQ,IAAI8B,GAAG;QACf7B,QAAQ,IAAI6B,GAAG;MACnB;IACJ;IAEApC,MAAM,GAAGtE,WAAW,CAACgG,SAAS,CAAC,CAC3B;MAACzD,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEzB,MAAM;MAAEmC,KAAK,EAAE9B;IAAQ,CAAC,EAC7C;MAACtC,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAE1B,MAAM;MAAEoC,KAAK,EAAE,CAAC/B;IAAQ,CAAC,CACjD,EAAE,iBAAiB,EAAE,IAAI,EAAEpE,OAAO,CAAC;;IAEpC;IACA,IAAIiC,IAAI,YAAYvC,OAAO,CAACkG,UAAU,EAAE;MACpC9B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACwD,UAAU,GAAG,CAAC5D,IAAI,CAAC6D,MAAM,GAAG,IAAI;IAC7D;IAEAhC,MAAM,CAAC4B,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACsD,WAAW,GAAGT,WAAW;IAClDpB,MAAM,CAAC4B,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACsD,WAAW,GAAGT,WAAW;EACtD;EAEA,OAAOrF,QAAQ,CAAC,CAACiC,cAAc,CAACzB,KAAK,CAAC2B,KAAK,CAACC,IAAI,CAAC,CAAC,EAC9C,CAACA,IAAI,EAAE6B,MAAM,CAAC,CAAC;AACvB,CAAC;AAEDd,UAAU,CAAC/B,OAAO,GAAG,UAASZ,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAChD;EACA;EACA;EACA,IAAImG,MAAM,GAAGpG,OAAO,CAACqC,KAAK;EAC1B,IAAIhC,KAAK,CAAC2B,KAAK,CAACM,IAAI,KAAK,SAAS,EAAE;IAChC8D,MAAM,GAAG7G,KAAK,CAACgD,OAAO;EAC1B,CAAC,MAAM,IAAIlC,KAAK,CAAC2B,KAAK,CAACM,IAAI,KAAK,MAAM,EAAE;IACpC8D,MAAM,GAAG7G,KAAK,CAACuD,IAAI;EACvB;EAEA,IAAIuD,MAAM,GAAGD,MAAM,CAACE,OAAO,EAAE;EAC7B,IAAIC,MAAM,GAAGH,MAAM,CAACI,OAAO,EAAE;EAE7B,IAAIC,KAAK,GAAGlG,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACyE,KAAK,EAAEzG,OAAO,CAACmE,SAAS,CAACkC,MAAM,CAAC,CAAC;EACpE,IAAIK,UAAU,GAAG7G,QAAQ,CAAC,CAACuG,MAAM,CAACvD,KAAK,EAAE,EAAEwD,MAAM,CAACtD,GAAG,EAAE,CAAC,EAAE,CAAC0D,KAAK,CAAC,CAAC;EAElE,IAAIE,KAAK,GAAGpG,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAAC2E,KAAK,EAAE3G,OAAO,CAACmE,SAAS,CAACoC,MAAM,CAAC,CAAC;EACpE,IAAIK,UAAU,GAAG/G,QAAQ,CAAC,CAACuG,MAAM,CAACvD,KAAK,EAAE,EAAE0D,MAAM,CAACxD,GAAG,EAAE,CAAC,EAAE,CAAC4D,KAAK,CAAC,CAAC;EAElE,IAAIX,SAAS;EACb,IAAI3F,KAAK,CAAC2B,KAAK,CAAC6E,UAAU,EAAE;IACxBb,SAAS,GAAGrG,WAAW,CAAC4E,OAAO,CAAC0B,oBAAoB,GAChDjG,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EACpC,CAAC,MAAM;IACHe,SAAS,GAAG,CAAC;EACjB;;EAEA;EACA,IAAIc,QAAQ;EACZ,IAAIC,SAAS;EACb,IAAIC,UAAU;EACd,IAAIZ,MAAM,CAAC9D,IAAI,KAAK/C,KAAK,CAACgD,OAAO,CAACD,IAAI,EAAE;IACpCwE,QAAQ,GAAGnH,WAAW,CAAC4E,OAAO,CAAC0C,IAAI;IACnC,IAAIjB,SAAS,GAAG,CAAC,EAAE;MACfe,SAAS,GAAG,CAAC,GAAGf,SAAS;IAC7B,CAAC,MAAM;MACHe,SAAS,GAAG,CAAC,GAAGpH,WAAW,CAAC4E,OAAO,CAAC0B,oBAAoB;IAC5D;IACAe,UAAU,GAAGrH,WAAW,CAAC4E,OAAO,CAAC2C,MAAM;EAC3C,CAAC,MAAM;IACH,IAAIlB,SAAS,GAAG,CAAC,EAAE;MACfc,QAAQ,GAAGnH,WAAW,CAAC4E,OAAO,CAAC4C,IAAI;MACnCJ,SAAS,GAAGf,SAAS;IACzB,CAAC,MAAM;MACHc,QAAQ,GAAGnH,WAAW,CAAC4E,OAAO,CAAC6C,IAAI;MACnCL,SAAS,GAAG,CAAC,GAAGpH,WAAW,CAAC4E,OAAO,CAAC0B,oBAAoB;IAC5D;IACAe,UAAU,GAAGrH,WAAW,CAAC4E,OAAO,CAAC8C,MAAM;EAC3C;EAEA,IAAIC,IAAI;EACR,IAAItB,SAAS,KAAK,CAAC,EAAE;IACjB;IACA,IAAIuB,iBAAiB,GAChBT,QAAQ,GAAGL,KAAK,CAAChC,KAAK,IAAKkC,KAAK,CAACrC,MAAM,GAAG0C,UAAU,CAAC;IAC1D,IAAIO,iBAAiB,GAAGR,SAAS,EAAE;MAC/BD,QAAQ,IAAI,GAAG,IAAIC,SAAS,GAAGQ,iBAAiB,CAAC;MACjDP,UAAU,IAAI,GAAG,IAAID,SAAS,GAAGQ,iBAAiB,CAAC;IACvD;IAEAD,IAAI,GAAG9H,WAAW,CAACgG,SAAS,CAAC,CACzB;MAACzD,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEmB,UAAU;MAAET,KAAK,EAAEa;IAAU,CAAC,EACnD;MAACjF,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEiB,UAAU;MAAEP,KAAK,EAAE,CAACW;IAAQ,CAAC,CACrD,EAAE,iBAAiB,EAAE,IAAI,EAAE9G,OAAO,CAAC;EACxC,CAAC,MAAM;IACH;IACA,IAAIwH,UAAU,GAAG7H,WAAW,CAAC4E,OAAO,CAACiD,UAAU;IAE/C,IAAKV,QAAQ,GAAGL,KAAK,CAAChC,KAAK,IAAK+C,UAAU,GAAG,GAAG,GAAGxB,SAAS,CAAC,GACrDe,SAAS,EAAE;MACfD,QAAQ,IACJC,SAAS,IAAKD,QAAQ,GAAGL,KAAK,CAAChC,KAAK,IACtB+C,UAAU,GAAG,GAAG,GAAGxB,SAAS,CAAC,CAAC;IACpD;IAEA,IAAKwB,UAAU,GAAG,GAAG,GAAGxB,SAAS,IAAKW,KAAK,CAACrC,MAAM,GAAG0C,UAAU,CAAC,GACxDD,SAAS,EAAE;MACfC,UAAU,IACND,SAAS,IAAKS,UAAU,GAAG,GAAG,GAAGxB,SAAS,IAC5BW,KAAK,CAACrC,MAAM,GAAG0C,UAAU,CAAC,CAAC;IACjD;IAEA,IAAIS,GAAG,GAAG5H,QAAQ,CACd,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAEtD,KAAK,CAACuD,IAAI,CAACC,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC;IAC3D;IACA;IACA0E,GAAG,CAACnD,MAAM,GAAG0B,SAAS;IAEtB,IAAI0B,QAAQ,GAAG,EAAEF,UAAU,GAAG,GAAG,GAAGxB,SAAS,CAAC;IAE9CsB,IAAI,GAAG9H,WAAW,CAACgG,SAAS,CAAC,CACzB;MAACzD,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEmB,UAAU;MAAET,KAAK,EAAEa;IAAU,CAAC,EACnD;MAACjF,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEgC,GAAG;MAAStB,KAAK,EAAEuB;IAAQ,CAAC,EACjD;MAAC3F,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEiB,UAAU;MAAEP,KAAK,EAAE,CAACW;IAAQ,CAAC,CACrD,EAAE,iBAAiB,EAAE,IAAI,EAAE9G,OAAO,CAAC;EACxC;;EAEA;EACA;EACAsH,IAAI,CAAChD,MAAM,IAAI8B,MAAM,CAACnB,cAAc,GAAGjF,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EACnEqC,IAAI,CAAC7C,KAAK,IAAI2B,MAAM,CAACnB,cAAc,GAAGjF,OAAO,CAACqC,KAAK,CAAC4C,cAAc;;EAElE;EACA,IAAI0C,SAAS;EACb,IAAIvB,MAAM,CAAC9D,IAAI,KAAK/C,KAAK,CAACgD,OAAO,CAACD,IAAI,EAAE;IACpCqF,SAAS,GAAGhI,WAAW,CAAC4E,OAAO,CAACqD,MAAM;EAC1C,CAAC,MAAM;IACHD,SAAS,GAAGhI,WAAW,CAAC4E,OAAO,CAACsD,SAAS,CAACzB,MAAM,CAAC;EACrD;EAEA,IAAI0B,SAAS;EACb,IAAIC,UAAU;EACd,IAAI1H,KAAK,CAAC2B,KAAK,CAAC8F,SAAS,IAAI,IAAI,EAAE;IAC/BA,SAAS,GAAGlF,iBAAiB,CAAC5C,OAAO,CAAC;EAC1C,CAAC,MAAM;IACH8H,SAAS,GAAGrI,SAAS,CAACuI,gBAAgB,CAClC3H,KAAK,CAAC2B,KAAK,CAAC8F,SAAS,EAAEH,SAAS,EAAE,IAAI,EACtC3H,OAAO,CAACmE,SAAS,CAACiC,MAAM,CAAC,EAAE/F,KAAK,CAACkD,IAAI,CAAC;EAC9C;EACA,IAAIlD,KAAK,CAAC2B,KAAK,CAAC+F,UAAU,IAAI,IAAI,EAAE;IAChCA,UAAU,GAAGnF,iBAAiB,CAAC5C,OAAO,CAAC;EAC3C,CAAC,MAAM;IACH+H,UAAU,GAAGtI,SAAS,CAACuI,gBAAgB,CACnC3H,KAAK,CAAC2B,KAAK,CAAC+F,UAAU,EAAEJ,SAAS,EAAE,IAAI,EACvC3H,OAAO,CAACmE,SAAS,CAACiC,MAAM,CAAC,EAAE/F,KAAK,CAACkD,IAAI,CAAC;EAC9C;EAEA,OAAO1D,QAAQ,CACX,CAAC,MAAM,EAAEG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAEuD,MAAM,CAACrD,GAAG,EAAE,CAAC,EAC7C,CAAC+E,SAAS,EAAEjI,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,CAACyH,IAAI,CAAC,CAAC,EAAES,UAAU,CAAC,EACpD/H,OAAO,CAACwD,QAAQ,EAAE,CAAC;AAC3B,CAAC;AAEDR,UAAU,CAAC9B,KAAK,GAAG,UAASb,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC9C,IAAIgI,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,EAAE,GAAG9H,KAAK,CAAC2B,KAAK,CAACyB,IAAI,CAACrD,MAAM;EAChC,IAAIgI,EAAE,GAAG,CAAC;EACV,IAAI3E,IAAI,GAAG,IAAI4E,KAAK,CAACF,EAAE,CAAC;;EAExB;EACA,IAAIG,EAAE,GAAG,CAAC,GAAG3I,WAAW,CAAC4E,OAAO,CAACY,OAAO;EACxC,IAAIoD,WAAW,GAAG,CAAC,GAAGD,EAAE,CAAC,CAAC;;EAE1B;EACA,IAAIE,YAAY,GAAG,EAAE,GAAGF,EAAE,CAAC,CAAC;EAC5B;EACA;EACA,IAAIG,YAAY,GAAG7I,KAAK,CAAC8I,KAAK,CAACrI,KAAK,CAAC2B,KAAK,CAACyG,YAAY,EAAE,CAAC,CAAC;EAC3D,IAAIE,SAAS,GAAGF,YAAY,GAAGD,YAAY;EAC3C,IAAII,aAAa,GAAG,GAAG,GAAGD,SAAS,CAAC,CAAC;EACrC,IAAIE,YAAY,GAAG,GAAG,GAAGF,SAAS,CAAC,CAAE;;EAErC,IAAIG,WAAW,GAAG,CAAC;EACnB,KAAKb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5H,KAAK,CAAC2B,KAAK,CAACyB,IAAI,CAACrD,MAAM,EAAE,EAAE6H,CAAC,EAAE;IAC1C,IAAIc,KAAK,GAAG1I,KAAK,CAAC2B,KAAK,CAACyB,IAAI,CAACwE,CAAC,CAAC;IAC/B,IAAI3D,MAAM,GAAGsE,aAAa,CAAC,CAAC;IAC5B,IAAInE,KAAK,GAAGoE,YAAY,CAAC,CAAG;;IAE5B,IAAIT,EAAE,GAAGW,KAAK,CAAC3I,MAAM,EAAE;MACnBgI,EAAE,GAAGW,KAAK,CAAC3I,MAAM;IACrB;IAEA,IAAI4I,MAAM,GAAG,IAAIX,KAAK,CAACU,KAAK,CAAC3I,MAAM,CAAC;IACpC,KAAK8H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,KAAK,CAAC3I,MAAM,EAAE,EAAE8H,CAAC,EAAE;MAC/B,IAAIe,GAAG,GAAG1I,UAAU,CAACwI,KAAK,CAACb,CAAC,CAAC,EAAElI,OAAO,CAAC;MACvC,IAAIyE,KAAK,GAAGwE,GAAG,CAACxE,KAAK,EAAE;QACnBA,KAAK,GAAGwE,GAAG,CAACxE,KAAK;MACrB;MACA,IAAIH,MAAM,GAAG2E,GAAG,CAAC3E,MAAM,EAAE;QACrBA,MAAM,GAAG2E,GAAG,CAAC3E,MAAM;MACvB;MACA0E,MAAM,CAACd,CAAC,CAAC,GAAGe,GAAG;IACnB;IAEA,IAAIC,GAAG,GAAG,CAAC;IACX,IAAI7I,KAAK,CAAC2B,KAAK,CAACmH,OAAO,CAAClB,CAAC,CAAC,EAAE;MACxBiB,GAAG,GAAG7I,KAAK,CAAC2B,KAAK,CAACmH,OAAO,CAAClB,CAAC,CAAC,CAACjG,KAAK;MAClC,QAAQkH,GAAG,CAACE,IAAI;QACZ,KAAK,IAAI;UACLF,GAAG,GAAGA,GAAG,CAACG,MAAM;UAChB;QACJ,KAAK,IAAI;UACLH,GAAG,GAAGA,GAAG,CAACG,MAAM,GAAG1J,WAAW,CAAC4E,OAAO,CAAC+E,OAAO;UAC9C;QACJ;UACIC,OAAO,CAACC,KAAK,CAAC,oBAAoB,GAAGN,GAAG,CAACE,IAAI,CAAC;UAC9CF,GAAG,GAAG,CAAC;MAAC;MAEhB,IAAIA,GAAG,GAAG,CAAC,EAAE;QAAE;QACXA,GAAG,IAAIL,YAAY;QACnB,IAAIpE,KAAK,GAAGyE,GAAG,EAAE;UACbzE,KAAK,GAAGyE,GAAG,CAAC,CAAC;QACjB;;QACAA,GAAG,GAAG,CAAC;MACX;IACJ;IAEAF,MAAM,CAAC1E,MAAM,GAAGA,MAAM;IACtB0E,MAAM,CAACvE,KAAK,GAAGA,KAAK;IACpBqE,WAAW,IAAIxE,MAAM;IACrB0E,MAAM,CAACS,GAAG,GAAGX,WAAW;IACxBA,WAAW,IAAIrE,KAAK,GAAGyE,GAAG,CAAC,CAAC;IAC5BzF,IAAI,CAACwE,CAAC,CAAC,GAAGe,MAAM;EACpB;EAEA,IAAIU,MAAM,GAAGZ,WAAW,GAAG,CAAC,GAAGnJ,WAAW,CAAC4E,OAAO,CAACiD,UAAU;EAC7D,IAAImC,eAAe,GAAGtJ,KAAK,CAAC2B,KAAK,CAAC4H,IAAI,IAAI,EAAE;EAC5C,IAAIA,IAAI,GAAG,EAAE;EACb,IAAIC,MAAM;EACV,IAAIC,WAAW;EACf,KAAK5B,CAAC,GAAG,CAAC,EAAE4B,WAAW,GAAG,CAAC;EACtB;EACA;EACA5B,CAAC,GAAGE,EAAE,IAAI0B,WAAW,GAAGH,eAAe,CAACvJ,MAAM,EAC9C,EAAE8H,CAAC,EAAE,EAAE4B,WAAW,EAAE;IAErB,IAAIC,QAAQ,GAAGJ,eAAe,CAACG,WAAW,CAAC,IAAI,CAAC,CAAC;IAEjD,IAAIE,cAAc,GAAG,IAAI;IACzB,OAAOD,QAAQ,CAAChI,IAAI,KAAK,WAAW,EAAE;MAClC;MACA;MACA,IAAI,CAACiI,cAAc,EAAE;QACjBH,MAAM,GAAGhK,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC;QACtCgK,MAAM,CAACxH,KAAK,CAAC4H,KAAK,GACdtK,WAAW,CAAC4E,OAAO,CAAC2F,aAAa,GAAG,IAAI;QAC5CN,IAAI,CAACtJ,IAAI,CAACuJ,MAAM,CAAC;MACrB;MAEA,IAAIE,QAAQ,CAACI,SAAS,KAAK,GAAG,EAAE;QAC5B,IAAIA,SAAS,GAAGtK,QAAQ,CACpB,CAAC,oBAAoB,CAAC,EACtB,EAAE,CAAC;QACPsK,SAAS,CAAC9H,KAAK,CAACiC,MAAM,GAAGwE,WAAW,GAAG,IAAI;QAC3CqB,SAAS,CAAC9H,KAAK,CAAC+H,aAAa,GACzB,EAAEtB,WAAW,GAAGY,MAAM,CAAC,GAAG,IAAI;QAElCE,IAAI,CAACtJ,IAAI,CAAC6J,SAAS,CAAC;MACxB,CAAC,MAAM;QACH,MAAM,IAAI9K,UAAU,CAChB,0BAA0B,GAAG0K,QAAQ,CAACI,SAAS,CAAC;MACxD;MAEAL,WAAW,EAAE;MACbC,QAAQ,GAAGJ,eAAe,CAACG,WAAW,CAAC,IAAI,CAAC,CAAC;MAC7CE,cAAc,GAAG,KAAK;IAC1B;IAEA,IAAI9B,CAAC,IAAIE,EAAE,EAAE;MACT;IACJ;IAEA,IAAIiC,QAAQ;IACZ,IAAInC,CAAC,GAAG,CAAC,IAAI7H,KAAK,CAAC2B,KAAK,CAACsI,mBAAmB,EAAE;MAC1CD,QAAQ,GAAGzK,KAAK,CAAC8I,KAAK,CAACqB,QAAQ,CAACQ,MAAM,EAAEhC,WAAW,CAAC;MACpD,IAAI8B,QAAQ,KAAK,CAAC,EAAE;QAChBR,MAAM,GAAGhK,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC;QACtCgK,MAAM,CAACxH,KAAK,CAAC4H,KAAK,GAAGI,QAAQ,GAAG,IAAI;QACpCT,IAAI,CAACtJ,IAAI,CAACuJ,MAAM,CAAC;MACrB;IACJ;IAEA,IAAIW,GAAG,GAAG,EAAE;IACZ,KAAKvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,EAAE,EAAE,EAAEF,CAAC,EAAE;MACrB,IAAIwC,GAAG,GAAGhH,IAAI,CAACwE,CAAC,CAAC;MACjB,IAAIxC,IAAI,GAAGgF,GAAG,CAACvC,CAAC,CAAC;MACjB,IAAI,CAACzC,IAAI,EAAE;QACP;MACJ;MACA,IAAIU,KAAK,GAAGsE,GAAG,CAAChB,GAAG,GAAGC,MAAM;MAC5BjE,IAAI,CAAChB,KAAK,GAAGgG,GAAG,CAAChG,KAAK;MACtBgB,IAAI,CAACnB,MAAM,GAAGmG,GAAG,CAACnG,MAAM;MACxBkG,GAAG,CAAClK,IAAI,CAAC;QAACyB,IAAI,EAAE,MAAM;QAAE0D,IAAI,EAAEA,IAAI;QAAEU,KAAK,EAAEA;MAAK,CAAC,CAAC;IACtD;IAEAqE,GAAG,GAAGhL,WAAW,CAACgG,SAAS,CAACgF,GAAG,EAAE,iBAAiB,EAAE,IAAI,EAAExK,OAAO,CAAC;IAClEwK,GAAG,GAAG3K,QAAQ,CACV,CAAC,YAAY,IAAIkK,QAAQ,CAACW,KAAK,IAAI,GAAG,CAAC,CAAC,EACxC,CAACF,GAAG,CAAC,CAAC;IACVZ,IAAI,CAACtJ,IAAI,CAACkK,GAAG,CAAC;IAEd,IAAItC,CAAC,GAAGE,EAAE,GAAG,CAAC,IAAI/H,KAAK,CAAC2B,KAAK,CAACsI,mBAAmB,EAAE;MAC/CD,QAAQ,GAAGzK,KAAK,CAAC8I,KAAK,CAACqB,QAAQ,CAACY,OAAO,EAAEpC,WAAW,CAAC;MACrD,IAAI8B,QAAQ,KAAK,CAAC,EAAE;QAChBR,MAAM,GAAGhK,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC;QACtCgK,MAAM,CAACxH,KAAK,CAAC4H,KAAK,GAAGI,QAAQ,GAAG,IAAI;QACpCT,IAAI,CAACtJ,IAAI,CAACuJ,MAAM,CAAC;MACrB;IACJ;EACJ;EACApG,IAAI,GAAG5D,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE+J,IAAI,CAAC;EACjC,OAAO/J,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC4D,IAAI,CAAC,EAAEzD,OAAO,CAACwD,QAAQ,EAAE,CAAC;AACzD,CAAC;AAEDR,UAAU,CAAC7B,OAAO,GAAG,UAASd,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAChD,IAAII,KAAK,CAAC2B,KAAK,KAAK,KAAK,IAAI3B,KAAK,CAAC2B,KAAK,KAAK,SAAS,IAClD3B,KAAK,CAAC2B,KAAK,KAAK,GAAG,IAAI3B,KAAK,CAAC2B,KAAK,KAAK,GAAG,EAAE;IAC5C;IACA;IACA;IACA,OAAOnC,QAAQ,CACX,CAAC,MAAM,EAAE,QAAQ,CAAC,EAClB,CAACL,WAAW,CAAC8D,OAAO,CAACjD,KAAK,CAAC2B,KAAK,EAAE3B,KAAK,CAACkD,IAAI,CAAC,CAAC,CACjD;EACL,CAAC,MAAM;IACH;IACA;IACA,OAAO1D,QAAQ,CACX,CAAC,MAAM,EAAE,QAAQ,EAChBL,WAAW,CAACoL,gBAAgB,CAACvK,KAAK,CAAC2B,KAAK,CAAC,CAACkB,SAAS,CAAC,CAAC;EAC9D;AACJ,CAAC;AAEDF,UAAU,CAAC6H,IAAI,GAAG,UAASxK,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC7C,IAAIe,KAAK,GAAGnB,QAAQ,CAChB,CAAC,OAAO,CAAC,EAAE,CAACU,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACyB,IAAI,EAAEzD,OAAO,CAAC6C,KAAK,EAAE,CAAC,CAAC,CAAC;EAC/D,IAAIiI,GAAG,GAAGjL,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;EAC/B,OAAOA,QAAQ,CACX,CAAC,MAAM,EAAEG,OAAO,CAACqC,KAAK,CAACU,GAAG,EAAE,CAAC,EAAE,CAAC/B,KAAK,EAAE8J,GAAG,CAAC,CAAC;AACpD,CAAC;AAED9H,UAAU,CAAC+H,IAAI,GAAG,UAAS1K,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC7C,IAAIe,KAAK,GAAGnB,QAAQ,CAChB,CAAC,OAAO,CAAC,EAAE,CAACU,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACyB,IAAI,EAAEzD,OAAO,CAAC6C,KAAK,EAAE,CAAC,CAAC,CAAC;EAC/D,IAAIiI,GAAG,GAAGjL,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;EAC/B,OAAOA,QAAQ,CACX,CAAC,MAAM,EAAEG,OAAO,CAACqC,KAAK,CAACU,GAAG,EAAE,CAAC,EAAE,CAAC/B,KAAK,EAAE8J,GAAG,CAAC,CAAC;AACpD,CAAC;AAED9H,UAAU,CAAC1B,EAAE,GAAG,UAASjB,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC3C;EACA,IAAI+K,QAAQ;EACZ,IAAIC,QAAQ;EACZ,IAAIC,SAAS,GAAG,KAAK;EACrB,IAAI7K,KAAK,CAAC0B,IAAI,KAAK,QAAQ,EAAG;IAC1B;IACA;IACA;IACAiJ,QAAQ,GAAG3K,KAAK,CAAC2B,KAAK,CAACiC,GAAG;IAC1BgH,QAAQ,GAAG5K,KAAK,CAAC2B,KAAK,CAACkC,GAAG;IAC1B7D,KAAK,GAAGA,KAAK,CAAC2B,KAAK,CAACC,IAAI;IACxBiJ,SAAS,GAAG,IAAI;EACpB;;EAEA;EACA,IAAIC,WAAW,GAAG,CACd,YAAY,CACf;EAED,IAAIC,KAAK,GAAG,KAAK;EACjB,IAAIpL,OAAO,CAACqC,KAAK,CAACC,IAAI,KAAK/C,KAAK,CAACgD,OAAO,CAACD,IAAI,IACzCjC,KAAK,CAAC2B,KAAK,CAACqJ,MAAM,IAClB,CAACzL,KAAK,CAACyD,QAAQ,CAAC8H,WAAW,EAAE9K,KAAK,CAAC2B,KAAK,CAACyB,IAAI,CAAC,EAAE;IAEhD;IACA2H,KAAK,GAAG,IAAI;EAChB;EAEA,IAAInJ,IAAI;EACR,IAAIqJ,SAAS,GAAG,CAAC;EACjB,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIlL,KAAK,CAAC2B,KAAK,CAACqJ,MAAM,EAAE;IACpB;IACA,IAAIhJ,KAAK,GAAG+I,KAAK,GAAG,eAAe,GAAG,eAAe;IACrDnJ,IAAI,GAAGzC,WAAW,CAACgM,UAAU,CACzBnL,KAAK,CAAC2B,KAAK,CAACyB,IAAI,EAAEpB,KAAK,EAAE,MAAM,EAAErC,OAAO,CAACwD,QAAQ,EAAE,EACnD,CAAC,WAAW,EAAE4H,KAAK,GAAG,UAAU,GAAG,UAAU,EAAE,KAAK,CAAC,CAAC;;IAE1D;IACA;IACA;IACA;IACA;IACAE,SAAS,GAAG,CAACrJ,IAAI,CAACqC,MAAM,GAAGrC,IAAI,CAACwC,KAAK,IAAI,CAAC,GACtC9E,WAAW,CAAC4E,OAAO,CAACiD,UAAU,GAC9BxH,OAAO,CAACqC,KAAK,CAAC4C,cAAc;;IAEhC;IACAsG,KAAK,GAAGtJ,IAAI,CAAC6D,MAAM;EACvB,CAAC,MAAM;IACH;IACA;IACA;IACA;IACA,IAAI2F,MAAM,GAAG,EAAE;IACf,KAAK,IAAItL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,KAAK,CAAC2B,KAAK,CAACyB,IAAI,CAACrD,MAAM,EAAED,CAAC,EAAE,EAAE;MAC9CsL,MAAM,CAACnL,IAAI,CAACd,WAAW,CAAC8D,OAAO,CAACjD,KAAK,CAAC2B,KAAK,CAACyB,IAAI,CAACtD,CAAC,CAAC,EAAEE,KAAK,CAACkD,IAAI,CAAC,CAAC;IACrE;IACAtB,IAAI,GAAGpC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE4L,MAAM,EAAEzL,OAAO,CAACwD,QAAQ,EAAE,CAAC;EACxD;EAEA,IAAI0H,SAAS,EAAE;IACX;IACA;IACAjJ,IAAI,GAAGpC,QAAQ,CAAC,EAAE,EAAE,CAACoC,IAAI,CAAC,CAAC;IAE3B,IAAI8B,MAAM;IACV,IAAI2H,OAAO;IACX,IAAI1H,MAAM;IACV,IAAI2H,OAAO;IACX;IACA;IACA,IAAIX,QAAQ,EAAE;MACV,IAAI/G,GAAG,GAAG1D,UAAU,CAChByK,QAAQ,EAAEhL,OAAO,CAACmE,SAAS,CAACnE,OAAO,CAACqC,KAAK,CAAC4B,GAAG,EAAE,CAAC,CAAC;MACrDF,MAAM,GAAGlE,QAAQ,CACb,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAE7C,OAAO,CAACqC,KAAK,CAAC4B,GAAG,EAAE,CAAClB,GAAG,EAAE,CAAC,EAAE,CAACkB,GAAG,CAAC,CAAC;MAE9DyH,OAAO,GAAGtG,IAAI,CAACC,GAAG,CACd1F,WAAW,CAAC4E,OAAO,CAACqH,aAAa,EACjCjM,WAAW,CAAC4E,OAAO,CAACsH,aAAa,GAAG5H,GAAG,CAACQ,KAAK,CAAC;IACtD;IAEA,IAAIwG,QAAQ,EAAE;MACV,IAAI/G,GAAG,GAAG3D,UAAU,CAChB0K,QAAQ,EAAEjL,OAAO,CAACmE,SAAS,CAACnE,OAAO,CAACqC,KAAK,CAAC6B,GAAG,EAAE,CAAC,CAAC;MACrDF,MAAM,GAAGnE,QAAQ,CACb,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAE7C,OAAO,CAACqC,KAAK,CAAC6B,GAAG,EAAE,CAACnB,GAAG,EAAE,CAAC,EAClD,CAACmB,GAAG,CAAC,CAAC;MAEVyH,OAAO,GAAGvG,IAAI,CAACC,GAAG,CACd1F,WAAW,CAAC4E,OAAO,CAACuH,aAAa,EACjCnM,WAAW,CAAC4E,OAAO,CAACwH,aAAa,GAAG7H,GAAG,CAACI,MAAM,CAAC;IACvD;;IAEA;IACA;IACA,IAAI0H,UAAU;IACd,IAAIC,GAAG;IACP,IAAIC,MAAM;IACV,IAAI,CAAClB,QAAQ,EAAE;MACXiB,GAAG,GAAGhK,IAAI,CAACqC,MAAM,GAAGgH,SAAS;MAE7BU,UAAU,GAAGxM,WAAW,CAACgG,SAAS,CAAC,CAC/B;QAACzD,IAAI,EAAE,MAAM;QAAEO,IAAI,EAAE3C,WAAW,CAAC4E,OAAO,CAAC4H;MAAa,CAAC,EACvD;QAACpK,IAAI,EAAE,MAAM;QAAE0D,IAAI,EAAEzB;MAAM,CAAC,EAC5B;QAACjC,IAAI,EAAE,MAAM;QAAEO,IAAI,EAAEqJ;MAAO,CAAC,EAC7B;QAAC5J,IAAI,EAAE,MAAM;QAAE0D,IAAI,EAAExD;MAAI,CAAC,CAC7B,EAAE,KAAK,EAAEgK,GAAG,EAAEjM,OAAO,CAAC;;MAEvB;MACA;MACA;MACA;MACAgM,UAAU,CAACtG,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACwD,UAAU,GAAG,CAAC0F,KAAK,GAAG,IAAI;IAC3D,CAAC,MAAM,IAAI,CAACN,QAAQ,EAAE;MAClBiB,MAAM,GAAGjK,IAAI,CAACwC,KAAK,GAAG6G,SAAS;MAE/BU,UAAU,GAAGxM,WAAW,CAACgG,SAAS,CAAC,CAC/B;QAACzD,IAAI,EAAE,MAAM;QAAE0D,IAAI,EAAExD;MAAI,CAAC,EAC1B;QAACF,IAAI,EAAE,MAAM;QAAEO,IAAI,EAAEoJ;MAAO,CAAC,EAC7B;QAAC3J,IAAI,EAAE,MAAM;QAAE0D,IAAI,EAAE1B;MAAM,CAAC,EAC5B;QAAChC,IAAI,EAAE,MAAM;QAAEO,IAAI,EAAE3C,WAAW,CAAC4E,OAAO,CAAC4H;MAAa,CAAC,CAC1D,EAAE,QAAQ,EAAED,MAAM,EAAElM,OAAO,CAAC;;MAE7B;MACAgM,UAAU,CAACtG,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACwD,UAAU,GAAG0F,KAAK,GAAG,IAAI;IAC1D,CAAC,MAAM,IAAI,CAACP,QAAQ,IAAI,CAACC,QAAQ,EAAE;MAC/B;MACA;MACA;MACA,OAAOhJ,IAAI;IACf,CAAC,MAAM;MACHiK,MAAM,GAAGvM,WAAW,CAAC4E,OAAO,CAAC4H,aAAa,GACtCnI,MAAM,CAACM,MAAM,GAAGN,MAAM,CAACS,KAAK,GAC5BkH,OAAO,GACP1J,IAAI,CAACwC,KAAK,GAAG6G,SAAS;MAE1BU,UAAU,GAAGxM,WAAW,CAACgG,SAAS,CAAC,CAC/B;QAACzD,IAAI,EAAE,MAAM;QAAEO,IAAI,EAAE3C,WAAW,CAAC4E,OAAO,CAAC4H;MAAa,CAAC,EACvD;QAACpK,IAAI,EAAE,MAAM;QAAE0D,IAAI,EAAEzB;MAAM,CAAC,EAC5B;QAACjC,IAAI,EAAE,MAAM;QAAEO,IAAI,EAAEqJ;MAAO,CAAC,EAC7B;QAAC5J,IAAI,EAAE,MAAM;QAAE0D,IAAI,EAAExD;MAAI,CAAC,EAC1B;QAACF,IAAI,EAAE,MAAM;QAAEO,IAAI,EAAEoJ;MAAO,CAAC,EAC7B;QAAC3J,IAAI,EAAE,MAAM;QAAE0D,IAAI,EAAE1B;MAAM,CAAC,EAC5B;QAAChC,IAAI,EAAE,MAAM;QAAEO,IAAI,EAAE3C,WAAW,CAAC4E,OAAO,CAAC4H;MAAa,CAAC,CAC1D,EAAE,QAAQ,EAAED,MAAM,EAAElM,OAAO,CAAC;;MAE7B;MACAgM,UAAU,CAACtG,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACwD,UAAU,GAAG,CAAC0F,KAAK,GAAG,IAAI;MACvDS,UAAU,CAACtG,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACwD,UAAU,GAAG0F,KAAK,GAAG,IAAI;IAC1D;IAEA,OAAO1L,QAAQ,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,EAAE,CAACmM,UAAU,CAAC,CAAC;EACvD,CAAC,MAAM;IACH,IAAI3L,KAAK,CAAC2B,KAAK,CAACqJ,MAAM,EAAE;MACpBpJ,IAAI,CAACI,KAAK,CAAC4J,GAAG,GAAGX,SAAS,GAAG,IAAI;IACrC;IAEA,OAAOrJ,IAAI;EACf;AACJ,CAAC;AAEDe,UAAU,CAACzB,KAAK,GAAG,UAASlB,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC9C;EACA;EACA;EACA,IAAImM,CAAC,GAAGvM,QAAQ,CACZ,CAAC,GAAG,CAAC,EAAE,CAACL,WAAW,CAAC8D,OAAO,CAAC,GAAG,EAAEjD,KAAK,CAACkD,IAAI,CAAC,CAAC,CAAC;EAClD,IAAI8I,CAAC,GAAGxM,QAAQ,CACZ,CAAC,GAAG,CAAC,EAAE,CAACL,WAAW,CAAC8D,OAAO,CAAC,GAAG,EAAEjD,KAAK,CAACkD,IAAI,CAAC,CAAC,CAAC;EAElD8I,CAAC,CAAC/H,MAAM,GAAG,CAAC+H,CAAC,CAAC/H,MAAM,GAAG,GAAG,IAAI,IAAI;EAClC+H,CAAC,CAAC5H,KAAK,GAAG,CAAC4H,CAAC,CAAC/H,MAAM,GAAG,GAAG,IAAI,IAAI;EAEjC,IAAIgI,CAAC,GAAGzM,QAAQ,CACZ,CAAC,GAAG,CAAC,EAAE,CAACL,WAAW,CAAC8D,OAAO,CAAC,GAAG,EAAEjD,KAAK,CAACkD,IAAI,CAAC,CAAC,CAAC;EAClD,IAAIgJ,CAAC,GAAG1M,QAAQ,CACZ,CAAC,GAAG,CAAC,EAAE,CAACL,WAAW,CAAC8D,OAAO,CAAC,GAAG,EAAEjD,KAAK,CAACkD,IAAI,CAAC,CAAC,CAAC;EAElDgJ,CAAC,CAACjI,MAAM,GAAIiI,CAAC,CAACjI,MAAM,GAAG,MAAO;EAC9BiI,CAAC,CAAC9H,KAAK,GAAI8H,CAAC,CAAC9H,KAAK,GAAG,MAAO;EAE5B,IAAI+H,CAAC,GAAG3M,QAAQ,CACZ,CAAC,GAAG,CAAC,EAAE,CAACL,WAAW,CAAC8D,OAAO,CAAC,GAAG,EAAEjD,KAAK,CAACkD,IAAI,CAAC,CAAC,CAAC;EAElD,OAAO1D,QAAQ,CACX,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE,CAACuM,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAExM,OAAO,CAACwD,QAAQ,EAAE,CAAC;AACpE,CAAC;AAEDR,UAAU,CAACxB,QAAQ,GAAG,UAASnB,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EACjD;;EAEA;EACA,IAAIwM,UAAU,GAAGlM,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACyB,IAAI,EACpCzD,OAAO,CAACmE,SAAS,CAACnE,OAAO,CAACqC,KAAK,CAACqK,KAAK,EAAE,CAAC,CAAC;EAEjD,IAAI1G,SAAS,GAAGrG,WAAW,CAAC4E,OAAO,CAAC0B,oBAAoB,GACpDjG,OAAO,CAACqC,KAAK,CAAC4C,cAAc;;EAEhC;EACA,IAAI0H,IAAI,GAAG9M,QAAQ,CACf,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAEtD,KAAK,CAACuD,IAAI,CAACC,GAAG,EAAE,EAAE,eAAe,CAAC,CAAC;EAC/D4J,IAAI,CAACrI,MAAM,GAAG0B,SAAS;EACvB2G,IAAI,CAACC,WAAW,GAAG,GAAG;;EAEtB;EACA,IAAIC,KAAK,GAAGrN,WAAW,CAACgG,SAAS,CAAC,CAC9B;IAACzD,IAAI,EAAE,MAAM;IAAE0D,IAAI,EAAEgH;EAAU,CAAC,EAChC;IAAC1K,IAAI,EAAE,MAAM;IAAEO,IAAI,EAAE,CAAC,GAAG0D;EAAS,CAAC,EACnC;IAACjE,IAAI,EAAE,MAAM;IAAE0D,IAAI,EAAEkH;EAAI,CAAC,EAC1B;IAAC5K,IAAI,EAAE,MAAM;IAAEO,IAAI,EAAE0D;EAAS,CAAC,CAClC,EAAE,eAAe,EAAE,IAAI,EAAEhG,OAAO,CAAC;EAElC,OAAOH,QAAQ,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE,CAACgN,KAAK,CAAC,EAAE7M,OAAO,CAACwD,QAAQ,EAAE,CAAC;AACtE,CAAC;AAEDR,UAAU,CAACvB,SAAS,GAAG,UAASpB,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAClD;;EAEA;EACA,IAAIwM,UAAU,GAAGlM,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACyB,IAAI,EAAEzD,OAAO,CAAC;EAEtD,IAAIgG,SAAS,GAAGrG,WAAW,CAAC4E,OAAO,CAAC0B,oBAAoB,GACpDjG,OAAO,CAACqC,KAAK,CAAC4C,cAAc;;EAEhC;EACA,IAAI0H,IAAI,GAAG9M,QAAQ,CACf,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAEtD,KAAK,CAACuD,IAAI,CAACC,GAAG,EAAE,EAAE,gBAAgB,CAAC,CAAC;EAChE4J,IAAI,CAACrI,MAAM,GAAG0B,SAAS;EACvB2G,IAAI,CAACC,WAAW,GAAG,GAAG;;EAEtB;EACA,IAAIC,KAAK,GAAGrN,WAAW,CAACgG,SAAS,CAAC,CAC9B;IAACzD,IAAI,EAAE,MAAM;IAAEO,IAAI,EAAE0D;EAAS,CAAC,EAC/B;IAACjE,IAAI,EAAE,MAAM;IAAE0D,IAAI,EAAEkH;EAAI,CAAC,EAC1B;IAAC5K,IAAI,EAAE,MAAM;IAAEO,IAAI,EAAE,CAAC,GAAG0D;EAAS,CAAC,EACnC;IAACjE,IAAI,EAAE,MAAM;IAAE0D,IAAI,EAAEgH;EAAU,CAAC,CACnC,EAAE,KAAK,EAAEA,UAAU,CAACnI,MAAM,EAAEtE,OAAO,CAAC;EAErC,OAAOH,QAAQ,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,CAACgN,KAAK,CAAC,EAAE7M,OAAO,CAACwD,QAAQ,EAAE,CAAC;AACvE,CAAC;AAEDR,UAAU,CAACpB,IAAI,GAAG,UAASvB,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC7C;;EAEA;EACA;EACA,IAAIe,KAAK,GAAGT,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACyB,IAAI,EAC/BzD,OAAO,CAACmE,SAAS,CAACnE,OAAO,CAACqC,KAAK,CAACqK,KAAK,EAAE,CAAC,CAAC;EAEjD,IAAI1G,SAAS,GAAGrG,WAAW,CAAC4E,OAAO,CAAC0B,oBAAoB,GACpDjG,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EAEhC,IAAI0H,IAAI,GAAG9M,QAAQ,CACf,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAEtD,KAAK,CAACuD,IAAI,CAACC,GAAG,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,EAC1D/C,OAAO,CAACwD,QAAQ,EAAE,CAAC;EACvBmJ,IAAI,CAACrI,MAAM,GAAG0B,SAAS;EACvB2G,IAAI,CAACC,WAAW,GAAG,GAAG;EAEtB,IAAIE,GAAG,GAAG9G,SAAS;EACnB,IAAIhG,OAAO,CAACqC,KAAK,CAAC0K,EAAE,GAAGxN,KAAK,CAACuD,IAAI,CAACiK,EAAE,EAAE;IAClCD,GAAG,GAAGnN,WAAW,CAAC4E,OAAO,CAACgB,OAAO;EACrC;;EAEA;EACA,IAAIyH,aAAa,GAAGhH,SAAS,GAAG8G,GAAG,GAAG,CAAC;EAEvC,IAAIG,WAAW,GACX,CAACjM,KAAK,CAACsD,MAAM,GAAGtD,KAAK,CAACyD,KAAK,IAAIzE,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EAC/D,IAAIiI,kBAAkB,GAAGD,WAAW,GAAGD,aAAa,GAAGhH,SAAS;;EAEhE;EACA,IAAImH,KAAK,GAAGtN,QAAQ,CAAC,CAAC,WAAW,CAAC,EAAE,CAChCJ,SAAS,CAACuI,gBAAgB,CAAC,QAAQ,EAAEkF,kBAAkB,EAC5B,KAAK,EAAElN,OAAO,EAAEK,KAAK,CAACkD,IAAI,CAAC,CAAC,EACtCvD,OAAO,CAACwD,QAAQ,EAAE,CAAC;EAExC,IAAI4J,UAAU,GAAID,KAAK,CAAC7I,MAAM,GAAG6I,KAAK,CAAC1I,KAAK,GAAIuB,SAAS;;EAEzD;EACA,IAAIoH,UAAU,GAAGpM,KAAK,CAACsD,MAAM,GAAGtD,KAAK,CAACyD,KAAK,GAAGuI,aAAa,EAAE;IACzDA,aAAa,GACT,CAACA,aAAa,GAAGI,UAAU,GAAGpM,KAAK,CAACsD,MAAM,GAAGtD,KAAK,CAACyD,KAAK,IAAI,CAAC;EACrE;;EAEA;EACA,IAAI4I,UAAU,GAAG,EAAErM,KAAK,CAACsD,MAAM,GAAG0I,aAAa,GAAGhH,SAAS,CAAC,GAAGmH,KAAK,CAAC7I,MAAM;EAC3E6I,KAAK,CAAC9K,KAAK,CAAC4J,GAAG,GAAGoB,UAAU,GAAG,IAAI;EACnCF,KAAK,CAAC7I,MAAM,IAAI+I,UAAU;EAC1BF,KAAK,CAAC1I,KAAK,IAAI4I,UAAU;;EAEzB;EACA;EACA;EACA;EACA;EACA,IAAI5J,IAAI;EACR,IAAIzC,KAAK,CAACsD,MAAM,KAAK,CAAC,IAAItD,KAAK,CAACyD,KAAK,KAAK,CAAC,EAAE;IACzChB,IAAI,GAAG5D,QAAQ,EAAE;EACrB,CAAC,MAAM;IACH4D,IAAI,GAAGjE,WAAW,CAACgG,SAAS,CAAC,CACzB;MAACzD,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEzE;IAAK,CAAC,EAC3B;MAACe,IAAI,EAAE,MAAM;MAAEO,IAAI,EAAE0K;IAAa,CAAC,EACnC;MAACjL,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEkH;IAAI,CAAC,EAC1B;MAAC5K,IAAI,EAAE,MAAM;MAAEO,IAAI,EAAE0D;IAAS,CAAC,CAClC,EAAE,eAAe,EAAE,IAAI,EAAEhG,OAAO,CAAC;EACtC;EAEA,IAAI,CAACK,KAAK,CAAC2B,KAAK,CAACsL,KAAK,EAAE;IACpB,OAAOzN,QAAQ,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAACsN,KAAK,EAAE1J,IAAI,CAAC,CAAC;EACpD,CAAC,MAAM;IACH;;IAEA;IACA,IAAI8J,IAAI,GAAGhN,UAAU,CACjBF,KAAK,CAAC2B,KAAK,CAACsL,KAAK,EACjBtN,OAAO,CAACmE,SAAS,CAAC5E,KAAK,CAACiO,YAAY,CAAC,CAAC;IAC1C,IAAIC,QAAQ,GAAG5N,QAAQ,CACnB,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAEtD,KAAK,CAACiO,YAAY,CAACzK,GAAG,EAAE,CAAC,EACjD,CAACwK,IAAI,CAAC,CAAC;;IAEX;IACA,IAAIG,eAAe,GAAGtI,IAAI,CAACC,GAAG,CAAC8H,KAAK,CAAC7I,MAAM,EAAEb,IAAI,CAACa,MAAM,CAAC;IACzD,IAAIqJ,cAAc,GAAGvI,IAAI,CAACC,GAAG,CAAC8H,KAAK,CAAC1I,KAAK,EAAEhB,IAAI,CAACgB,KAAK,CAAC;;IAEtD;IACA;IACA,IAAImJ,OAAO,GAAG,GAAG,IAAIF,eAAe,GAAGC,cAAc,CAAC;;IAEtD;IACA,IAAIE,SAAS,GAAGrO,WAAW,CAACgG,SAAS,CACjC,CAAC;MAACzD,IAAI,EAAE,MAAM;MAAE0D,IAAI,EAAEgI;IAAQ,CAAC,CAAC,EAChC,OAAO,EAAE,CAACG,OAAO,EAAE5N,OAAO,CAAC;IAC/B;IACA;IACA,IAAI8N,aAAa,GAAGjO,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,CAACgO,SAAS,CAAC,CAAC;IAEnD,OAAOhO,QAAQ,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAACiO,aAAa,EAAEX,KAAK,EAAE1J,IAAI,CAAC,CAAC;EACnE;AACJ,CAAC;AAEDT,UAAU,CAAC+K,MAAM,GAAG,UAAS1N,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC/C;EACA;EACA;EACA,IAAIe,KAAK,GAAGlB,eAAe,CAACO,KAAK,CAAC2B,KAAK,CAACA,KAAK,EACrChC,OAAO,CAACgO,QAAQ,CAAC3N,KAAK,CAAC2B,KAAK,CAACM,IAAI,CAAC,EAAErC,IAAI,CAAC;EAEjD,IAAIgO,IAAI,GAAGpO,QAAQ,CAAC,CAAC,MAAM,CAAC,EACxB,CAACA,QAAQ,CAAC,CAAC,QAAQ,EAAE,QAAQ,GAAGG,OAAO,CAACsC,IAAI,EAAEjC,KAAK,CAAC2B,KAAK,CAACM,IAAI,EACnDtC,OAAO,CAACqC,KAAK,CAACU,GAAG,EAAE,CAAC,EACrB/B,KAAK,CAAC,CAAC,CAAC;;EAEtB;EACA,IAAIkN,QAAQ,GAAG1O,WAAW,CAAC2O,gBAAgB,CAAC9N,KAAK,CAAC2B,KAAK,CAACM,IAAI,CAAC;EAC7D2L,IAAI,CAACrB,WAAW,GAAGsB,QAAQ,GAAGlO,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EAE1D,OAAOgJ,IAAI;AACf,CAAC;AAEDjL,UAAU,CAACoL,OAAO,GAAG,UAAS/N,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAChD;;EAEA;EACA,IAAIoC,KAAK,GAAG;IACR,SAAS,EAAE9C,KAAK,CAACgD,OAAO;IACxB,MAAM,EAAEhD,KAAK,CAACuD,IAAI;IAClB,QAAQ,EAAEvD,KAAK,CAAC8O,MAAM;IACtB,cAAc,EAAE9O,KAAK,CAACiO;EAC1B,CAAC;EAED,IAAIc,QAAQ,GAAGjM,KAAK,CAAChC,KAAK,CAAC2B,KAAK,CAACK,KAAK,CAAC;;EAEvC;EACA,IAAIrB,KAAK,GAAGlB,eAAe,CACvBO,KAAK,CAAC2B,KAAK,CAACA,KAAK,EAAEhC,OAAO,CAACmE,SAAS,CAACmK,QAAQ,CAAC,EAAErO,IAAI,CAAC;EAEzD,OAAOJ,QAAQ,CAAC,CAACG,OAAO,CAACqC,KAAK,CAACQ,KAAK,EAAE,EAAEyL,QAAQ,CAACvL,GAAG,EAAE,CAAC,EAAE/B,KAAK,CAAC;AACnE,CAAC;AAEDgC,UAAU,CAACuL,IAAI,GAAG,UAASlO,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC7C,IAAIsO,IAAI,GAAGlO,KAAK,CAAC2B,KAAK,CAACuM,IAAI;EAC3B,OAAOhO,UAAU,CAACF,KAAK,CAAC2B,KAAK,CAACyB,IAAI,EAAEzD,OAAO,CAACwO,QAAQ,CAACD,IAAI,CAAC,EAAEtO,IAAI,CAAC;AACrE,CAAC;AAED+C,UAAU,CAACyL,WAAW,GAAG,UAASpO,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EACpD,IAAIkN,KAAK,GAAG9M,KAAK,CAAC2B,KAAK,CAACA,KAAK;EAE7B,IAAImL,KAAK,KAAK,GAAG,EAAE;IACf;IACA;IACA,OAAOtN,QAAQ,CAAC,CAACW,WAAW,CAACH,KAAK,CAAC2B,KAAK,CAACE,SAAS,CAAC,CAAC,CAAC;EACzD;;EAEA;EACA,OAAOrC,QAAQ,CACX,CAACW,WAAW,CAACH,KAAK,CAAC2B,KAAK,CAACE,SAAS,CAAC,CAAC,EACpC,CAACzC,SAAS,CAACiP,UAAU,CACjBvB,KAAK,EAAE9M,KAAK,CAAC2B,KAAK,CAACM,IAAI,EAAEtC,OAAO,EAAEK,KAAK,CAACkD,IAAI,CAAC,CAAC,CAAC;AAC3D,CAAC;AAEDP,UAAU,CAACrB,SAAS,GAAG,UAAStB,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAClD;EACA,IAAIe,KAAK,GAAGlB,eAAe,CAACO,KAAK,CAAC2B,KAAK,CAACyB,IAAI,EAAEzD,OAAO,CAAC6C,KAAK,EAAE,CAAC;EAE9D,IAAIoK,WAAW,GAAG,CAAC;EACnB,IAAI0B,UAAU,GAAG,CAAC;;EAElB;EACA,KAAK,IAAIxO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,KAAK,CAACZ,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC8M,WAAW,GAAG7H,IAAI,CAACC,GAAG,CAACrE,KAAK,CAACb,CAAC,CAAC,CAACmE,MAAM,EAAE2I,WAAW,CAAC;IACpD0B,UAAU,GAAGvJ,IAAI,CAACC,GAAG,CAACrE,KAAK,CAACb,CAAC,CAAC,CAACsE,KAAK,EAAEkK,UAAU,CAAC;EACrD;;EAEA;EACA;EACA;EACA1B,WAAW,IAAIjN,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EAC3C0J,UAAU,IAAI3O,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EAE1C,IAAI6C,SAAS;EACb,IAAIzH,KAAK,CAAC2B,KAAK,CAAC4M,IAAI,KAAK,GAAG,EAAE;IAC1B;IACA9G,SAAS,GAAGlF,iBAAiB,CAAC5C,OAAO,CAAC;EAC1C,CAAC,MAAM;IACH;IACA;IACA8H,SAAS,GAAGrI,SAAS,CAACoP,cAAc,CAChCxO,KAAK,CAAC2B,KAAK,CAAC4M,IAAI,EAAE3B,WAAW,EAAE0B,UAAU,EAAE3O,OAAO,EAClDK,KAAK,CAACkD,IAAI,CAAC;EACnB;EACA;EACAvC,KAAK,CAAC8N,OAAO,CAAChH,SAAS,CAAC;EAExB,IAAIC,UAAU;EACd;EACA,IAAI1H,KAAK,CAAC2B,KAAK,CAAC+M,KAAK,KAAK,GAAG,EAAE;IAC3BhH,UAAU,GAAGnF,iBAAiB,CAAC5C,OAAO,CAAC;EAC3C,CAAC,MAAM;IACH+H,UAAU,GAAGtI,SAAS,CAACoP,cAAc,CACjCxO,KAAK,CAAC2B,KAAK,CAAC+M,KAAK,EAAE9B,WAAW,EAAE0B,UAAU,EAAE3O,OAAO,EACnDK,KAAK,CAACkD,IAAI,CAAC;EACnB;EACA;EACAvC,KAAK,CAACV,IAAI,CAACyH,UAAU,CAAC;EAEtB,OAAOlI,QAAQ,CACX,CAAC,QAAQ,EAAEG,OAAO,CAACqC,KAAK,CAACU,GAAG,EAAE,CAAC,EAAE/B,KAAK,EAAEhB,OAAO,CAACwD,QAAQ,EAAE,CAAC;AACnE,CAAC;AAEDR,UAAU,CAACtB,IAAI,GAAG,UAASrB,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC7C;EACA,IAAIyB,IAAI,GAAG7B,QAAQ,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,EAAEG,OAAO,CAACwD,QAAQ,EAAE,CAAC;;EAE7D;EACA,IAAI2C,KAAK,GAAG,CAAC;EACb,IAAI9F,KAAK,CAAC2B,KAAK,CAACmE,KAAK,EAAE;IACnBA,KAAK,GAAG9F,KAAK,CAAC2B,KAAK,CAACmE,KAAK,CAACkD,MAAM;IAChC,IAAIhJ,KAAK,CAAC2B,KAAK,CAACmE,KAAK,CAACiD,IAAI,KAAK,IAAI,EAAE;MACjCjD,KAAK,IAAIxG,WAAW,CAAC4E,OAAO,CAACgB,OAAO;IACxC;EACJ;EAEA,IAAI0E,KAAK,GAAG5J,KAAK,CAAC2B,KAAK,CAACiI,KAAK,CAACZ,MAAM;EACpC,IAAIhJ,KAAK,CAAC2B,KAAK,CAACiI,KAAK,CAACb,IAAI,KAAK,IAAI,EAAE;IACjCa,KAAK,IAAItK,WAAW,CAAC4E,OAAO,CAACgB,OAAO;EACxC;EAEA,IAAIjB,MAAM,GAAGjE,KAAK,CAAC2B,KAAK,CAACsC,MAAM,CAAC+E,MAAM;EACtC,IAAIhJ,KAAK,CAAC2B,KAAK,CAACsC,MAAM,CAAC8E,IAAI,KAAK,IAAI,EAAE;IAClC9E,MAAM,IAAI3E,WAAW,CAAC4E,OAAO,CAACgB,OAAO;EACzC;;EAEA;EACA;EACAY,KAAK,IAAInG,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EACrCgF,KAAK,IAAIjK,OAAO,CAACqC,KAAK,CAAC4C,cAAc;EACrCX,MAAM,IAAItE,OAAO,CAACqC,KAAK,CAAC4C,cAAc;;EAEtC;EACAvD,IAAI,CAACW,KAAK,CAAC2M,gBAAgB,GAAG/E,KAAK,GAAG,IAAI;EAC1CvI,IAAI,CAACW,KAAK,CAAC4M,cAAc,GAAG3K,MAAM,GAAG,IAAI;EACzC5C,IAAI,CAACW,KAAK,CAAC6J,MAAM,GAAG/F,KAAK,GAAG,IAAI;;EAEhC;EACAzE,IAAI,CAACuI,KAAK,GAAGA,KAAK;EAClBvI,IAAI,CAAC4C,MAAM,GAAGA,MAAM,GAAG6B,KAAK;EAC5BzE,IAAI,CAAC+C,KAAK,GAAG,CAAC0B,KAAK;EAEnB,OAAOzE,IAAI;AACf,CAAC;AAEDsB,UAAU,CAACnB,MAAM,GAAG,UAASxB,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC/C;EACA,IAAIgC,IAAI,GAAG5B,KAAK,CAAC2B,KAAK,CAACC,IAAI;EAE3B,IAAIiN,WAAW;EACf,IAAI7O,KAAK,CAAC0B,IAAI,KAAK,QAAQ,EAAE;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,IAAI+B,MAAM,GAAGzD,KAAK;IAClB;IACAA,KAAK,GAAGyD,MAAM,CAAC9B,KAAK,CAACC,IAAI;IACzB;IACAA,IAAI,GAAG5B,KAAK,CAAC2B,KAAK,CAACC,IAAI;IACvB;IACA6B,MAAM,CAAC9B,KAAK,CAACC,IAAI,GAAGA,IAAI;;IAExB;IACA;IACAiN,WAAW,GAAG3O,UAAU,CACpBuD,MAAM,EAAE9D,OAAO,CAAC6C,KAAK,EAAE,EAAE5C,IAAI,CAAC;EACtC;;EAEA;EACA,IAAIwD,IAAI,GAAGlD,UAAU,CACjB0B,IAAI,EAAEjC,OAAO,CAACmE,SAAS,CAACnE,OAAO,CAACqC,KAAK,CAACqK,KAAK,EAAE,CAAC,CAAC;;EAEnD;EACA;EACA;EACA;EACA;EACA,IAAIyC,IAAI;EACR,IAAI1M,cAAc,CAACR,IAAI,CAAC,EAAE;IACtB;IACA;IACA,IAAImN,QAAQ,GAAG1M,WAAW,CAACT,IAAI,CAAC;IAChC;IACA,IAAIoN,SAAS,GAAG9O,UAAU,CACtB6O,QAAQ,EAAEpP,OAAO,CAACmE,SAAS,CAACnE,OAAO,CAACqC,KAAK,CAACqK,KAAK,EAAE,CAAC,CAAC;IACvD;IACAyC,IAAI,GAAGE,SAAS,CAACF,IAAI;IACrB;IACA;IACA;IACA;EACJ,CAAC,MAAM;IACHA,IAAI,GAAG,CAAC;EACZ;;EAEA;EACA,IAAIpI,SAAS,GAAG3B,IAAI,CAACkK,GAAG,CAAC7L,IAAI,CAACa,MAAM,EAAE3E,WAAW,CAAC4E,OAAO,CAACgB,OAAO,CAAC;;EAElE;EACA,IAAI1D,MAAM,GAAGrC,WAAW,CAACgM,UAAU,CAC/BnL,KAAK,CAAC2B,KAAK,CAACH,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE7B,OAAO,CAACwD,QAAQ,EAAE,CAAC;EACnE;EACA;EACA3B,MAAM,CAACiE,MAAM,GAAG,CAAC;;EAEjB;EACA;EACA;EACA;EACA,IAAIyJ,QAAQ,GAAGlP,KAAK,CAAC2B,KAAK,CAACH,MAAM,KAAK,OAAO,GAAG,YAAY,GAAG,IAAI;EAEnE,IAAI2N,UAAU,GAAG3P,QAAQ,CAAC,CAAC,aAAa,EAAE0P,QAAQ,CAAC,EAAE,CACjD1P,QAAQ,CAAC,EAAE,EAAE,CAACgC,MAAM,CAAC,CAAC,CAAC,CAAC;EAE5B2N,UAAU,GAAGhQ,WAAW,CAACgG,SAAS,CAAC,CAC/B;IAACzD,IAAI,EAAE,MAAM;IAAE0D,IAAI,EAAEhC;EAAI,CAAC,EAC1B;IAAC1B,IAAI,EAAE,MAAM;IAAEO,IAAI,EAAE,CAACyE;EAAS,CAAC,EAChC;IAAChF,IAAI,EAAE,MAAM;IAAE0D,IAAI,EAAE+J;EAAU,CAAC,CACnC,EAAE,eAAe,EAAE,IAAI,EAAExP,OAAO,CAAC;;EAElC;EACA;EACA;EACAwP,UAAU,CAAC9J,QAAQ,CAAC,CAAC,CAAC,CAACrD,KAAK,CAACwD,UAAU,GAAG,CAAC,GAAGsJ,IAAI,GAAG,IAAI;EAEzD,IAAIM,UAAU,GAAG5P,QAAQ,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC2P,UAAU,CAAC,CAAC;EAE3D,IAAIN,WAAW,EAAE;IACb;IACA;IACAA,WAAW,CAACxJ,QAAQ,CAAC,CAAC,CAAC,GAAG+J,UAAU;;IAEpC;IACA;IACAP,WAAW,CAAC5K,MAAM,GAAGc,IAAI,CAACC,GAAG,CAACoK,UAAU,CAACnL,MAAM,EAAE4K,WAAW,CAAC5K,MAAM,CAAC;;IAEpE;IACA4K,WAAW,CAACQ,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM;IAE/B,OAAOR,WAAW;EACtB,CAAC,MAAM;IACH,OAAOO,UAAU;EACrB;AACJ,CAAC;AAEDzM,UAAU,CAAC2M,OAAO,GAAG,UAAStP,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAChD,IAAI0D,QAAQ,GAAG7D,eAAe,CAC1BO,KAAK,CAAC2B,KAAK,CAACA,KAAK,EACjBhC,OAAO,CAAC4P,WAAW,EAAE,EACrB3P,IAAI,CACP;;EAED;EACA;EACA,OAAO,IAAIT,WAAW,CAACqE,YAAY,CAACF,QAAQ,CAAC;AACjD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,IAAIpD,UAAU,GAAG,SAAAA,CAASF,KAAK,EAAEL,OAAO,EAAEC,IAAI,EAAE;EAC5C,IAAI,CAACI,KAAK,EAAE;IACR,OAAOR,QAAQ,EAAE;EACrB;EAEA,IAAImD,UAAU,CAAC3C,KAAK,CAAC0B,IAAI,CAAC,EAAE;IACxB;IACA,IAAI8N,SAAS,GAAG7M,UAAU,CAAC3C,KAAK,CAAC0B,IAAI,CAAC,CAAC1B,KAAK,EAAEL,OAAO,EAAEC,IAAI,CAAC;IAC5D,IAAI+E,UAAU;;IAEd;IACA;IACA,IAAIhF,OAAO,CAACqC,KAAK,KAAKrC,OAAO,CAAC8P,WAAW,EAAE;MACvC9K,UAAU,GAAGhF,OAAO,CAACqC,KAAK,CAAC4C,cAAc,GACjCjF,OAAO,CAAC8P,WAAW,CAAC7K,cAAc;MAE1C4K,SAAS,CAACvL,MAAM,IAAIU,UAAU;MAC9B6K,SAAS,CAACpL,KAAK,IAAIO,UAAU;IACjC;;IAEA;IACA;IACA,IAAIhF,OAAO,CAACsC,IAAI,KAAKtC,OAAO,CAAC+P,UAAU,EAAE;MACrC/K,UAAU,GAAGxF,WAAW,CAAC2O,gBAAgB,CAACnO,OAAO,CAACsC,IAAI,CAAC,GAC/C9C,WAAW,CAAC2O,gBAAgB,CAACnO,OAAO,CAAC+P,UAAU,CAAC;MAExDF,SAAS,CAACvL,MAAM,IAAIU,UAAU;MAC9B6K,SAAS,CAACpL,KAAK,IAAIO,UAAU;IACjC;IAEA,OAAO6K,SAAS;EACpB,CAAC,MAAM;IACH,MAAM,IAAIxQ,UAAU,CAChB,8BAA8B,GAAGgB,KAAK,CAAC0B,IAAI,GAAG,GAAG,CAAC;EAC1D;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,IAAIiO,SAAS,GAAG,SAAAA,CAASC,IAAI,EAAEjQ,OAAO,EAAE;EACpC;EACA;EACAiQ,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,IAAI,CAAC,CAAC;;EAEvC;EACA,IAAIlQ,UAAU,GAAGD,eAAe,CAACmQ,IAAI,EAAEjQ,OAAO,CAAC;EAC/C,IAAIyD,IAAI,GAAG5D,QAAQ,CAAC,CAAC,MAAM,EAAEG,OAAO,CAACqC,KAAK,CAACU,GAAG,EAAE,CAAC,EAAEhD,UAAU,CAAC;;EAE9D;EACA;EACA;EACA,IAAIsQ,QAAQ,GAAGxQ,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EAClC,IAAIyQ,WAAW,GAAGzQ,QAAQ,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;EAE/CwQ,QAAQ,CAAChO,KAAK,CAACiC,MAAM,GAAGb,IAAI,CAACa,MAAM,GAAG,IAAI;EAC1CgM,WAAW,CAACjO,KAAK,CAACiC,MAAM,GAAIb,IAAI,CAACa,MAAM,GAAGb,IAAI,CAACgB,KAAK,GAAI,IAAI;EAC5D;EACA;EACA;EACA6L,WAAW,CAACjO,KAAK,CAAC+H,aAAa,GAAG,CAAC3G,IAAI,CAACgB,KAAK,GAAG,IAAI;;EAEpD;EACA,IAAI8L,QAAQ,GAAG1Q,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,CAACwQ,QAAQ,EAAEC,WAAW,EAAE7M,IAAI,CAAC,CAAC;EAEtE8M,QAAQ,CAACC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;EAE5C,OAAOD,QAAQ;AACnB,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGV,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/**\n * This file contains information about the options that the Parser carries\n * around with it while parsing. Data is held in an `Options` object, and when\n * recursing, a new `Options` object can be created with the `.with*` and\n * `.reset` functions.\n */\n\n/**\n * This is the main options class. It contains the style, size, color, and font\n * of the current parse level. It also contains the style and size of the parent\n * parse level, so size changes can be handled efficiently.\n *\n * Each of the `.with*` and `.reset` functions passes its current style and size\n * as the parentStyle and parentSize of the new options class, so parent\n * handling is taken care of automatically.\n */\nfunction Options(data) {\n  this.style = data.style;\n  this.color = data.color;\n  this.size = data.size;\n  this.phantom = data.phantom;\n  this.font = data.font;\n  if (data.parentStyle === undefined) {\n    this.parentStyle = data.style;\n  } else {\n    this.parentStyle = data.parentStyle;\n  }\n  if (data.parentSize === undefined) {\n    this.parentSize = data.size;\n  } else {\n    this.parentSize = data.parentSize;\n  }\n}\n\n/**\n * Returns a new options object with the same properties as \"this\".  Properties\n * from \"extension\" will be copied to the new options object.\n */\nOptions.prototype.extend = function (extension) {\n  var data = {\n    style: this.style,\n    size: this.size,\n    color: this.color,\n    parentStyle: this.style,\n    parentSize: this.size,\n    phantom: this.phantom,\n    font: this.font\n  };\n  for (var key in extension) {\n    if (extension.hasOwnProperty(key)) {\n      data[key] = extension[key];\n    }\n  }\n  return new Options(data);\n};\n\n/**\n * Create a new options object with the given style.\n */\nOptions.prototype.withStyle = function (style) {\n  return this.extend({\n    style: style\n  });\n};\n\n/**\n * Create a new options object with the given size.\n */\nOptions.prototype.withSize = function (size) {\n  return this.extend({\n    size: size\n  });\n};\n\n/**\n * Create a new options object with the given color.\n */\nOptions.prototype.withColor = function (color) {\n  return this.extend({\n    color: color\n  });\n};\n\n/**\n * Create a new options object with \"phantom\" set to true.\n */\nOptions.prototype.withPhantom = function () {\n  return this.extend({\n    phantom: true\n  });\n};\n\n/**\n * Create a new options objects with the give font.\n */\nOptions.prototype.withFont = function (font) {\n  return this.extend({\n    font: font\n  });\n};\n\n/**\n * Create a new options object with the same style, size, and color. This is\n * used so that parent style and size changes are handled correctly.\n */\nOptions.prototype.reset = function () {\n  return this.extend({});\n};\n\n/**\n * A map of color names to CSS colors.\n * TODO(emily): Remove this when we have real macros\n */\nvar colorMap = {\n  \"katex-blue\": \"#6495ed\",\n  \"katex-orange\": \"#ffa500\",\n  \"katex-pink\": \"#ff00af\",\n  \"katex-red\": \"#df0030\",\n  \"katex-green\": \"#28ae7b\",\n  \"katex-gray\": \"gray\",\n  \"katex-purple\": \"#9d38bd\",\n  \"katex-blueA\": \"#c7e9f1\",\n  \"katex-blueB\": \"#9cdceb\",\n  \"katex-blueC\": \"#58c4dd\",\n  \"katex-blueD\": \"#29abca\",\n  \"katex-blueE\": \"#1c758a\",\n  \"katex-tealA\": \"#acead7\",\n  \"katex-tealB\": \"#76ddc0\",\n  \"katex-tealC\": \"#5cd0b3\",\n  \"katex-tealD\": \"#55c1a7\",\n  \"katex-tealE\": \"#49a88f\",\n  \"katex-greenA\": \"#c9e2ae\",\n  \"katex-greenB\": \"#a6cf8c\",\n  \"katex-greenC\": \"#83c167\",\n  \"katex-greenD\": \"#77b05d\",\n  \"katex-greenE\": \"#699c52\",\n  \"katex-goldA\": \"#f7c797\",\n  \"katex-goldB\": \"#f9b775\",\n  \"katex-goldC\": \"#f0ac5f\",\n  \"katex-goldD\": \"#e1a158\",\n  \"katex-goldE\": \"#c78d46\",\n  \"katex-redA\": \"#f7a1a3\",\n  \"katex-redB\": \"#ff8080\",\n  \"katex-redC\": \"#fc6255\",\n  \"katex-redD\": \"#e65a4c\",\n  \"katex-redE\": \"#cf5044\",\n  \"katex-maroonA\": \"#ecabc1\",\n  \"katex-maroonB\": \"#ec92ab\",\n  \"katex-maroonC\": \"#c55f73\",\n  \"katex-maroonD\": \"#a24d61\",\n  \"katex-maroonE\": \"#94424f\",\n  \"katex-purpleA\": \"#caa3e8\",\n  \"katex-purpleB\": \"#b189c6\",\n  \"katex-purpleC\": \"#9a72ac\",\n  \"katex-purpleD\": \"#715582\",\n  \"katex-purpleE\": \"#644172\",\n  \"katex-mintA\": \"#f5f9e8\",\n  \"katex-mintB\": \"#edf2df\",\n  \"katex-mintC\": \"#e0e5cc\",\n  \"katex-grayA\": \"#fdfdfd\",\n  \"katex-grayB\": \"#f7f7f7\",\n  \"katex-grayC\": \"#eeeeee\",\n  \"katex-grayD\": \"#dddddd\",\n  \"katex-grayE\": \"#cccccc\",\n  \"katex-grayF\": \"#aaaaaa\",\n  \"katex-grayG\": \"#999999\",\n  \"katex-grayH\": \"#555555\",\n  \"katex-grayI\": \"#333333\",\n  \"katex-kaBlue\": \"#314453\",\n  \"katex-kaGreen\": \"#639b24\"\n};\n\n/**\n * Gets the CSS color of the current options object, accounting for the\n * `colorMap`.\n */\nOptions.prototype.getColor = function () {\n  if (this.phantom) {\n    return \"transparent\";\n  } else {\n    return colorMap[this.color] || this.color;\n  }\n};\nmodule.exports = Options;","map":{"version":3,"names":["Options","data","style","color","size","phantom","font","parentStyle","undefined","parentSize","prototype","extend","extension","key","hasOwnProperty","withStyle","withSize","withColor","withPhantom","withFont","reset","colorMap","getColor","module","exports"],"sources":["/Users/chenhetian/04Front_end/FruitVue0629/fruitshop/node_modules/katex/src/Options.js"],"sourcesContent":["/**\n * This file contains information about the options that the Parser carries\n * around with it while parsing. Data is held in an `Options` object, and when\n * recursing, a new `Options` object can be created with the `.with*` and\n * `.reset` functions.\n */\n\n/**\n * This is the main options class. It contains the style, size, color, and font\n * of the current parse level. It also contains the style and size of the parent\n * parse level, so size changes can be handled efficiently.\n *\n * Each of the `.with*` and `.reset` functions passes its current style and size\n * as the parentStyle and parentSize of the new options class, so parent\n * handling is taken care of automatically.\n */\nfunction Options(data) {\n    this.style = data.style;\n    this.color = data.color;\n    this.size = data.size;\n    this.phantom = data.phantom;\n    this.font = data.font;\n\n    if (data.parentStyle === undefined) {\n        this.parentStyle = data.style;\n    } else {\n        this.parentStyle = data.parentStyle;\n    }\n\n    if (data.parentSize === undefined) {\n        this.parentSize = data.size;\n    } else {\n        this.parentSize = data.parentSize;\n    }\n}\n\n/**\n * Returns a new options object with the same properties as \"this\".  Properties\n * from \"extension\" will be copied to the new options object.\n */\nOptions.prototype.extend = function(extension) {\n    var data = {\n        style: this.style,\n        size: this.size,\n        color: this.color,\n        parentStyle: this.style,\n        parentSize: this.size,\n        phantom: this.phantom,\n        font: this.font,\n    };\n\n    for (var key in extension) {\n        if (extension.hasOwnProperty(key)) {\n            data[key] = extension[key];\n        }\n    }\n\n    return new Options(data);\n};\n\n/**\n * Create a new options object with the given style.\n */\nOptions.prototype.withStyle = function(style) {\n    return this.extend({\n        style: style,\n    });\n};\n\n/**\n * Create a new options object with the given size.\n */\nOptions.prototype.withSize = function(size) {\n    return this.extend({\n        size: size,\n    });\n};\n\n/**\n * Create a new options object with the given color.\n */\nOptions.prototype.withColor = function(color) {\n    return this.extend({\n        color: color,\n    });\n};\n\n/**\n * Create a new options object with \"phantom\" set to true.\n */\nOptions.prototype.withPhantom = function() {\n    return this.extend({\n        phantom: true,\n    });\n};\n\n/**\n * Create a new options objects with the give font.\n */\nOptions.prototype.withFont = function(font) {\n    return this.extend({\n        font: font,\n    });\n};\n\n/**\n * Create a new options object with the same style, size, and color. This is\n * used so that parent style and size changes are handled correctly.\n */\nOptions.prototype.reset = function() {\n    return this.extend({});\n};\n\n/**\n * A map of color names to CSS colors.\n * TODO(emily): Remove this when we have real macros\n */\nvar colorMap = {\n    \"katex-blue\": \"#6495ed\",\n    \"katex-orange\": \"#ffa500\",\n    \"katex-pink\": \"#ff00af\",\n    \"katex-red\": \"#df0030\",\n    \"katex-green\": \"#28ae7b\",\n    \"katex-gray\": \"gray\",\n    \"katex-purple\": \"#9d38bd\",\n    \"katex-blueA\": \"#c7e9f1\",\n    \"katex-blueB\": \"#9cdceb\",\n    \"katex-blueC\": \"#58c4dd\",\n    \"katex-blueD\": \"#29abca\",\n    \"katex-blueE\": \"#1c758a\",\n    \"katex-tealA\": \"#acead7\",\n    \"katex-tealB\": \"#76ddc0\",\n    \"katex-tealC\": \"#5cd0b3\",\n    \"katex-tealD\": \"#55c1a7\",\n    \"katex-tealE\": \"#49a88f\",\n    \"katex-greenA\": \"#c9e2ae\",\n    \"katex-greenB\": \"#a6cf8c\",\n    \"katex-greenC\": \"#83c167\",\n    \"katex-greenD\": \"#77b05d\",\n    \"katex-greenE\": \"#699c52\",\n    \"katex-goldA\": \"#f7c797\",\n    \"katex-goldB\": \"#f9b775\",\n    \"katex-goldC\": \"#f0ac5f\",\n    \"katex-goldD\": \"#e1a158\",\n    \"katex-goldE\": \"#c78d46\",\n    \"katex-redA\": \"#f7a1a3\",\n    \"katex-redB\": \"#ff8080\",\n    \"katex-redC\": \"#fc6255\",\n    \"katex-redD\": \"#e65a4c\",\n    \"katex-redE\": \"#cf5044\",\n    \"katex-maroonA\": \"#ecabc1\",\n    \"katex-maroonB\": \"#ec92ab\",\n    \"katex-maroonC\": \"#c55f73\",\n    \"katex-maroonD\": \"#a24d61\",\n    \"katex-maroonE\": \"#94424f\",\n    \"katex-purpleA\": \"#caa3e8\",\n    \"katex-purpleB\": \"#b189c6\",\n    \"katex-purpleC\": \"#9a72ac\",\n    \"katex-purpleD\": \"#715582\",\n    \"katex-purpleE\": \"#644172\",\n    \"katex-mintA\": \"#f5f9e8\",\n    \"katex-mintB\": \"#edf2df\",\n    \"katex-mintC\": \"#e0e5cc\",\n    \"katex-grayA\": \"#fdfdfd\",\n    \"katex-grayB\": \"#f7f7f7\",\n    \"katex-grayC\": \"#eeeeee\",\n    \"katex-grayD\": \"#dddddd\",\n    \"katex-grayE\": \"#cccccc\",\n    \"katex-grayF\": \"#aaaaaa\",\n    \"katex-grayG\": \"#999999\",\n    \"katex-grayH\": \"#555555\",\n    \"katex-grayI\": \"#333333\",\n    \"katex-kaBlue\": \"#314453\",\n    \"katex-kaGreen\": \"#639b24\",\n};\n\n/**\n * Gets the CSS color of the current options object, accounting for the\n * `colorMap`.\n */\nOptions.prototype.getColor = function() {\n    if (this.phantom) {\n        return \"transparent\";\n    } else {\n        return colorMap[this.color] || this.color;\n    }\n};\n\nmodule.exports = Options;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAOA,CAACC,IAAI,EAAE;EACnB,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACC,KAAK;EACvB,IAAI,CAACC,KAAK,GAAGF,IAAI,CAACE,KAAK;EACvB,IAAI,CAACC,IAAI,GAAGH,IAAI,CAACG,IAAI;EACrB,IAAI,CAACC,OAAO,GAAGJ,IAAI,CAACI,OAAO;EAC3B,IAAI,CAACC,IAAI,GAAGL,IAAI,CAACK,IAAI;EAErB,IAAIL,IAAI,CAACM,WAAW,KAAKC,SAAS,EAAE;IAChC,IAAI,CAACD,WAAW,GAAGN,IAAI,CAACC,KAAK;EACjC,CAAC,MAAM;IACH,IAAI,CAACK,WAAW,GAAGN,IAAI,CAACM,WAAW;EACvC;EAEA,IAAIN,IAAI,CAACQ,UAAU,KAAKD,SAAS,EAAE;IAC/B,IAAI,CAACC,UAAU,GAAGR,IAAI,CAACG,IAAI;EAC/B,CAAC,MAAM;IACH,IAAI,CAACK,UAAU,GAAGR,IAAI,CAACQ,UAAU;EACrC;AACJ;;AAEA;AACA;AACA;AACA;AACAT,OAAO,CAACU,SAAS,CAACC,MAAM,GAAG,UAASC,SAAS,EAAE;EAC3C,IAAIX,IAAI,GAAG;IACPC,KAAK,EAAE,IAAI,CAACA,KAAK;IACjBE,IAAI,EAAE,IAAI,CAACA,IAAI;IACfD,KAAK,EAAE,IAAI,CAACA,KAAK;IACjBI,WAAW,EAAE,IAAI,CAACL,KAAK;IACvBO,UAAU,EAAE,IAAI,CAACL,IAAI;IACrBC,OAAO,EAAE,IAAI,CAACA,OAAO;IACrBC,IAAI,EAAE,IAAI,CAACA;EACf,CAAC;EAED,KAAK,IAAIO,GAAG,IAAID,SAAS,EAAE;IACvB,IAAIA,SAAS,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;MAC/BZ,IAAI,CAACY,GAAG,CAAC,GAAGD,SAAS,CAACC,GAAG,CAAC;IAC9B;EACJ;EAEA,OAAO,IAAIb,OAAO,CAACC,IAAI,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACAD,OAAO,CAACU,SAAS,CAACK,SAAS,GAAG,UAASb,KAAK,EAAE;EAC1C,OAAO,IAAI,CAACS,MAAM,CAAC;IACfT,KAAK,EAAEA;EACX,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACAF,OAAO,CAACU,SAAS,CAACM,QAAQ,GAAG,UAASZ,IAAI,EAAE;EACxC,OAAO,IAAI,CAACO,MAAM,CAAC;IACfP,IAAI,EAAEA;EACV,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACAJ,OAAO,CAACU,SAAS,CAACO,SAAS,GAAG,UAASd,KAAK,EAAE;EAC1C,OAAO,IAAI,CAACQ,MAAM,CAAC;IACfR,KAAK,EAAEA;EACX,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACAH,OAAO,CAACU,SAAS,CAACQ,WAAW,GAAG,YAAW;EACvC,OAAO,IAAI,CAACP,MAAM,CAAC;IACfN,OAAO,EAAE;EACb,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACAL,OAAO,CAACU,SAAS,CAACS,QAAQ,GAAG,UAASb,IAAI,EAAE;EACxC,OAAO,IAAI,CAACK,MAAM,CAAC;IACfL,IAAI,EAAEA;EACV,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACAN,OAAO,CAACU,SAAS,CAACU,KAAK,GAAG,YAAW;EACjC,OAAO,IAAI,CAACT,MAAM,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA,IAAIU,QAAQ,GAAG;EACX,YAAY,EAAE,SAAS;EACvB,cAAc,EAAE,SAAS;EACzB,YAAY,EAAE,SAAS;EACvB,WAAW,EAAE,SAAS;EACtB,aAAa,EAAE,SAAS;EACxB,YAAY,EAAE,MAAM;EACpB,cAAc,EAAE,SAAS;EACzB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,cAAc,EAAE,SAAS;EACzB,cAAc,EAAE,SAAS;EACzB,cAAc,EAAE,SAAS;EACzB,cAAc,EAAE,SAAS;EACzB,cAAc,EAAE,SAAS;EACzB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,YAAY,EAAE,SAAS;EACvB,YAAY,EAAE,SAAS;EACvB,YAAY,EAAE,SAAS;EACvB,YAAY,EAAE,SAAS;EACvB,YAAY,EAAE,SAAS;EACvB,eAAe,EAAE,SAAS;EAC1B,eAAe,EAAE,SAAS;EAC1B,eAAe,EAAE,SAAS;EAC1B,eAAe,EAAE,SAAS;EAC1B,eAAe,EAAE,SAAS;EAC1B,eAAe,EAAE,SAAS;EAC1B,eAAe,EAAE,SAAS;EAC1B,eAAe,EAAE,SAAS;EAC1B,eAAe,EAAE,SAAS;EAC1B,eAAe,EAAE,SAAS;EAC1B,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,aAAa,EAAE,SAAS;EACxB,cAAc,EAAE,SAAS;EACzB,eAAe,EAAE;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACArB,OAAO,CAACU,SAAS,CAACY,QAAQ,GAAG,YAAW;EACpC,IAAI,IAAI,CAACjB,OAAO,EAAE;IACd,OAAO,aAAa;EACxB,CAAC,MAAM;IACH,OAAOgB,QAAQ,CAAC,IAAI,CAAClB,KAAK,CAAC,IAAI,IAAI,CAACA,KAAK;EAC7C;AACJ,CAAC;AAEDoB,MAAM,CAACC,OAAO,GAAGxB,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}
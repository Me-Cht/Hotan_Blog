{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport api from \"@/api/api\";\nexport default {\n  data() {\n    var checkAge = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('年龄不能为空'));\n      }\n      setTimeout(() => {\n        if (!Number.isInteger(value)) {\n          callback(new Error('请输入数字值'));\n        } else {\n          if (value < 15) {\n            callback(new Error('必须年满15岁'));\n          } else {\n            callback();\n          }\n        }\n      }, 1000);\n    };\n    var checkEmail = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error(\"邮箱不能为空\"));\n      } else {\n        var emailPattern = /^[\\w-]+(.[\\w-]+)*@[\\w-]+(.[\\w-]+)+$/; // 正则表达式匹配电子邮箱格式\n        if (!emailPattern.test(value)) {\n          return callback(new Error(\"请输入正确的邮箱格式\"));\n        } else {\n          callback();\n        }\n      }\n    };\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (this.ruleForm.checkPass !== '') {\n          this.$refs.ruleForm.validateField('checkPass');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      ruleForm: {\n        name: '吴秉坤',\n        email: '232313232@qq.com',\n        age: 21,\n        password: '',\n        checkPass: ''\n      },\n      rules: {\n        email: [{\n          validator: checkEmail,\n          trigger: \"blur\"\n        }],\n        password: [{\n          validator: validatePass,\n          trigger: \"blur\"\n        }],\n        checkPass: [{\n          required: true,\n          message: \"请再次输入密码\",\n          trigger: \"blur\"\n        }, {\n          validator: validatePass2,\n          trigger: \"blur\"\n        }],\n        age: [{\n          validator: checkAge,\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    reg_submitForm(formName) {\n      this.$refs[formName].validate(async valid => {\n        if (valid) {\n          try {\n            const response = await api.register(this.ruleForm);\n            if (response.data.code === '0') {\n              alert('注册成功!');\n              await this.$router.push('/login');\n            } else if (response.data.code === '10000') {\n              alert('该用户已存在');\n            }\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["axios","api","data","checkAge","rule","value","callback","Error","setTimeout","Number","isInteger","checkEmail","emailPattern","test","validatePass","ruleForm","checkPass","$refs","validateField","validatePass2","password","name","email","age","rules","validator","trigger","required","message","methods","reg_submitForm","formName","validate","valid","response","register","code","alert","$router","push","error","console","log","resetForm","resetFields"],"sources":["src/views/login/mylogin.vue"],"sourcesContent":["<template>\n  <div   :style=\"{'background-image': `url(${require('@/assets/header/head_background.png')})`}\">\n\n  <div class=\"registration-container\" >\n    <div class=\"registration-content\">\n      <h1>Welcome</h1>\n      <p>Join Us!</p>\n      <div class=\"logo\">\n        <img src=\"@/assets/header/head_background.png\" alt=\"Logo\">\n      </div>\n      <h2 class=\"form-title\">注册</h2>\n      <form @submit.prevent=\"register\">\n        <div class=\"form-group\">\n          <input type=\"text\" placeholder=\"用户名\" v-model=\"registerForm.username\">\n        </div>\n        <div class=\"form-group\">\n          <input type=\"password\" placeholder=\"密码\" v-model=\"registerForm.password\">\n        </div>\n        <div class=\"form-group\">\n          <input type=\"password\" placeholder=\"确认密码\" v-model=\"registerForm.confirmPassword\">\n        </div>\n        <div class=\"form-group\">\n          <input type=\"email\" placeholder=\"邮箱\" v-model=\"registerForm.email\">\n        </div>\n        <button type=\"submit\">注册</button>\n      </form>\n      <p class=\"switch-link\" @click=\"switchToLogin\">已有账号？去登录</p>\n    </div>\n  </div>\n  </div>\n\n</template>\n\n<script>\nimport axios from \"axios\";\nimport api from \"@/api/api\";\n\nexport default {\n  data() {\n    var checkAge = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('年龄不能为空'));\n      }\n      setTimeout(() => {\n        if (!Number.isInteger(value)) {\n          callback(new Error('请输入数字值'));\n        } else {\n          if (value < 15) {\n            callback(new Error('必须年满15岁'));\n          } else {\n            callback();\n          }\n        }\n      }, 1000);\n    };\n    var checkEmail = (rule, value ,callback) => {\n      if (!value){\n        return callback(new Error(\"邮箱不能为空\"));\n      }else{\n        var emailPattern =  /^[\\w-]+(.[\\w-]+)*@[\\w-]+(.[\\w-]+)+$/; // 正则表达式匹配电子邮箱格式\n        if(!emailPattern.test(value)){\n          return callback(new Error(\"请输入正确的邮箱格式\"))\n        }else{\n          callback();\n        }\n\n      }\n    }\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (this.ruleForm.checkPass !== '') {\n          this.$refs.ruleForm.validateField('checkPass');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n\n\n    return {\n      ruleForm: {\n        name:'吴秉坤',\n        email:'232313232@qq.com',\n        age: 21,\n        password: '',\n        checkPass: ''\n      },\n      rules: {\n        email: [\n          { validator: checkEmail, trigger: \"blur\" }\n        ],\n        password: [\n          { validator: validatePass, trigger: \"blur\" }\n        ],\n        checkPass: [\n          { required: true, message: \"请再次输入密码\", trigger: \"blur\" },\n          { validator: validatePass2, trigger: \"blur\" }\n        ],\n        age: [\n          { validator: checkAge, trigger: \"blur\" }\n        ]\n      }\n\n    };\n  },\n  methods: {\n    reg_submitForm(formName) {\n      this.$refs[formName].validate(async (valid) => {\n        if (valid) {\n          try {\n            const response = await api.register(this.ruleForm)\n\n            if (response.data.code === '0'){\n              alert('注册成功!');\n              await this.$router.push('/login')\n            }else if(response.data.code === '10000') {\n              alert('该用户已存在');\n            }\n\n          }catch (error){\n            console.log(error)\n          }\n\n\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n}\n</script>\n\n<style scoped>\n.registration-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background: linear-gradient(to right, #f7d1d7, #bfe3f1);\n}\n\n.registration-content {\n  width: 400px;\n  padding: 30px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  text-align: center;\n}\n\n.logo {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.logo img {\n  width: 100px;\n  height: 100px;\n}\n\n.form-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"],\ninput[type=\"email\"] {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  outline: none;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  background-color: #69b3f0;\n  color: #fff;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer;\n  outline: none;\n}\n\n.switch-link {\n  color: #888;\n  cursor: pointer;\n}\n\n.switch-link:hover {\n  text-decoration: underline;\n}\n</style>\n"],"mappings":";AAkCA,OAAAA,KAAA;AACA,OAAAC,GAAA;AAEA;EACAC,KAAA;IACA,IAAAC,QAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACA,OAAAC,QAAA,KAAAC,KAAA;MACA;MACAC,UAAA;QACA,KAAAC,MAAA,CAAAC,SAAA,CAAAL,KAAA;UACAC,QAAA,KAAAC,KAAA;QACA;UACA,IAAAF,KAAA;YACAC,QAAA,KAAAC,KAAA;UACA;YACAD,QAAA;UACA;QACA;MACA;IACA;IACA,IAAAK,UAAA,GAAAA,CAAAP,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACA,OAAAC,QAAA,KAAAC,KAAA;MACA;QACA,IAAAK,YAAA;QACA,KAAAA,YAAA,CAAAC,IAAA,CAAAR,KAAA;UACA,OAAAC,QAAA,KAAAC,KAAA;QACA;UACAD,QAAA;QACA;MAEA;IACA;IACA,IAAAQ,YAAA,GAAAA,CAAAV,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACA,SAAAQ,QAAA,CAAAC,SAAA;UACA,KAAAC,KAAA,CAAAF,QAAA,CAAAG,aAAA;QACA;QACAZ,QAAA;MACA;IACA;IACA,IAAAa,aAAA,GAAAA,CAAAf,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAU,QAAA,CAAAK,QAAA;QACAd,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IAGA;MACAS,QAAA;QACAM,IAAA;QACAC,KAAA;QACAC,GAAA;QACAH,QAAA;QACAJ,SAAA;MACA;MACAQ,KAAA;QACAF,KAAA,GACA;UAAAG,SAAA,EAAAd,UAAA;UAAAe,OAAA;QAAA,EACA;QACAN,QAAA,GACA;UAAAK,SAAA,EAAAX,YAAA;UAAAY,OAAA;QAAA,EACA;QACAV,SAAA,GACA;UAAAW,QAAA;UAAAC,OAAA;UAAAF,OAAA;QAAA,GACA;UAAAD,SAAA,EAAAN,aAAA;UAAAO,OAAA;QAAA,EACA;QACAH,GAAA,GACA;UAAAE,SAAA,EAAAtB,QAAA;UAAAuB,OAAA;QAAA;MAEA;IAEA;EACA;EACAG,OAAA;IACAC,eAAAC,QAAA;MACA,KAAAd,KAAA,CAAAc,QAAA,EAAAC,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;YACA,MAAAC,QAAA,SAAAjC,GAAA,CAAAkC,QAAA,MAAApB,QAAA;YAEA,IAAAmB,QAAA,CAAAhC,IAAA,CAAAkC,IAAA;cACAC,KAAA;cACA,WAAAC,OAAA,CAAAC,IAAA;YACA,WAAAL,QAAA,CAAAhC,IAAA,CAAAkC,IAAA;cACAC,KAAA;YACA;UAEA,SAAAG,KAAA;YACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;UACA;QAGA;MACA;IACA;IACAG,UAAAZ,QAAA;MACA,KAAAd,KAAA,CAAAc,QAAA,EAAAa,WAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
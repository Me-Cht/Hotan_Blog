{"ast":null,"code":"// Block quotes\n\n'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar isSpace = require('../common/utils').isSpace;\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var nextLine,\n    lastLineEmpty,\n    oldTShift,\n    oldSCount,\n    oldBMarks,\n    oldIndent,\n    oldParentType,\n    lines,\n    initial,\n    offset,\n    ch,\n    terminatorRules,\n    token,\n    i,\n    l,\n    terminate,\n    pos = state.bMarks[startLine] + state.tShift[startLine],\n    max = state.eMarks[startLine];\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E /* > */) {\n    return false;\n  }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) {\n    return true;\n  }\n\n  // skip one optional space (but not tab, check cmark impl) after '>'\n  if (state.src.charCodeAt(pos) === 0x20) {\n    pos++;\n  }\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  // skip spaces after \">\" and re-calculate offset\n  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n  oldBMarks = [state.bMarks[startLine]];\n  state.bMarks[startLine] = pos;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - offset % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n    pos++;\n  }\n  lastLineEmpty = pos >= max;\n  oldSCount = [state.sCount[startLine]];\n  state.sCount[startLine] = offset - initial;\n  oldTShift = [state.tShift[startLine]];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < oldIndent) {\n      break;\n    }\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n    if (state.src.charCodeAt(pos++) === 0x3E /* > */) {\n      // This line is inside the blockquote.\n\n      // skip one optional space (but not tab, check cmark impl) after '>'\n      if (state.src.charCodeAt(pos) === 0x20) {\n        pos++;\n      }\n\n      // skip spaces after \">\" and re-calculate offset\n      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - offset % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n        pos++;\n      }\n      lastLineEmpty = pos >= max;\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) {\n      break;\n    }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  token = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map = lines = [startLine, 0];\n  state.md.block.tokenize(state, startLine, nextLine);\n  token = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n  }\n  state.blkIndent = oldIndent;\n  return true;\n};","map":{"version":3,"names":["require","isSpace","module","exports","blockquote","state","startLine","endLine","silent","nextLine","lastLineEmpty","oldTShift","oldSCount","oldBMarks","oldIndent","oldParentType","lines","initial","offset","ch","terminatorRules","token","i","l","terminate","pos","bMarks","tShift","max","eMarks","src","charCodeAt","blkIndent","sCount","md","block","ruler","getRules","push","length","parentType","markup","map","tokenize","line"],"sources":["/Users/chenhetian/04Front_end/FruitVue0629/fruitshop/node_modules/markdown-it/lib/rules_block/blockquote.js"],"sourcesContent":["// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var nextLine, lastLineEmpty, oldTShift, oldSCount, oldBMarks, oldIndent, oldParentType, lines, initial, offset, ch,\n      terminatorRules, token,\n      i, l, terminate,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // skip one optional space (but not tab, check cmark impl) after '>'\n  if (state.src.charCodeAt(pos) === 0x20) { pos++; }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  // skip spaces after \">\" and re-calculate offset\n  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - offset % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < oldIndent) { break; }\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */) {\n      // This line is inside the blockquote.\n\n      // skip one optional space (but not tab, check cmark impl) after '>'\n      if (state.src.charCodeAt(pos) === 0x20) { pos++; }\n\n      // skip spaces after \">\" and re-calculate offset\n      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - offset % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
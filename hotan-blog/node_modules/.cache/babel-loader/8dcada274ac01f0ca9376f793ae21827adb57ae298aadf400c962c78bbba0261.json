{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/* eslint no-console:0 */\n/**\n * This module contains general functions that can be used for building\n * different kinds of domTree nodes in a consistent manner.\n */\n\nvar domTree = require(\"./domTree\");\nvar fontMetrics = require(\"./fontMetrics\");\nvar symbols = require(\"./symbols\");\nvar utils = require(\"./utils\");\nvar greekCapitals = [\"\\\\Gamma\", \"\\\\Delta\", \"\\\\Theta\", \"\\\\Lambda\", \"\\\\Xi\", \"\\\\Pi\", \"\\\\Sigma\", \"\\\\Upsilon\", \"\\\\Phi\", \"\\\\Psi\", \"\\\\Omega\"];\nvar dotlessLetters = [\"\\u0131\",\n// dotless i, \\imath\n\"\\u0237\" // dotless j, \\jmath\n];\n\n/**\n * Makes a symbolNode after translation via the list of symbols in symbols.js.\n * Correctly pulls out metrics for the character, and optionally takes a list of\n * classes to be attached to the node.\n */\nvar makeSymbol = function (value, style, mode, color, classes) {\n  // Replace the value with its replaced value from symbol.js\n  if (symbols[mode][value] && symbols[mode][value].replace) {\n    value = symbols[mode][value].replace;\n  }\n  var metrics = fontMetrics.getCharacterMetrics(value, style);\n  var symbolNode;\n  if (metrics) {\n    symbolNode = new domTree.symbolNode(value, metrics.height, metrics.depth, metrics.italic, metrics.skew, classes);\n  } else {\n    // TODO(emily): Figure out a good way to only print this in development\n    typeof console !== \"undefined\" && console.warn(\"No character metrics for '\" + value + \"' in style '\" + style + \"'\");\n    symbolNode = new domTree.symbolNode(value, 0, 0, 0, 0, classes);\n  }\n  if (color) {\n    symbolNode.style.color = color;\n  }\n  return symbolNode;\n};\n\n/**\n * Makes a symbol in Main-Regular or AMS-Regular.\n * Used for rel, bin, open, close, inner, and punct.\n */\nvar mathsym = function (value, mode, color, classes) {\n  // Decide what font to render the symbol in by its entry in the symbols\n  // table.\n  // Have a special case for when the value = \\ because the \\ is used as a\n  // textord in unsupported command errors but cannot be parsed as a regular\n  // text ordinal and is therefore not present as a symbol in the symbols\n  // table for text\n  if (value === \"\\\\\" || symbols[mode][value].font === \"main\") {\n    return makeSymbol(value, \"Main-Regular\", mode, color, classes);\n  } else {\n    return makeSymbol(value, \"AMS-Regular\", mode, color, classes.concat([\"amsrm\"]));\n  }\n};\n\n/**\n * Makes a symbol in the default font for mathords and textords.\n */\nvar mathDefault = function (value, mode, color, classes, type) {\n  if (type === \"mathord\") {\n    return mathit(value, mode, color, classes);\n  } else if (type === \"textord\") {\n    return makeSymbol(value, \"Main-Regular\", mode, color, classes.concat([\"mathrm\"]));\n  } else {\n    throw new Error(\"unexpected type: \" + type + \" in mathDefault\");\n  }\n};\n\n/**\n * Makes a symbol in the italic math font.\n */\nvar mathit = function (value, mode, color, classes) {\n  if (/[0-9]/.test(value.charAt(0)) ||\n  // glyphs for \\imath and \\jmath do not exist in Math-Italic so we\n  // need to use Main-Italic instead\n  utils.contains(dotlessLetters, value) || utils.contains(greekCapitals, value)) {\n    return makeSymbol(value, \"Main-Italic\", mode, color, classes.concat([\"mainit\"]));\n  } else {\n    return makeSymbol(value, \"Math-Italic\", mode, color, classes.concat([\"mathit\"]));\n  }\n};\n\n/**\n * Makes either a mathord or textord in the correct font and color.\n */\nvar makeOrd = function (group, options, type) {\n  var mode = group.mode;\n  var value = group.value;\n  if (symbols[mode][value] && symbols[mode][value].replace) {\n    value = symbols[mode][value].replace;\n  }\n  var classes = [\"mord\"];\n  var color = options.getColor();\n  var font = options.font;\n  if (font) {\n    if (font === \"mathit\" || utils.contains(dotlessLetters, value)) {\n      return mathit(value, mode, color, classes);\n    } else {\n      var fontName = fontMap[font].fontName;\n      if (fontMetrics.getCharacterMetrics(value, fontName)) {\n        return makeSymbol(value, fontName, mode, color, classes.concat([font]));\n      } else {\n        return mathDefault(value, mode, color, classes, type);\n      }\n    }\n  } else {\n    return mathDefault(value, mode, color, classes, type);\n  }\n};\n\n/**\n * Calculate the height, depth, and maxFontSize of an element based on its\n * children.\n */\nvar sizeElementFromChildren = function (elem) {\n  var height = 0;\n  var depth = 0;\n  var maxFontSize = 0;\n  if (elem.children) {\n    for (var i = 0; i < elem.children.length; i++) {\n      if (elem.children[i].height > height) {\n        height = elem.children[i].height;\n      }\n      if (elem.children[i].depth > depth) {\n        depth = elem.children[i].depth;\n      }\n      if (elem.children[i].maxFontSize > maxFontSize) {\n        maxFontSize = elem.children[i].maxFontSize;\n      }\n    }\n  }\n  elem.height = height;\n  elem.depth = depth;\n  elem.maxFontSize = maxFontSize;\n};\n\n/**\n * Makes a span with the given list of classes, list of children, and color.\n */\nvar makeSpan = function (classes, children, color) {\n  var span = new domTree.span(classes, children);\n  sizeElementFromChildren(span);\n  if (color) {\n    span.style.color = color;\n  }\n  return span;\n};\n\n/**\n * Makes a document fragment with the given list of children.\n */\nvar makeFragment = function (children) {\n  var fragment = new domTree.documentFragment(children);\n  sizeElementFromChildren(fragment);\n  return fragment;\n};\n\n/**\n * Makes an element placed in each of the vlist elements to ensure that each\n * element has the same max font size. To do this, we create a zero-width space\n * with the correct font size.\n */\nvar makeFontSizer = function (options, fontSize) {\n  var fontSizeInner = makeSpan([], [new domTree.symbolNode(\"\\u200b\")]);\n  fontSizeInner.style.fontSize = fontSize / options.style.sizeMultiplier + \"em\";\n  var fontSizer = makeSpan([\"fontsize-ensurer\", \"reset-\" + options.size, \"size5\"], [fontSizeInner]);\n  return fontSizer;\n};\n\n/**\n * Makes a vertical list by stacking elements and kerns on top of each other.\n * Allows for many different ways of specifying the positioning method.\n *\n * Arguments:\n *  - children: A list of child or kern nodes to be stacked on top of each other\n *              (i.e. the first element will be at the bottom, and the last at\n *              the top). Element nodes are specified as\n *                {type: \"elem\", elem: node}\n *              while kern nodes are specified as\n *                {type: \"kern\", size: size}\n *  - positionType: The method by which the vlist should be positioned. Valid\n *                  values are:\n *                   - \"individualShift\": The children list only contains elem\n *                                        nodes, and each node contains an extra\n *                                        \"shift\" value of how much it should be\n *                                        shifted (note that shifting is always\n *                                        moving downwards). positionData is\n *                                        ignored.\n *                   - \"top\": The positionData specifies the topmost point of\n *                            the vlist (note this is expected to be a height,\n *                            so positive values move up)\n *                   - \"bottom\": The positionData specifies the bottommost point\n *                               of the vlist (note this is expected to be a\n *                               depth, so positive values move down\n *                   - \"shift\": The vlist will be positioned such that its\n *                              baseline is positionData away from the baseline\n *                              of the first child. Positive values move\n *                              downwards.\n *                   - \"firstBaseline\": The vlist will be positioned such that\n *                                      its baseline is aligned with the\n *                                      baseline of the first child.\n *                                      positionData is ignored. (this is\n *                                      equivalent to \"shift\" with\n *                                      positionData=0)\n *  - positionData: Data used in different ways depending on positionType\n *  - options: An Options object\n *\n */\nvar makeVList = function (children, positionType, positionData, options) {\n  var depth;\n  var currPos;\n  var i;\n  if (positionType === \"individualShift\") {\n    var oldChildren = children;\n    children = [oldChildren[0]];\n\n    // Add in kerns to the list of children to get each element to be\n    // shifted to the correct specified shift\n    depth = -oldChildren[0].shift - oldChildren[0].elem.depth;\n    currPos = depth;\n    for (i = 1; i < oldChildren.length; i++) {\n      var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;\n      var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);\n      currPos = currPos + diff;\n      children.push({\n        type: \"kern\",\n        size: size\n      });\n      children.push(oldChildren[i]);\n    }\n  } else if (positionType === \"top\") {\n    // We always start at the bottom, so calculate the bottom by adding up\n    // all the sizes\n    var bottom = positionData;\n    for (i = 0; i < children.length; i++) {\n      if (children[i].type === \"kern\") {\n        bottom -= children[i].size;\n      } else {\n        bottom -= children[i].elem.height + children[i].elem.depth;\n      }\n    }\n    depth = bottom;\n  } else if (positionType === \"bottom\") {\n    depth = -positionData;\n  } else if (positionType === \"shift\") {\n    depth = -children[0].elem.depth - positionData;\n  } else if (positionType === \"firstBaseline\") {\n    depth = -children[0].elem.depth;\n  } else {\n    depth = 0;\n  }\n\n  // Make the fontSizer\n  var maxFontSize = 0;\n  for (i = 0; i < children.length; i++) {\n    if (children[i].type === \"elem\") {\n      maxFontSize = Math.max(maxFontSize, children[i].elem.maxFontSize);\n    }\n  }\n  var fontSizer = makeFontSizer(options, maxFontSize);\n\n  // Create a new list of actual children at the correct offsets\n  var realChildren = [];\n  currPos = depth;\n  for (i = 0; i < children.length; i++) {\n    if (children[i].type === \"kern\") {\n      currPos += children[i].size;\n    } else {\n      var child = children[i].elem;\n      var shift = -child.depth - currPos;\n      currPos += child.height + child.depth;\n      var childWrap = makeSpan([], [fontSizer, child]);\n      childWrap.height -= shift;\n      childWrap.depth += shift;\n      childWrap.style.top = shift + \"em\";\n      realChildren.push(childWrap);\n    }\n  }\n\n  // Add in an element at the end with no offset to fix the calculation of\n  // baselines in some browsers (namely IE, sometimes safari)\n  var baselineFix = makeSpan([\"baseline-fix\"], [fontSizer, new domTree.symbolNode(\"\\u200b\")]);\n  realChildren.push(baselineFix);\n  var vlist = makeSpan([\"vlist\"], realChildren);\n  // Fix the final height and depth, in case there were kerns at the ends\n  // since the makeSpan calculation won't take that in to account.\n  vlist.height = Math.max(currPos, vlist.height);\n  vlist.depth = Math.max(-depth, vlist.depth);\n  return vlist;\n};\n\n// A table of size -> font size for the different sizing functions\nvar sizingMultiplier = {\n  size1: 0.5,\n  size2: 0.7,\n  size3: 0.8,\n  size4: 0.9,\n  size5: 1.0,\n  size6: 1.2,\n  size7: 1.44,\n  size8: 1.73,\n  size9: 2.07,\n  size10: 2.49\n};\n\n// A map of spacing functions to their attributes, like size and corresponding\n// CSS class\nvar spacingFunctions = {\n  \"\\\\qquad\": {\n    size: \"2em\",\n    className: \"qquad\"\n  },\n  \"\\\\quad\": {\n    size: \"1em\",\n    className: \"quad\"\n  },\n  \"\\\\enspace\": {\n    size: \"0.5em\",\n    className: \"enspace\"\n  },\n  \"\\\\;\": {\n    size: \"0.277778em\",\n    className: \"thickspace\"\n  },\n  \"\\\\:\": {\n    size: \"0.22222em\",\n    className: \"mediumspace\"\n  },\n  \"\\\\,\": {\n    size: \"0.16667em\",\n    className: \"thinspace\"\n  },\n  \"\\\\!\": {\n    size: \"-0.16667em\",\n    className: \"negativethinspace\"\n  }\n};\n\n/**\n * Maps TeX font commands to objects containing:\n * - variant: string used for \"mathvariant\" attribute in buildMathML.js\n * - fontName: the \"style\" parameter to fontMetrics.getCharacterMetrics\n */\n// A map between tex font commands an MathML mathvariant attribute values\nvar fontMap = {\n  // styles\n  \"mathbf\": {\n    variant: \"bold\",\n    fontName: \"Main-Bold\"\n  },\n  \"mathrm\": {\n    variant: \"normal\",\n    fontName: \"Main-Regular\"\n  },\n  // \"mathit\" is missing because it requires the use of two fonts: Main-Italic\n  // and Math-Italic.  This is handled by a special case in makeOrd which ends\n  // up calling mathit.\n\n  // families\n  \"mathbb\": {\n    variant: \"double-struck\",\n    fontName: \"AMS-Regular\"\n  },\n  \"mathcal\": {\n    variant: \"script\",\n    fontName: \"Caligraphic-Regular\"\n  },\n  \"mathfrak\": {\n    variant: \"fraktur\",\n    fontName: \"Fraktur-Regular\"\n  },\n  \"mathscr\": {\n    variant: \"script\",\n    fontName: \"Script-Regular\"\n  },\n  \"mathsf\": {\n    variant: \"sans-serif\",\n    fontName: \"SansSerif-Regular\"\n  },\n  \"mathtt\": {\n    variant: \"monospace\",\n    fontName: \"Typewriter-Regular\"\n  }\n};\nmodule.exports = {\n  fontMap: fontMap,\n  makeSymbol: makeSymbol,\n  mathsym: mathsym,\n  makeSpan: makeSpan,\n  makeFragment: makeFragment,\n  makeVList: makeVList,\n  makeOrd: makeOrd,\n  sizingMultiplier: sizingMultiplier,\n  spacingFunctions: spacingFunctions\n};","map":{"version":3,"names":["domTree","require","fontMetrics","symbols","utils","greekCapitals","dotlessLetters","makeSymbol","value","style","mode","color","classes","replace","metrics","getCharacterMetrics","symbolNode","height","depth","italic","skew","console","warn","mathsym","font","concat","mathDefault","type","mathit","Error","test","charAt","contains","makeOrd","group","options","getColor","fontName","fontMap","sizeElementFromChildren","elem","maxFontSize","children","i","length","makeSpan","span","makeFragment","fragment","documentFragment","makeFontSizer","fontSize","fontSizeInner","sizeMultiplier","fontSizer","size","makeVList","positionType","positionData","currPos","oldChildren","shift","diff","push","bottom","Math","max","realChildren","child","childWrap","top","baselineFix","vlist","sizingMultiplier","size1","size2","size3","size4","size5","size6","size7","size8","size9","size10","spacingFunctions","className","variant","module","exports"],"sources":["/Users/chenhetian/04Front_end/FruitVue0629/hotan-blog/node_modules/katex/src/buildCommon.js"],"sourcesContent":["/* eslint no-console:0 */\n/**\n * This module contains general functions that can be used for building\n * different kinds of domTree nodes in a consistent manner.\n */\n\nvar domTree = require(\"./domTree\");\nvar fontMetrics = require(\"./fontMetrics\");\nvar symbols = require(\"./symbols\");\nvar utils = require(\"./utils\");\n\nvar greekCapitals = [\n    \"\\\\Gamma\",\n    \"\\\\Delta\",\n    \"\\\\Theta\",\n    \"\\\\Lambda\",\n    \"\\\\Xi\",\n    \"\\\\Pi\",\n    \"\\\\Sigma\",\n    \"\\\\Upsilon\",\n    \"\\\\Phi\",\n    \"\\\\Psi\",\n    \"\\\\Omega\",\n];\n\nvar dotlessLetters = [\n    \"\\u0131\",   // dotless i, \\imath\n    \"\\u0237\",   // dotless j, \\jmath\n];\n\n/**\n * Makes a symbolNode after translation via the list of symbols in symbols.js.\n * Correctly pulls out metrics for the character, and optionally takes a list of\n * classes to be attached to the node.\n */\nvar makeSymbol = function(value, style, mode, color, classes) {\n    // Replace the value with its replaced value from symbol.js\n    if (symbols[mode][value] && symbols[mode][value].replace) {\n        value = symbols[mode][value].replace;\n    }\n\n    var metrics = fontMetrics.getCharacterMetrics(value, style);\n\n    var symbolNode;\n    if (metrics) {\n        symbolNode = new domTree.symbolNode(\n            value, metrics.height, metrics.depth, metrics.italic, metrics.skew,\n            classes);\n    } else {\n        // TODO(emily): Figure out a good way to only print this in development\n        typeof console !== \"undefined\" && console.warn(\n            \"No character metrics for '\" + value + \"' in style '\" +\n                style + \"'\");\n        symbolNode = new domTree.symbolNode(value, 0, 0, 0, 0, classes);\n    }\n\n    if (color) {\n        symbolNode.style.color = color;\n    }\n\n    return symbolNode;\n};\n\n/**\n * Makes a symbol in Main-Regular or AMS-Regular.\n * Used for rel, bin, open, close, inner, and punct.\n */\nvar mathsym = function(value, mode, color, classes) {\n    // Decide what font to render the symbol in by its entry in the symbols\n    // table.\n    // Have a special case for when the value = \\ because the \\ is used as a\n    // textord in unsupported command errors but cannot be parsed as a regular\n    // text ordinal and is therefore not present as a symbol in the symbols\n    // table for text\n    if (value === \"\\\\\" || symbols[mode][value].font === \"main\") {\n        return makeSymbol(value, \"Main-Regular\", mode, color, classes);\n    } else {\n        return makeSymbol(\n            value, \"AMS-Regular\", mode, color, classes.concat([\"amsrm\"]));\n    }\n};\n\n/**\n * Makes a symbol in the default font for mathords and textords.\n */\nvar mathDefault = function(value, mode, color, classes, type) {\n    if (type === \"mathord\") {\n        return mathit(value, mode, color, classes);\n    } else if (type === \"textord\") {\n        return makeSymbol(\n            value, \"Main-Regular\", mode, color, classes.concat([\"mathrm\"]));\n    } else {\n        throw new Error(\"unexpected type: \" + type + \" in mathDefault\");\n    }\n};\n\n/**\n * Makes a symbol in the italic math font.\n */\nvar mathit = function(value, mode, color, classes) {\n    if (/[0-9]/.test(value.charAt(0)) ||\n            // glyphs for \\imath and \\jmath do not exist in Math-Italic so we\n            // need to use Main-Italic instead\n            utils.contains(dotlessLetters, value) ||\n            utils.contains(greekCapitals, value)) {\n        return makeSymbol(\n            value, \"Main-Italic\", mode, color, classes.concat([\"mainit\"]));\n    } else {\n        return makeSymbol(\n            value, \"Math-Italic\", mode, color, classes.concat([\"mathit\"]));\n    }\n};\n\n/**\n * Makes either a mathord or textord in the correct font and color.\n */\nvar makeOrd = function(group, options, type) {\n    var mode = group.mode;\n    var value = group.value;\n    if (symbols[mode][value] && symbols[mode][value].replace) {\n        value = symbols[mode][value].replace;\n    }\n\n    var classes = [\"mord\"];\n    var color = options.getColor();\n\n    var font = options.font;\n    if (font) {\n        if (font === \"mathit\" || utils.contains(dotlessLetters, value)) {\n            return mathit(value, mode, color, classes);\n        } else {\n            var fontName = fontMap[font].fontName;\n            if (fontMetrics.getCharacterMetrics(value, fontName)) {\n                return makeSymbol(\n                    value, fontName, mode, color, classes.concat([font]));\n            } else {\n                return mathDefault(value, mode, color, classes, type);\n            }\n        }\n    } else {\n        return mathDefault(value, mode, color, classes, type);\n    }\n};\n\n/**\n * Calculate the height, depth, and maxFontSize of an element based on its\n * children.\n */\nvar sizeElementFromChildren = function(elem) {\n    var height = 0;\n    var depth = 0;\n    var maxFontSize = 0;\n\n    if (elem.children) {\n        for (var i = 0; i < elem.children.length; i++) {\n            if (elem.children[i].height > height) {\n                height = elem.children[i].height;\n            }\n            if (elem.children[i].depth > depth) {\n                depth = elem.children[i].depth;\n            }\n            if (elem.children[i].maxFontSize > maxFontSize) {\n                maxFontSize = elem.children[i].maxFontSize;\n            }\n        }\n    }\n\n    elem.height = height;\n    elem.depth = depth;\n    elem.maxFontSize = maxFontSize;\n};\n\n/**\n * Makes a span with the given list of classes, list of children, and color.\n */\nvar makeSpan = function(classes, children, color) {\n    var span = new domTree.span(classes, children);\n\n    sizeElementFromChildren(span);\n\n    if (color) {\n        span.style.color = color;\n    }\n\n    return span;\n};\n\n/**\n * Makes a document fragment with the given list of children.\n */\nvar makeFragment = function(children) {\n    var fragment = new domTree.documentFragment(children);\n\n    sizeElementFromChildren(fragment);\n\n    return fragment;\n};\n\n/**\n * Makes an element placed in each of the vlist elements to ensure that each\n * element has the same max font size. To do this, we create a zero-width space\n * with the correct font size.\n */\nvar makeFontSizer = function(options, fontSize) {\n    var fontSizeInner = makeSpan([], [new domTree.symbolNode(\"\\u200b\")]);\n    fontSizeInner.style.fontSize =\n        (fontSize / options.style.sizeMultiplier) + \"em\";\n\n    var fontSizer = makeSpan(\n        [\"fontsize-ensurer\", \"reset-\" + options.size, \"size5\"],\n        [fontSizeInner]);\n\n    return fontSizer;\n};\n\n/**\n * Makes a vertical list by stacking elements and kerns on top of each other.\n * Allows for many different ways of specifying the positioning method.\n *\n * Arguments:\n *  - children: A list of child or kern nodes to be stacked on top of each other\n *              (i.e. the first element will be at the bottom, and the last at\n *              the top). Element nodes are specified as\n *                {type: \"elem\", elem: node}\n *              while kern nodes are specified as\n *                {type: \"kern\", size: size}\n *  - positionType: The method by which the vlist should be positioned. Valid\n *                  values are:\n *                   - \"individualShift\": The children list only contains elem\n *                                        nodes, and each node contains an extra\n *                                        \"shift\" value of how much it should be\n *                                        shifted (note that shifting is always\n *                                        moving downwards). positionData is\n *                                        ignored.\n *                   - \"top\": The positionData specifies the topmost point of\n *                            the vlist (note this is expected to be a height,\n *                            so positive values move up)\n *                   - \"bottom\": The positionData specifies the bottommost point\n *                               of the vlist (note this is expected to be a\n *                               depth, so positive values move down\n *                   - \"shift\": The vlist will be positioned such that its\n *                              baseline is positionData away from the baseline\n *                              of the first child. Positive values move\n *                              downwards.\n *                   - \"firstBaseline\": The vlist will be positioned such that\n *                                      its baseline is aligned with the\n *                                      baseline of the first child.\n *                                      positionData is ignored. (this is\n *                                      equivalent to \"shift\" with\n *                                      positionData=0)\n *  - positionData: Data used in different ways depending on positionType\n *  - options: An Options object\n *\n */\nvar makeVList = function(children, positionType, positionData, options) {\n    var depth;\n    var currPos;\n    var i;\n    if (positionType === \"individualShift\") {\n        var oldChildren = children;\n        children = [oldChildren[0]];\n\n        // Add in kerns to the list of children to get each element to be\n        // shifted to the correct specified shift\n        depth = -oldChildren[0].shift - oldChildren[0].elem.depth;\n        currPos = depth;\n        for (i = 1; i < oldChildren.length; i++) {\n            var diff = -oldChildren[i].shift - currPos -\n                oldChildren[i].elem.depth;\n            var size = diff -\n                (oldChildren[i - 1].elem.height +\n                 oldChildren[i - 1].elem.depth);\n\n            currPos = currPos + diff;\n\n            children.push({type: \"kern\", size: size});\n            children.push(oldChildren[i]);\n        }\n    } else if (positionType === \"top\") {\n        // We always start at the bottom, so calculate the bottom by adding up\n        // all the sizes\n        var bottom = positionData;\n        for (i = 0; i < children.length; i++) {\n            if (children[i].type === \"kern\") {\n                bottom -= children[i].size;\n            } else {\n                bottom -= children[i].elem.height + children[i].elem.depth;\n            }\n        }\n        depth = bottom;\n    } else if (positionType === \"bottom\") {\n        depth = -positionData;\n    } else if (positionType === \"shift\") {\n        depth = -children[0].elem.depth - positionData;\n    } else if (positionType === \"firstBaseline\") {\n        depth = -children[0].elem.depth;\n    } else {\n        depth = 0;\n    }\n\n    // Make the fontSizer\n    var maxFontSize = 0;\n    for (i = 0; i < children.length; i++) {\n        if (children[i].type === \"elem\") {\n            maxFontSize = Math.max(maxFontSize, children[i].elem.maxFontSize);\n        }\n    }\n    var fontSizer = makeFontSizer(options, maxFontSize);\n\n    // Create a new list of actual children at the correct offsets\n    var realChildren = [];\n    currPos = depth;\n    for (i = 0; i < children.length; i++) {\n        if (children[i].type === \"kern\") {\n            currPos += children[i].size;\n        } else {\n            var child = children[i].elem;\n\n            var shift = -child.depth - currPos;\n            currPos += child.height + child.depth;\n\n            var childWrap = makeSpan([], [fontSizer, child]);\n            childWrap.height -= shift;\n            childWrap.depth += shift;\n            childWrap.style.top = shift + \"em\";\n\n            realChildren.push(childWrap);\n        }\n    }\n\n    // Add in an element at the end with no offset to fix the calculation of\n    // baselines in some browsers (namely IE, sometimes safari)\n    var baselineFix = makeSpan(\n        [\"baseline-fix\"], [fontSizer, new domTree.symbolNode(\"\\u200b\")]);\n    realChildren.push(baselineFix);\n\n    var vlist = makeSpan([\"vlist\"], realChildren);\n    // Fix the final height and depth, in case there were kerns at the ends\n    // since the makeSpan calculation won't take that in to account.\n    vlist.height = Math.max(currPos, vlist.height);\n    vlist.depth = Math.max(-depth, vlist.depth);\n    return vlist;\n};\n\n// A table of size -> font size for the different sizing functions\nvar sizingMultiplier = {\n    size1: 0.5,\n    size2: 0.7,\n    size3: 0.8,\n    size4: 0.9,\n    size5: 1.0,\n    size6: 1.2,\n    size7: 1.44,\n    size8: 1.73,\n    size9: 2.07,\n    size10: 2.49,\n};\n\n// A map of spacing functions to their attributes, like size and corresponding\n// CSS class\nvar spacingFunctions = {\n    \"\\\\qquad\": {\n        size: \"2em\",\n        className: \"qquad\",\n    },\n    \"\\\\quad\": {\n        size: \"1em\",\n        className: \"quad\",\n    },\n    \"\\\\enspace\": {\n        size: \"0.5em\",\n        className: \"enspace\",\n    },\n    \"\\\\;\": {\n        size: \"0.277778em\",\n        className: \"thickspace\",\n    },\n    \"\\\\:\": {\n        size: \"0.22222em\",\n        className: \"mediumspace\",\n    },\n    \"\\\\,\": {\n        size: \"0.16667em\",\n        className: \"thinspace\",\n    },\n    \"\\\\!\": {\n        size: \"-0.16667em\",\n        className: \"negativethinspace\",\n    },\n};\n\n/**\n * Maps TeX font commands to objects containing:\n * - variant: string used for \"mathvariant\" attribute in buildMathML.js\n * - fontName: the \"style\" parameter to fontMetrics.getCharacterMetrics\n */\n// A map between tex font commands an MathML mathvariant attribute values\nvar fontMap = {\n    // styles\n    \"mathbf\": {\n        variant: \"bold\",\n        fontName: \"Main-Bold\",\n    },\n    \"mathrm\": {\n        variant: \"normal\",\n        fontName: \"Main-Regular\",\n    },\n\n    // \"mathit\" is missing because it requires the use of two fonts: Main-Italic\n    // and Math-Italic.  This is handled by a special case in makeOrd which ends\n    // up calling mathit.\n\n    // families\n    \"mathbb\": {\n        variant: \"double-struck\",\n        fontName: \"AMS-Regular\",\n    },\n    \"mathcal\": {\n        variant: \"script\",\n        fontName: \"Caligraphic-Regular\",\n    },\n    \"mathfrak\": {\n        variant: \"fraktur\",\n        fontName: \"Fraktur-Regular\",\n    },\n    \"mathscr\": {\n        variant: \"script\",\n        fontName: \"Script-Regular\",\n    },\n    \"mathsf\": {\n        variant: \"sans-serif\",\n        fontName: \"SansSerif-Regular\",\n    },\n    \"mathtt\": {\n        variant: \"monospace\",\n        fontName: \"Typewriter-Regular\",\n    },\n};\n\nmodule.exports = {\n    fontMap: fontMap,\n    makeSymbol: makeSymbol,\n    mathsym: mathsym,\n    makeSpan: makeSpan,\n    makeFragment: makeFragment,\n    makeVList: makeVList,\n    makeOrd: makeOrd,\n    sizingMultiplier: sizingMultiplier,\n    spacingFunctions: spacingFunctions,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
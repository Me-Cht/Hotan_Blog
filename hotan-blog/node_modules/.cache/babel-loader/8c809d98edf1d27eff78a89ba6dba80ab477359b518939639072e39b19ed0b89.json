{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from \"@/api/api\";\nimport { required, email, minLength } from 'vuelidate/lib/validators';\nimport { validationMixin } from 'vuelidate';\nimport Footer from \"@/components/Footer.vue\";\nexport default {\n  name: 'RegistrationPage',\n  components: {\n    Footer\n  },\n  data() {\n    const checkAge = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('年龄不能为空'));\n      } else if (!Number.isInteger(value)) {\n        callback(new Error('请输入数字值'));\n      } else if (value < 15) {\n        callback(new Error('必须年满15岁'));\n      } else {\n        callback();\n      }\n    };\n    const checkEmail = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(\"邮箱不能为空\"));\n      } else {\n        const emailPattern = /^[\\w-]+(.[\\w-]+)*@[\\w-]+(.[\\w-]+)+$/; // 正则表达式匹配电子邮箱格式\n        if (!emailPattern.test(value)) {\n          callback(new Error(\"请输入正确的邮箱格式\"));\n        } else {\n          callback();\n        }\n      }\n    };\n    const validatePass = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请输入密码'));\n      } else if (this.ruleForm.checkPass !== '') {\n        this.$refs.ruleForm.validateField('checkPass');\n        callback();\n      } else {\n        callback();\n      }\n    };\n    const validatePass2 = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      ruleForm: {\n        name: '',\n        email: '',\n        age: '',\n        password: '',\n        checkPass: ''\n      },\n      rules: {\n        email: [{\n          validator: checkEmail,\n          trigger: 'blur'\n        }],\n        password: [{\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        checkPass: [{\n          required: true,\n          message: '请再次输入密码',\n          trigger: 'blur'\n        }, {\n          validator: validatePass2,\n          trigger: 'blur'\n        }],\n        age: [{\n          validator: checkAge,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    async reg_submitForm(formName) {\n      try {\n        const response = await api.register(this.ruleForm);\n        if (response.data.code === '0') {\n          alert('注册成功!');\n          await this.$router.push('/login');\n        } else if (response.data.code === '10000') {\n          alert('该用户已存在');\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    switchToLogin() {\n      this.$router.push('/login');\n    }\n  }\n};","map":{"version":3,"names":["api","required","email","minLength","validationMixin","Footer","name","components","data","checkAge","rule","value","callback","Error","Number","isInteger","checkEmail","emailPattern","test","validatePass","ruleForm","checkPass","$refs","validateField","validatePass2","password","age","rules","validator","trigger","message","methods","reg_submitForm","formName","response","register","code","alert","$router","push","error","console","log","switchToLogin"],"sources":["src/views/register/index.vue"],"sourcesContent":["<template>\n  <div class=\"container\" :style=\"{'background-image': `url(${require('@/assets/header/headBackground.png')})`, 'background-size': 'auto 100%'}\">\n\n  <div class=\"registration-container\">\n    <div class=\"registration-content\">\n      <h1>Welcome</h1>\n      <p>Join Us!</p>\n      <div class=\"logo\">\n        <img src=\"@/assets/logo/DeckLiza.png\" alt=\"Logo\">\n      </div>\n      <h2 class=\"form-title\">注册</h2>\n      <form ref=\"ruleForm\" @submit.prevent=\"reg_submitForm('ruleForm')\">\n        <div class=\"form-group\">\n          <input type=\"text\" placeholder=\"用户名\" v-model=\"ruleForm.name\">\n        </div>\n        <div class=\"form-group\">\n          <input type=\"password\" placeholder=\"密码\" v-model=\"ruleForm.password\">\n        </div>\n        <div class=\"form-group\">\n          <input type=\"password\" placeholder=\"确认密码\" v-model=\"ruleForm.checkPass\">\n        </div>\n        <div class=\"form-group\">\n          <input type=\"email\" placeholder=\"邮箱\" v-model=\"ruleForm.email\">\n        </div>\n        <button type=\"submit\" @click=\"reg_submitForm\">注册</button>\n      </form>\n      <p class=\"switch-link\" @click=\"switchToLogin\">已有账号？去登录</p>\n    </div>\n  </div>\n    <Footer></Footer>\n\n  </div>\n</template>\n\n<script>\nimport api from \"@/api/api\";\nimport { required, email, minLength } from 'vuelidate/lib/validators';\nimport { validationMixin } from 'vuelidate';\nimport Footer from \"@/components/Footer.vue\";\n\nexport default {\n  name: 'RegistrationPage',\n  components: {Footer},\n  data() {\n    const checkAge = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('年龄不能为空'));\n      } else if (!Number.isInteger(value)) {\n        callback(new Error('请输入数字值'));\n      } else if (value < 15) {\n        callback(new Error('必须年满15岁'));\n      } else {\n        callback();\n      }\n    };\n\n    const checkEmail = (rule, value ,callback) => {\n      if (!value) {\n        callback(new Error(\"邮箱不能为空\"));\n      } else {\n        const emailPattern = /^[\\w-]+(.[\\w-]+)*@[\\w-]+(.[\\w-]+)+$/; // 正则表达式匹配电子邮箱格式\n        if (!emailPattern.test(value)) {\n          callback(new Error(\"请输入正确的邮箱格式\"));\n        } else {\n          callback();\n        }\n      }\n    };\n\n    const validatePass = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请输入密码'));\n      } else if (this.ruleForm.checkPass !== '') {\n        this.$refs.ruleForm.validateField('checkPass');\n        callback();\n      } else {\n        callback();\n      }\n    };\n\n    const validatePass2 = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      ruleForm: {\n        name: '',\n        email: '',\n        age: '',\n        password: '',\n        checkPass: ''\n      },\n      rules: {\n        email: [\n          { validator: checkEmail, trigger: 'blur' }\n        ],\n        password: [\n          { validator: validatePass, trigger: 'blur' }\n        ],\n        checkPass: [\n          { required: true, message: '请再次输入密码', trigger: 'blur' },\n          { validator: validatePass2, trigger: 'blur' }\n        ],\n        age: [\n          { validator: checkAge, trigger: 'blur' }\n        ]\n      }\n    };\n  },\n  methods: {\n    async reg_submitForm(formName) {\n      try {\n        const response = await api.register(this.ruleForm);\n        if (response.data.code === '0') {\n          alert('注册成功!');\n          await this.$router.push('/login');\n        } else if (response.data.code === '10000') {\n          alert('该用户已存在');\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n\n    switchToLogin() {\n      this.$router.push('/login');\n    }\n  }\n};\n</script>\n\n<style scoped>\nbody {\n  position: relative;\n}\n.container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n}\n.registration-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  /*background: linear-gradient(to right, #f7d1d7, #bfe3f1);*/\n}\n\n.registration-content {\n  width: 400px;\n  padding: 30px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  text-align: center;\n}\n\n.logo {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.logo img {\n  width: 100px;\n  height: 100px;\n}\n\n.form-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"],\ninput[type=\"email\"] {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  outline: none;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  background-color: #69b3f0;\n  color: #fff;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer;\n  outline: none;\n}\n\n.switch-link {\n  color: #888;\n  cursor: pointer;\n}\n\n.switch-link:hover {\n  text-decoration: underline;\n}\n</style>\n"],"mappings":";AAmCA,OAAAA,GAAA;AACA,SAAAC,QAAA,EAAAC,KAAA,EAAAC,SAAA;AACA,SAAAC,eAAA;AACA,OAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IAAAF;EAAA;EACAG,KAAA;IACA,MAAAC,QAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,YAAAC,MAAA,CAAAC,SAAA,CAAAJ,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IAEA,MAAAI,UAAA,GAAAA,CAAAN,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACA,MAAAI,YAAA;QACA,KAAAA,YAAA,CAAAC,IAAA,CAAAP,KAAA;UACAC,QAAA,KAAAC,KAAA;QACA;UACAD,QAAA;QACA;MACA;IACA;IAEA,MAAAO,YAAA,GAAAA,CAAAT,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,gBAAAO,QAAA,CAAAC,SAAA;QACA,KAAAC,KAAA,CAAAF,QAAA,CAAAG,aAAA;QACAX,QAAA;MACA;QACAA,QAAA;MACA;IACA;IAEA,MAAAY,aAAA,GAAAA,CAAAd,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAS,QAAA,CAAAK,QAAA;QACAb,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IAEA;MACAQ,QAAA;QACAd,IAAA;QACAJ,KAAA;QACAwB,GAAA;QACAD,QAAA;QACAJ,SAAA;MACA;MACAM,KAAA;QACAzB,KAAA,GACA;UAAA0B,SAAA,EAAAZ,UAAA;UAAAa,OAAA;QAAA,EACA;QACAJ,QAAA,GACA;UAAAG,SAAA,EAAAT,YAAA;UAAAU,OAAA;QAAA,EACA;QACAR,SAAA,GACA;UAAApB,QAAA;UAAA6B,OAAA;UAAAD,OAAA;QAAA,GACA;UAAAD,SAAA,EAAAJ,aAAA;UAAAK,OAAA;QAAA,EACA;QACAH,GAAA,GACA;UAAAE,SAAA,EAAAnB,QAAA;UAAAoB,OAAA;QAAA;MAEA;IACA;EACA;EACAE,OAAA;IACA,MAAAC,eAAAC,QAAA;MACA;QACA,MAAAC,QAAA,SAAAlC,GAAA,CAAAmC,QAAA,MAAAf,QAAA;QACA,IAAAc,QAAA,CAAA1B,IAAA,CAAA4B,IAAA;UACAC,KAAA;UACA,WAAAC,OAAA,CAAAC,IAAA;QACA,WAAAL,QAAA,CAAA1B,IAAA,CAAA4B,IAAA;UACAC,KAAA;QACA;MACA,SAAAG,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IAGAG,cAAA;MACA,KAAAL,OAAA,CAAAC,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}